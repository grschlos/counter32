
eth_test.elf:     file format elf32-littlenios2
eth_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00004660 memsz 0x00004660 flags r-x
    LOAD off    0x00005680 vaddr 0x00024680 paddr 0x00024884 align 2**12
         filesz 0x00000204 memsz 0x00000204 flags rw-
    LOAD off    0x00005a88 vaddr 0x00024a88 paddr 0x00024a88 align 2**12
         filesz 0x00000000 memsz 0x00000284 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00004634  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  00024654  00024654  00005654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000204  00024680  00024884  00005680  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000284  00024a88  00024a88  00005a88  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00005884  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000378  00000000  00000000  000058a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004616  00000000  00000000  00005c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015ae  00000000  00000000  0000a236  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bda  00000000  00000000  0000b7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bf8  00000000  00000000  0000d3c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000117b  00000000  00000000  0000dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001168  00000000  00000000  0000f133  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  0001029c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000038  00000000  00000000  000102b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00011efc  2**0
                  CONTENTS, READONLY
 16 .cpu          00000003  00000000  00000000  00011eff  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00011f02  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00011f03  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  00011f04  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  00011f08  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  00011f0c  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00011f10  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00011f19  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00011f22  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000004  00000000  00000000  00011f2b  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000034  00000000  00000000  00011f2f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000907a2  00000000  00000000  00011f63  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .text	00000000 .text
00024654 l    d  .rodata	00000000 .rodata
00024680 l    d  .rwdata	00000000 .rwdata
00024a88 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../eth_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 ip_arp_udp_tcp.c
00024854 l     O .rwdata	00000001 wwwport
00024a88 l     O .bss	00000006 macaddr
00024a8e l     O .bss	00000004 ipaddr
00024a94 l     O .bss	00000004 info_hdr_len
00024a98 l     O .bss	00000004 info_data_len
00024855 l     O .rwdata	00000001 seqnum
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 simple_server.c
00024858 l     O .rwdata	00000006 mymac
0002485e l     O .rwdata	00000004 myip
00024864 l     O .rwdata	00000004 myudpport
00024868 l     O .rwdata	00000004 delay
00024a9c l     O .bss	00000001 Enc28j60Bank
00024a9e l     O .bss	00000002 NextPacketPtr
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00023738 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002388c l     F .text	00000038 alt_dev_reg
00024680 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00023da4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00023dd0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00023edc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00024034 l     F .text	00000050 alt_get_errno
00024084 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
0002019c g     F .text	000000b4 init_ip_arp_udp_tcp
00023824 g     F .text	00000068 alt_main
000227ec g     F .text	00000220 readDACValues
00021c24 g     F .text	00000040 sendAddr
00022278 g     F .text	00000074 sendGate
00024884 g       *ABS*	00000000 __flash_rwdata_start
00022194 g     F .text	00000074 sendRun
00021ecc g     F .text	000000a4 initDAC
00021234 g     F .text	00000090 enc28j60ReadBuffer
00021354 g     F .text	0000007c enc28j60SetBank
00022a0c g     F .text	0000014c parseRun
00020f9c g     F .text	00000028 SPI2_Init
00000000  w      *UND*	00000000 __errno
00020eb4 g     F .text	000000e8 make_tcp_ack_with_data
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00024aac g     O .bss	00000004 errno
00024aa4 g     O .bss	00000004 alt_argv
00022b58 g     F .text	00000b98 simple_server
0002c854 g       *ABS*	00000000 _gp
00021f70 g     F .text	0000014c sendCalibDAC
000226cc g     F .text	00000120 makeCountResponse
000246d4 g     O .rwdata	00000180 alt_fd_list
00022208 g     F .text	00000070 sendFreq
00021538 g     F .text	000002c8 enc28j60Init
0002436c g     F .text	00000090 alt_find_dev
00021b6c g     F .text	0000003c sendSignal
00023fbc g     F .text	00000078 alt_io_redirect
000209bc g     F .text	00000178 make_udp_reply_from_request
00021dcc g     F .text	0000004c resetDAC
000211a8 g     F .text	0000008c enc28j60WriteOp
000239f4 g     F .text	000000f4 altera_avalon_jtag_uart_read
00020c2c g     F .text	00000098 init_len_info
000213d0 g     F .text	00000048 enc28j60Read
000212c4 g     F .text	00000090 enc28j60WriteBuffer
00021470 g     F .text	00000088 enc28j60PhyWrite
00021af4 g     F .text	00000028 clearSignal
0002487c g     O .rwdata	00000004 alt_max_fd
00021c64 g     F .text	00000090 readCounter
00020cc4 g     F .text	0000007c fill_tcp_data_p
00024d0c g       *ABS*	00000000 __bss_end
000223ec g     F .text	00000074 makeCharResponse
00021800 g     F .text	0000002c enc28j60getrev
00022108 g     F .text	0000008c initCounter
00021e18 g     F .text	000000b4 initDACChannel
00020000 g       *ABS*	00000000 __alt_mem_onchip_mem
000246ac g     O .rwdata	00000028 alt_dev_null
00023d88 g     F .text	0000001c alt_dcache_flush_all
000214f8 g     F .text	00000040 enc28j60clkout
00024884 g       *ABS*	00000000 __ram_rwdata_end
00024874 g     O .rwdata	00000008 alt_dev_list
00024680 g       *ABS*	00000000 __ram_rodata_end
00024d0c g       *ABS*	00000000 end
00020b34 g     F .text	000000c4 make_tcp_synack_from_syn
0002a7f8 g       *ABS*	00000000 __alt_stack_pointer
00023ae8 g     F .text	00000098 altera_avalon_jtag_uart_write
00021064 g     F .text	00000050 SPI2_Write
000218fc g     F .text	000001b0 enc28j60PacketReceive
00020318 g     F .text	000000e4 eth_type_is_ip_and_my_ip
00020020 g     F .text	0000003c _start
00023b80 g     F .text	00000208 alt_avalon_spi_command
000238f8 g     F .text	0000003c alt_sys_init
000220bc g     F .text	0000004c resetCounter
000236f0 g     F .text	00000028 __mulsi3
00024680 g       *ABS*	00000000 __ram_rwdata_start
00024654 g       *ABS*	00000000 __ram_rodata_start
00020484 g     F .text	000000ac fill_ip_hdr_checksum
00023934 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024510 g     F .text	000000d4 alt_get_fd
0002102c g     F .text	00000038 _Delay
000245e4 g     F .text	00000048 memcmp
00024d0c g       *ABS*	00000000 __alt_stack_base
000243fc g     F .text	00000114 alt_find_file
00023e20 g     F .text	000000a0 alt_dev_llist_insert
00020250 g     F .text	000000c8 eth_type_is_arp_and_my_ip
00024a88 g       *ABS*	00000000 __bss_start
00023718 g     F .text	00000020 memset
00020ffc g     F .text	00000030 main
00024aa8 g     O .bss	00000004 alt_envp
00021be8 g     F .text	0000003c sendData32
00023994 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00024880 g     O .rwdata	00000004 alt_errno
00024654 g       *ABS*	00000000 __flash_rodata_start
00024ab0 g     O .bss	0000012d bufUDP
00021b44 g     F .text	00000028 clearData
00021b1c g     F .text	00000028 clearAddr
000238c4 g     F .text	00000034 alt_irq_init
000242cc g     F .text	00000080 alt_release_fd
00021cf4 g     F .text	000000d8 readDAC
00021108 g     F .text	000000a0 enc28j60ReadOp
00021ba8 g     F .text	00000040 sendData
00020530 g     F .text	0000009c make_ip
00024aa0 g     O .bss	00000004 alt_argc
00024bdd g     O .bss	0000012d buf
00020bf8 g     F .text	00000034 get_tcp_data_pointer
00020fc4 g     F .text	00000038 Delay
0002486c g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00021ad0 g     F .text	00000024 readData
00020920 g     F .text	0000009c make_echo_reply_from_request
00020d40 g     F .text	0000007c fill_tcp_data
00024884 g       *ABS*	00000000 _edata
00024d0c g       *ABS*	00000000 _end
000205cc g     F .text	00000224 make_tcphead
00020020 g       *ABS*	00000000 __ram_exceptions_end
000203fc g     F .text	00000088 make_eth
0002434c g     F .text	00000020 altera_nios2_qsys_irq_init
000207f0 g     F .text	00000130 make_arp_answer_from_request
00022368 g     F .text	00000084 writeInt
0002a7f8 g       *ABS*	00000000 __alt_data_end
000210b4 g     F .text	00000054 SPI2_Read
0002005c g     F .text	00000140 checksum
0002000c g       .entry	00000000 _exit
00020dbc g     F .text	000000f8 make_tcp_ack_from_any
0002462c g     F .text	00000028 strlen
00024174 g     F .text	00000158 open
00021418 g     F .text	00000058 enc28j60Write
00023ec0 g     F .text	0000001c alt_icache_flush_all
0002182c g     F .text	000000d0 enc28j60PacketSend
00000000 g       *ABS*	00000000 __alt_mem_epcs
00022460 g     F .text	00000084 makeIntResponse
000224e4 g     F .text	000001e8 writeDACValues
000222ec g     F .text	0000007c writeResponse
000237a4 g     F .text	00000080 alt_load
00021aac g     F .text	00000024 readAddr



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at

0002000c <_exit>:
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	dee9fe14 	ori	sp,sp,43000
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6b21514 	ori	gp,gp,51284
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	1092a214 	ori	r2,r2,19080

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18d34314 	ori	r3,r3,19724

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00237a40 	call	237a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	00238240 	call	23824 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <alt_after_alt_main>

0002005c <checksum>:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
*******************************************************************************/
unsigned  int checksum(unsigned char* buf, unsigned  int len, unsigned char type)
{
   2005c:	defffb04 	addi	sp,sp,-20
   20060:	df000415 	stw	fp,16(sp)
   20064:	df000404 	addi	fp,sp,16
   20068:	e13ffd15 	stw	r4,-12(fp)
   2006c:	e17ffe15 	stw	r5,-8(fp)
   20070:	3005883a 	mov	r2,r6
   20074:	e0bfff05 	stb	r2,-4(fp)
   // type 0 = ip
   //      1 = udp
   //      2 = tcp
   unsigned long sum = 0;
   20078:	e03ffc15 	stw	zero,-16(fp)

   // if(type == 0) {
   //        // do not add anything
   // }
   if(type == 1) {
   2007c:	e0bfff03 	ldbu	r2,-4(fp)
   20080:	10800058 	cmpnei	r2,r2,1
   20084:	1000081e 	bne	r2,zero,200a8 <checksum+0x4c>
      sum += IP_PROTO_UDP_V; // protocol udp
   20088:	e0bffc17 	ldw	r2,-16(fp)
   2008c:	10800444 	addi	r2,r2,17
   20090:	e0bffc15 	stw	r2,-16(fp)
      // the length here is the length of udp (data+header len)
      // =length given to this function - (IP.scr+IP.dst length)
      sum += len - 8; // = real tcp len
   20094:	e0fffe17 	ldw	r3,-8(fp)
   20098:	e0bffc17 	ldw	r2,-16(fp)
   2009c:	1885883a 	add	r2,r3,r2
   200a0:	10bffe04 	addi	r2,r2,-8
   200a4:	e0bffc15 	stw	r2,-16(fp)
   }
   if(type == 2) {
   200a8:	e0bfff03 	ldbu	r2,-4(fp)
   200ac:	10800098 	cmpnei	r2,r2,2
   200b0:	10001c1e 	bne	r2,zero,20124 <checksum+0xc8>
      sum += IP_PROTO_TCP_V; 
   200b4:	e0bffc17 	ldw	r2,-16(fp)
   200b8:	10800184 	addi	r2,r2,6
   200bc:	e0bffc15 	stw	r2,-16(fp)
      // the length here is the length of tcp (data+header len)
      // =length given to this function - (IP.scr+IP.dst length)
      sum += len - 8; // = real tcp len
   200c0:	e0fffe17 	ldw	r3,-8(fp)
   200c4:	e0bffc17 	ldw	r2,-16(fp)
   200c8:	1885883a 	add	r2,r3,r2
   200cc:	10bffe04 	addi	r2,r2,-8
   200d0:	e0bffc15 	stw	r2,-16(fp)
   }
   // build the sum of 16bit words
   while(len > 1) {
   200d4:	00001306 	br	20124 <checksum+0xc8>
      sum += 0xFFFF & (*buf << 8 | *(buf + 1));
   200d8:	e0bffd17 	ldw	r2,-12(fp)
   200dc:	10800003 	ldbu	r2,0(r2)
   200e0:	10803fcc 	andi	r2,r2,255
   200e4:	1006923a 	slli	r3,r2,8
   200e8:	e0bffd17 	ldw	r2,-12(fp)
   200ec:	10800044 	addi	r2,r2,1
   200f0:	10800003 	ldbu	r2,0(r2)
   200f4:	10803fcc 	andi	r2,r2,255
   200f8:	1884b03a 	or	r2,r3,r2
   200fc:	10bfffcc 	andi	r2,r2,65535
   20100:	e0fffc17 	ldw	r3,-16(fp)
   20104:	1885883a 	add	r2,r3,r2
   20108:	e0bffc15 	stw	r2,-16(fp)
      buf += 2;
   2010c:	e0bffd17 	ldw	r2,-12(fp)
   20110:	10800084 	addi	r2,r2,2
   20114:	e0bffd15 	stw	r2,-12(fp)
      len -= 2;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   2011c:	10bfff84 	addi	r2,r2,-2
   20120:	e0bffe15 	stw	r2,-8(fp)
      // the length here is the length of tcp (data+header len)
      // =length given to this function - (IP.scr+IP.dst length)
      sum += len - 8; // = real tcp len
   }
   // build the sum of 16bit words
   while(len > 1) {
   20124:	e0bffe17 	ldw	r2,-8(fp)
   20128:	108000a8 	cmpgeui	r2,r2,2
   2012c:	103fea1e 	bne	r2,zero,200d8 <checksum+0x7c>
      sum += 0xFFFF & (*buf << 8 | *(buf + 1));
      buf += 2;
      len -= 2;
   }
   // if there is a byte left then add it (padded with zero)
   if(len) {
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	10000f26 	beq	r2,zero,20174 <checksum+0x118>
      sum += (0xFF & *buf) << 8;
   20138:	e0bffd17 	ldw	r2,-12(fp)
   2013c:	10800003 	ldbu	r2,0(r2)
   20140:	10803fcc 	andi	r2,r2,255
   20144:	1004923a 	slli	r2,r2,8
   20148:	e0fffc17 	ldw	r3,-16(fp)
   2014c:	1885883a 	add	r2,r3,r2
   20150:	e0bffc15 	stw	r2,-16(fp)
   }
   // now calculate the sum over the bytes in the sum
   // until the result is only 16bit long
   while(sum >> 16) {
   20154:	00000706 	br	20174 <checksum+0x118>
      sum = (sum & 0xFFFF) + (sum >> 16);
   20158:	e0bffc17 	ldw	r2,-16(fp)
   2015c:	10ffffcc 	andi	r3,r2,65535
   20160:	e0bffc17 	ldw	r2,-16(fp)
   20164:	1004d43a 	srli	r2,r2,16
   20168:	1885883a 	add	r2,r3,r2
   2016c:	e0bffc15 	stw	r2,-16(fp)
   20170:	00000106 	br	20178 <checksum+0x11c>
   if(len) {
      sum += (0xFF & *buf) << 8;
   }
   // now calculate the sum over the bytes in the sum
   // until the result is only 16bit long
   while(sum >> 16) {
   20174:	0001883a 	nop
   20178:	e0bffc17 	ldw	r2,-16(fp)
   2017c:	1004d43a 	srli	r2,r2,16
   20180:	103ff51e 	bne	r2,zero,20158 <checksum+0xfc>
      sum = (sum & 0xFFFF) + (sum >> 16);
   }
   // build 1's complement:
   return((unsigned  int) sum ^ 0xFFFF);
   20184:	e0bffc17 	ldw	r2,-16(fp)
   20188:	10bfffdc 	xori	r2,r2,65535
}
   2018c:	e037883a 	mov	sp,fp
   20190:	df000017 	ldw	fp,0(sp)
   20194:	dec00104 	addi	sp,sp,4
   20198:	f800283a 	ret

0002019c <init_ip_arp_udp_tcp>:

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(unsigned char* mymac, unsigned char* myip, unsigned char wwwp)
{
   2019c:	defffb04 	addi	sp,sp,-20
   201a0:	df000415 	stw	fp,16(sp)
   201a4:	df000404 	addi	fp,sp,16
   201a8:	e13ffd15 	stw	r4,-12(fp)
   201ac:	e17ffe15 	stw	r5,-8(fp)
   201b0:	3005883a 	mov	r2,r6
   201b4:	e0bfff05 	stb	r2,-4(fp)
   unsigned char i = 0;
   201b8:	e03ffc05 	stb	zero,-16(fp)
   wwwport = wwwp;
   201bc:	e0bfff03 	ldbu	r2,-4(fp)
   201c0:	d0a00005 	stb	r2,-32768(gp)
   while(i < 4) {
   201c4:	00000b06 	br	201f4 <init_ip_arp_udp_tcp+0x58>
      ipaddr[i] = myip[i];
   201c8:	e13ffc03 	ldbu	r4,-16(fp)
   201cc:	e0bffc03 	ldbu	r2,-16(fp)
   201d0:	e0fffe17 	ldw	r3,-8(fp)
   201d4:	1885883a 	add	r2,r3,r2
   201d8:	10c00003 	ldbu	r3,0(r2)
   201dc:	d0a08e84 	addi	r2,gp,-32198
   201e0:	2085883a 	add	r2,r4,r2
   201e4:	10c00005 	stb	r3,0(r2)
      i++;
   201e8:	e0bffc03 	ldbu	r2,-16(fp)
   201ec:	10800044 	addi	r2,r2,1
   201f0:	e0bffc05 	stb	r2,-16(fp)
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(unsigned char* mymac, unsigned char* myip, unsigned char wwwp)
{
   unsigned char i = 0;
   wwwport = wwwp;
   while(i < 4) {
   201f4:	e0bffc03 	ldbu	r2,-16(fp)
   201f8:	10800130 	cmpltui	r2,r2,4
   201fc:	103ff21e 	bne	r2,zero,201c8 <init_ip_arp_udp_tcp+0x2c>
      ipaddr[i] = myip[i];
      i++;
   }
   i = 0;
   20200:	e03ffc05 	stb	zero,-16(fp)
   while(i < 6) {
   20204:	00000b06 	br	20234 <init_ip_arp_udp_tcp+0x98>
      macaddr[i] = mymac[i];
   20208:	e13ffc03 	ldbu	r4,-16(fp)
   2020c:	e0bffc03 	ldbu	r2,-16(fp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	1885883a 	add	r2,r3,r2
   20218:	10c00003 	ldbu	r3,0(r2)
   2021c:	d0a08d04 	addi	r2,gp,-32204
   20220:	2085883a 	add	r2,r4,r2
   20224:	10c00005 	stb	r3,0(r2)
      i++;
   20228:	e0bffc03 	ldbu	r2,-16(fp)
   2022c:	10800044 	addi	r2,r2,1
   20230:	e0bffc05 	stb	r2,-16(fp)
   while(i < 4) {
      ipaddr[i] = myip[i];
      i++;
   }
   i = 0;
   while(i < 6) {
   20234:	e0bffc03 	ldbu	r2,-16(fp)
   20238:	108001b0 	cmpltui	r2,r2,6
   2023c:	103ff21e 	bne	r2,zero,20208 <init_ip_arp_udp_tcp+0x6c>
      macaddr[i] = mymac[i];
      i++;
   }
}
   20240:	e037883a 	mov	sp,fp
   20244:	df000017 	ldw	fp,0(sp)
   20248:	dec00104 	addi	sp,sp,4
   2024c:	f800283a 	ret

00020250 <eth_type_is_arp_and_my_ip>:

unsigned char eth_type_is_arp_and_my_ip(unsigned char* buf, unsigned  int len)
{
   20250:	defffc04 	addi	sp,sp,-16
   20254:	df000315 	stw	fp,12(sp)
   20258:	df000304 	addi	fp,sp,12
   2025c:	e13ffe15 	stw	r4,-8(fp)
   20260:	e17fff15 	stw	r5,-4(fp)
   unsigned char i = 0;
   20264:	e03ffd05 	stb	zero,-12(fp)
   //  
   if(len < 41) {
   20268:	e0bfff17 	ldw	r2,-4(fp)
   2026c:	10800a68 	cmpgeui	r2,r2,41
   20270:	1000021e 	bne	r2,zero,2027c <eth_type_is_arp_and_my_ip+0x2c>
      return(0);
   20274:	0005883a 	mov	r2,zero
   20278:	00002306 	br	20308 <eth_type_is_arp_and_my_ip+0xb8>
   }
   if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V ||
   2027c:	e0bffe17 	ldw	r2,-8(fp)
   20280:	10800304 	addi	r2,r2,12
   20284:	10800003 	ldbu	r2,0(r2)
   20288:	10803fcc 	andi	r2,r2,255
   2028c:	10800218 	cmpnei	r2,r2,8
   20290:	1000061e 	bne	r2,zero,202ac <eth_type_is_arp_and_my_ip+0x5c>
      buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V) {
   20294:	e0bffe17 	ldw	r2,-8(fp)
   20298:	10800344 	addi	r2,r2,13
   2029c:	10800003 	ldbu	r2,0(r2)
   unsigned char i = 0;
   //  
   if(len < 41) {
      return(0);
   }
   if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V ||
   202a0:	10803fcc 	andi	r2,r2,255
   202a4:	108001a0 	cmpeqi	r2,r2,6
   202a8:	1000131e 	bne	r2,zero,202f8 <eth_type_is_arp_and_my_ip+0xa8>
      buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V) {
        return(0);
   202ac:	0005883a 	mov	r2,zero
   202b0:	00001506 	br	20308 <eth_type_is_arp_and_my_ip+0xb8>
   }
   while (i < 4) {
      if (buf[ETH_ARP_DST_IP_P + i] != ipaddr[i]) {
   202b4:	e0bffd03 	ldbu	r2,-12(fp)
   202b8:	10800984 	addi	r2,r2,38
   202bc:	e0fffe17 	ldw	r3,-8(fp)
   202c0:	1885883a 	add	r2,r3,r2
   202c4:	10c00003 	ldbu	r3,0(r2)
   202c8:	e13ffd03 	ldbu	r4,-12(fp)
   202cc:	d0a08e84 	addi	r2,gp,-32198
   202d0:	2085883a 	add	r2,r4,r2
   202d4:	10800003 	ldbu	r2,0(r2)
   202d8:	18c03fcc 	andi	r3,r3,255
   202dc:	10803fcc 	andi	r2,r2,255
   202e0:	18800226 	beq	r3,r2,202ec <eth_type_is_arp_and_my_ip+0x9c>
         return(0);
   202e4:	0005883a 	mov	r2,zero
   202e8:	00000706 	br	20308 <eth_type_is_arp_and_my_ip+0xb8>
      }
      i++;
   202ec:	e0bffd03 	ldbu	r2,-12(fp)
   202f0:	10800044 	addi	r2,r2,1
   202f4:	e0bffd05 	stb	r2,-12(fp)
   }
   if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V ||
      buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V) {
        return(0);
   }
   while (i < 4) {
   202f8:	e0bffd03 	ldbu	r2,-12(fp)
   202fc:	10800130 	cmpltui	r2,r2,4
   20300:	103fec1e 	bne	r2,zero,202b4 <eth_type_is_arp_and_my_ip+0x64>
      if (buf[ETH_ARP_DST_IP_P + i] != ipaddr[i]) {
         return(0);
      }
      i++;
   }
   return(1);
   20304:	00800044 	movi	r2,1
}
   20308:	e037883a 	mov	sp,fp
   2030c:	df000017 	ldw	fp,0(sp)
   20310:	dec00104 	addi	sp,sp,4
   20314:	f800283a 	ret

00020318 <eth_type_is_ip_and_my_ip>:

unsigned char eth_type_is_ip_and_my_ip(unsigned char* buf, unsigned  int len)
{
   20318:	defffc04 	addi	sp,sp,-16
   2031c:	df000315 	stw	fp,12(sp)
   20320:	df000304 	addi	fp,sp,12
   20324:	e13ffe15 	stw	r4,-8(fp)
   20328:	e17fff15 	stw	r5,-4(fp)
   unsigned char i = 0;
   2032c:	e03ffd05 	stb	zero,-12(fp)
   //eth+ip+udp header is 42
   if(len < 42) {
   20330:	e0bfff17 	ldw	r2,-4(fp)
   20334:	10800aa8 	cmpgeui	r2,r2,42
   20338:	1000021e 	bne	r2,zero,20344 <eth_type_is_ip_and_my_ip+0x2c>
      return(0);
   2033c:	0005883a 	mov	r2,zero
   20340:	00002a06 	br	203ec <eth_type_is_ip_and_my_ip+0xd4>
   }
   if(buf[ETH_TYPE_H_P] != ETHTYPE_IP_H_V ||
   20344:	e0bffe17 	ldw	r2,-8(fp)
   20348:	10800304 	addi	r2,r2,12
   2034c:	10800003 	ldbu	r2,0(r2)
   20350:	10803fcc 	andi	r2,r2,255
   20354:	10800218 	cmpnei	r2,r2,8
   20358:	1000051e 	bne	r2,zero,20370 <eth_type_is_ip_and_my_ip+0x58>
      buf[ETH_TYPE_L_P] != ETHTYPE_IP_L_V) {
   2035c:	e0bffe17 	ldw	r2,-8(fp)
   20360:	10800344 	addi	r2,r2,13
   20364:	10800003 	ldbu	r2,0(r2)
   unsigned char i = 0;
   //eth+ip+udp header is 42
   if(len < 42) {
      return(0);
   }
   if(buf[ETH_TYPE_H_P] != ETHTYPE_IP_H_V ||
   20368:	10803fcc 	andi	r2,r2,255
   2036c:	10000226 	beq	r2,zero,20378 <eth_type_is_ip_and_my_ip+0x60>
      buf[ETH_TYPE_L_P] != ETHTYPE_IP_L_V) {
        return(0);
   20370:	0005883a 	mov	r2,zero
   20374:	00001d06 	br	203ec <eth_type_is_ip_and_my_ip+0xd4>
   }
   if(buf[IP_HEADER_LEN_VER_P] != 0x45) {
   20378:	e0bffe17 	ldw	r2,-8(fp)
   2037c:	10800384 	addi	r2,r2,14
   20380:	10800003 	ldbu	r2,0(r2)
   20384:	10803fcc 	andi	r2,r2,255
   20388:	10801160 	cmpeqi	r2,r2,69
   2038c:	1000131e 	bne	r2,zero,203dc <eth_type_is_ip_and_my_ip+0xc4>
      // must be IP V4 and 20 byte header
      return(0);
   20390:	0005883a 	mov	r2,zero
   20394:	00001506 	br	203ec <eth_type_is_ip_and_my_ip+0xd4>
   }
   while (i < 4) {
      if(buf[IP_DST_P + i] != ipaddr[i]) {
   20398:	e0bffd03 	ldbu	r2,-12(fp)
   2039c:	10800784 	addi	r2,r2,30
   203a0:	e0fffe17 	ldw	r3,-8(fp)
   203a4:	1885883a 	add	r2,r3,r2
   203a8:	10c00003 	ldbu	r3,0(r2)
   203ac:	e13ffd03 	ldbu	r4,-12(fp)
   203b0:	d0a08e84 	addi	r2,gp,-32198
   203b4:	2085883a 	add	r2,r4,r2
   203b8:	10800003 	ldbu	r2,0(r2)
   203bc:	18c03fcc 	andi	r3,r3,255
   203c0:	10803fcc 	andi	r2,r2,255
   203c4:	18800226 	beq	r3,r2,203d0 <eth_type_is_ip_and_my_ip+0xb8>
         return(0);
   203c8:	0005883a 	mov	r2,zero
   203cc:	00000706 	br	203ec <eth_type_is_ip_and_my_ip+0xd4>
      }
      i++;
   203d0:	e0bffd03 	ldbu	r2,-12(fp)
   203d4:	10800044 	addi	r2,r2,1
   203d8:	e0bffd05 	stb	r2,-12(fp)
   }
   if(buf[IP_HEADER_LEN_VER_P] != 0x45) {
      // must be IP V4 and 20 byte header
      return(0);
   }
   while (i < 4) {
   203dc:	e0bffd03 	ldbu	r2,-12(fp)
   203e0:	10800130 	cmpltui	r2,r2,4
   203e4:	103fec1e 	bne	r2,zero,20398 <eth_type_is_ip_and_my_ip+0x80>
      if(buf[IP_DST_P + i] != ipaddr[i]) {
         return(0);
      }
      i++;
   }
   return(1);
   203e8:	00800044 	movi	r2,1
}
   203ec:	e037883a 	mov	sp,fp
   203f0:	df000017 	ldw	fp,0(sp)
   203f4:	dec00104 	addi	sp,sp,4
   203f8:	f800283a 	ret

000203fc <make_eth>:
// make a return eth header from a received eth packet
void make_eth(unsigned char* buf)
{
   203fc:	defffd04 	addi	sp,sp,-12
   20400:	df000215 	stw	fp,8(sp)
   20404:	df000204 	addi	fp,sp,8
   20408:	e13fff15 	stw	r4,-4(fp)
   unsigned char i = 0;
   2040c:	e03ffe05 	stb	zero,-8(fp)
   //copy the destination mac from the source and fill my mac into src
   while(i < 6) {
   20410:	00001506 	br	20468 <make_eth+0x6c>
      buf[ETH_DST_MAC + i] = buf[ETH_SRC_MAC + i];
   20414:	e0bffe03 	ldbu	r2,-8(fp)
   20418:	e0ffff17 	ldw	r3,-4(fp)
   2041c:	1885883a 	add	r2,r3,r2
   20420:	e0fffe03 	ldbu	r3,-8(fp)
   20424:	18c00184 	addi	r3,r3,6
   20428:	e13fff17 	ldw	r4,-4(fp)
   2042c:	20c7883a 	add	r3,r4,r3
   20430:	18c00003 	ldbu	r3,0(r3)
   20434:	10c00005 	stb	r3,0(r2)
      buf[ETH_SRC_MAC + i] = macaddr[i];
   20438:	e0bffe03 	ldbu	r2,-8(fp)
   2043c:	10800184 	addi	r2,r2,6
   20440:	e0ffff17 	ldw	r3,-4(fp)
   20444:	1885883a 	add	r2,r3,r2
   20448:	e13ffe03 	ldbu	r4,-8(fp)
   2044c:	d0e08d04 	addi	r3,gp,-32204
   20450:	20c7883a 	add	r3,r4,r3
   20454:	18c00003 	ldbu	r3,0(r3)
   20458:	10c00005 	stb	r3,0(r2)
      i++;
   2045c:	e0bffe03 	ldbu	r2,-8(fp)
   20460:	10800044 	addi	r2,r2,1
   20464:	e0bffe05 	stb	r2,-8(fp)
// make a return eth header from a received eth packet
void make_eth(unsigned char* buf)
{
   unsigned char i = 0;
   //copy the destination mac from the source and fill my mac into src
   while(i < 6) {
   20468:	e0bffe03 	ldbu	r2,-8(fp)
   2046c:	108001b0 	cmpltui	r2,r2,6
   20470:	103fe81e 	bne	r2,zero,20414 <make_eth+0x18>
      buf[ETH_DST_MAC + i] = buf[ETH_SRC_MAC + i];
      buf[ETH_SRC_MAC + i] = macaddr[i];
      i++;
   }
}
   20474:	e037883a 	mov	sp,fp
   20478:	df000017 	ldw	fp,0(sp)
   2047c:	dec00104 	addi	sp,sp,4
   20480:	f800283a 	ret

00020484 <fill_ip_hdr_checksum>:
void fill_ip_hdr_checksum(unsigned char* buf)
{
   20484:	defffc04 	addi	sp,sp,-16
   20488:	dfc00315 	stw	ra,12(sp)
   2048c:	df000215 	stw	fp,8(sp)
   20490:	df000204 	addi	fp,sp,8
   20494:	e13fff15 	stw	r4,-4(fp)
   unsigned  int ck;
   // clear the 2 byte checksum
   buf[IP_CHECKSUM_P] = 0;
   20498:	e0bfff17 	ldw	r2,-4(fp)
   2049c:	10800604 	addi	r2,r2,24
   204a0:	10000005 	stb	zero,0(r2)
   buf[IP_CHECKSUM_P + 1] = 0;
   204a4:	e0bfff17 	ldw	r2,-4(fp)
   204a8:	10800644 	addi	r2,r2,25
   204ac:	10000005 	stb	zero,0(r2)
   buf[IP_FLAGS_P] = 0x40; // don't fragment
   204b0:	e0bfff17 	ldw	r2,-4(fp)
   204b4:	10800504 	addi	r2,r2,20
   204b8:	00c01004 	movi	r3,64
   204bc:	10c00005 	stb	r3,0(r2)
   buf[IP_FLAGS_P + 1] = 0;  // fragement offset
   204c0:	e0bfff17 	ldw	r2,-4(fp)
   204c4:	10800544 	addi	r2,r2,21
   204c8:	10000005 	stb	zero,0(r2)
   buf[IP_TTL_P] = 64; // ttl
   204cc:	e0bfff17 	ldw	r2,-4(fp)
   204d0:	10800584 	addi	r2,r2,22
   204d4:	00c01004 	movi	r3,64
   204d8:	10c00005 	stb	r3,0(r2)
   // calculate the checksum:
   ck = checksum(&buf[IP_P], IP_HEADER_LEN, 0);
   204dc:	e0bfff17 	ldw	r2,-4(fp)
   204e0:	10800384 	addi	r2,r2,14
   204e4:	1009883a 	mov	r4,r2
   204e8:	01400504 	movi	r5,20
   204ec:	000d883a 	mov	r6,zero
   204f0:	002005c0 	call	2005c <checksum>
   204f4:	e0bffe15 	stw	r2,-8(fp)
   buf[IP_CHECKSUM_P] = ck >> 8;
   204f8:	e0bfff17 	ldw	r2,-4(fp)
   204fc:	10800604 	addi	r2,r2,24
   20500:	e0fffe17 	ldw	r3,-8(fp)
   20504:	1806d23a 	srli	r3,r3,8
   20508:	10c00005 	stb	r3,0(r2)
   buf[IP_CHECKSUM_P + 1] = ck & 0xff;
   2050c:	e0bfff17 	ldw	r2,-4(fp)
   20510:	10800644 	addi	r2,r2,25
   20514:	e0fffe17 	ldw	r3,-8(fp)
   20518:	10c00005 	stb	r3,0(r2)
}
   2051c:	e037883a 	mov	sp,fp
   20520:	dfc00117 	ldw	ra,4(sp)
   20524:	df000017 	ldw	fp,0(sp)
   20528:	dec00204 	addi	sp,sp,8
   2052c:	f800283a 	ret

00020530 <make_ip>:

// make a return ip header from a received ip packet
void make_ip(unsigned char* buf)
{
   20530:	defffc04 	addi	sp,sp,-16
   20534:	dfc00315 	stw	ra,12(sp)
   20538:	df000215 	stw	fp,8(sp)
   2053c:	df000204 	addi	fp,sp,8
   20540:	e13fff15 	stw	r4,-4(fp)
   unsigned char i = 0;
   20544:	e03ffe05 	stb	zero,-8(fp)
   while (i < 4) {
   20548:	00001606 	br	205a4 <make_ip+0x74>
      buf[IP_DST_P + i] = buf[IP_SRC_P + i];
   2054c:	e0bffe03 	ldbu	r2,-8(fp)
   20550:	10800784 	addi	r2,r2,30
   20554:	e0ffff17 	ldw	r3,-4(fp)
   20558:	1885883a 	add	r2,r3,r2
   2055c:	e0fffe03 	ldbu	r3,-8(fp)
   20560:	18c00684 	addi	r3,r3,26
   20564:	e13fff17 	ldw	r4,-4(fp)
   20568:	20c7883a 	add	r3,r4,r3
   2056c:	18c00003 	ldbu	r3,0(r3)
   20570:	10c00005 	stb	r3,0(r2)
      buf[IP_SRC_P + i] = ipaddr[i];
   20574:	e0bffe03 	ldbu	r2,-8(fp)
   20578:	10800684 	addi	r2,r2,26
   2057c:	e0ffff17 	ldw	r3,-4(fp)
   20580:	1885883a 	add	r2,r3,r2
   20584:	e13ffe03 	ldbu	r4,-8(fp)
   20588:	d0e08e84 	addi	r3,gp,-32198
   2058c:	20c7883a 	add	r3,r4,r3
   20590:	18c00003 	ldbu	r3,0(r3)
   20594:	10c00005 	stb	r3,0(r2)
      i++;
   20598:	e0bffe03 	ldbu	r2,-8(fp)
   2059c:	10800044 	addi	r2,r2,1
   205a0:	e0bffe05 	stb	r2,-8(fp)

// make a return ip header from a received ip packet
void make_ip(unsigned char* buf)
{
   unsigned char i = 0;
   while (i < 4) {
   205a4:	e0bffe03 	ldbu	r2,-8(fp)
   205a8:	10800130 	cmpltui	r2,r2,4
   205ac:	103fe71e 	bne	r2,zero,2054c <make_ip+0x1c>
      buf[IP_DST_P + i] = buf[IP_SRC_P + i];
      buf[IP_SRC_P + i] = ipaddr[i];
      i++;
   }
   fill_ip_hdr_checksum(buf);
   205b0:	e13fff17 	ldw	r4,-4(fp)
   205b4:	00204840 	call	20484 <fill_ip_hdr_checksum>
}
   205b8:	e037883a 	mov	sp,fp
   205bc:	dfc00117 	ldw	ra,4(sp)
   205c0:	df000017 	ldw	fp,0(sp)
   205c4:	dec00204 	addi	sp,sp,8
   205c8:	f800283a 	ret

000205cc <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(unsigned char* buf, unsigned  int rel_ack_num, unsigned char mss, unsigned char cp_seq)
{
   205cc:	defffa04 	addi	sp,sp,-24
   205d0:	df000515 	stw	fp,20(sp)
   205d4:	df000504 	addi	fp,sp,20
   205d8:	e13ffc15 	stw	r4,-16(fp)
   205dc:	e17ffd15 	stw	r5,-12(fp)
   205e0:	3007883a 	mov	r3,r6
   205e4:	3805883a 	mov	r2,r7
   205e8:	e0fffe05 	stb	r3,-8(fp)
   205ec:	e0bfff05 	stb	r2,-4(fp)
   unsigned char i = 0;
   205f0:	e03ffb05 	stb	zero,-20(fp)
   unsigned char tseq;
   while (i < 2) {
   205f4:	00001206 	br	20640 <make_tcphead+0x74>
      buf[TCP_DST_PORT_H_P + i] = buf[TCP_SRC_PORT_H_P + i];
   205f8:	e0bffb03 	ldbu	r2,-20(fp)
   205fc:	10800904 	addi	r2,r2,36
   20600:	e0fffc17 	ldw	r3,-16(fp)
   20604:	1885883a 	add	r2,r3,r2
   20608:	e0fffb03 	ldbu	r3,-20(fp)
   2060c:	18c00884 	addi	r3,r3,34
   20610:	e13ffc17 	ldw	r4,-16(fp)
   20614:	20c7883a 	add	r3,r4,r3
   20618:	18c00003 	ldbu	r3,0(r3)
   2061c:	10c00005 	stb	r3,0(r2)
      buf[TCP_SRC_PORT_H_P + i] = 0; // clear source port
   20620:	e0bffb03 	ldbu	r2,-20(fp)
   20624:	10800884 	addi	r2,r2,34
   20628:	e0fffc17 	ldw	r3,-16(fp)
   2062c:	1885883a 	add	r2,r3,r2
   20630:	10000005 	stb	zero,0(r2)
      i++;
   20634:	e0bffb03 	ldbu	r2,-20(fp)
   20638:	10800044 	addi	r2,r2,1
   2063c:	e0bffb05 	stb	r2,-20(fp)
// otherwise it is copied from the packet we received
void make_tcphead(unsigned char* buf, unsigned  int rel_ack_num, unsigned char mss, unsigned char cp_seq)
{
   unsigned char i = 0;
   unsigned char tseq;
   while (i < 2) {
   20640:	e0bffb03 	ldbu	r2,-20(fp)
   20644:	108000b0 	cmpltui	r2,r2,2
   20648:	103feb1e 	bne	r2,zero,205f8 <make_tcphead+0x2c>
      buf[TCP_DST_PORT_H_P + i] = buf[TCP_SRC_PORT_H_P + i];
      buf[TCP_SRC_PORT_H_P + i] = 0; // clear source port
      i++;
   }
   // set source port  (http):
   buf[TCP_SRC_PORT_L_P] = wwwport;
   2064c:	e0bffc17 	ldw	r2,-16(fp)
   20650:	108008c4 	addi	r2,r2,35
   20654:	d0e00003 	ldbu	r3,-32768(gp)
   20658:	10c00005 	stb	r3,0(r2)
   i = 4;
   2065c:	00800104 	movi	r2,4
   20660:	e0bffb05 	stb	r2,-20(fp)
   // sequence numbers:
   // add the rel ack num to SEQACK
   while(i > 0) {
   20664:	00002906 	br	2070c <make_tcphead+0x140>
      rel_ack_num = buf[TCP_SEQ_H_P + i - 1] + rel_ack_num;
   20668:	e0bffb03 	ldbu	r2,-20(fp)
   2066c:	10800944 	addi	r2,r2,37
   20670:	e0fffc17 	ldw	r3,-16(fp)
   20674:	1885883a 	add	r2,r3,r2
   20678:	10800003 	ldbu	r2,0(r2)
   2067c:	10803fcc 	andi	r2,r2,255
   20680:	e0fffd17 	ldw	r3,-12(fp)
   20684:	1885883a 	add	r2,r3,r2
   20688:	e0bffd15 	stw	r2,-12(fp)
      tseq = buf[TCP_SEQACK_H_P + i - 1];
   2068c:	e0bffb03 	ldbu	r2,-20(fp)
   20690:	10800a44 	addi	r2,r2,41
   20694:	e0fffc17 	ldw	r3,-16(fp)
   20698:	1885883a 	add	r2,r3,r2
   2069c:	10800003 	ldbu	r2,0(r2)
   206a0:	e0bffb45 	stb	r2,-19(fp)
      buf[TCP_SEQACK_H_P + i - 1] = 0xff & rel_ack_num;
   206a4:	e0bffb03 	ldbu	r2,-20(fp)
   206a8:	10800a44 	addi	r2,r2,41
   206ac:	e0fffc17 	ldw	r3,-16(fp)
   206b0:	1885883a 	add	r2,r3,r2
   206b4:	e0fffd17 	ldw	r3,-12(fp)
   206b8:	10c00005 	stb	r3,0(r2)
      if (cp_seq) {
   206bc:	e0bfff03 	ldbu	r2,-4(fp)
   206c0:	10000726 	beq	r2,zero,206e0 <make_tcphead+0x114>
         // copy the acknum sent to us into the sequence number
         buf[TCP_SEQ_H_P + i - 1] = tseq;
   206c4:	e0bffb03 	ldbu	r2,-20(fp)
   206c8:	10800944 	addi	r2,r2,37
   206cc:	e0fffc17 	ldw	r3,-16(fp)
   206d0:	1885883a 	add	r2,r3,r2
   206d4:	e0fffb43 	ldbu	r3,-19(fp)
   206d8:	10c00005 	stb	r3,0(r2)
   206dc:	00000506 	br	206f4 <make_tcphead+0x128>
      }
      else {
         buf[TCP_SEQ_H_P + i - 1] = 0; // some preset vallue
   206e0:	e0bffb03 	ldbu	r2,-20(fp)
   206e4:	10800944 	addi	r2,r2,37
   206e8:	e0fffc17 	ldw	r3,-16(fp)
   206ec:	1885883a 	add	r2,r3,r2
   206f0:	10000005 	stb	zero,0(r2)
      }
      rel_ack_num = rel_ack_num >> 8;
   206f4:	e0bffd17 	ldw	r2,-12(fp)
   206f8:	1004d23a 	srli	r2,r2,8
   206fc:	e0bffd15 	stw	r2,-12(fp)
      i--;
   20700:	e0bffb03 	ldbu	r2,-20(fp)
   20704:	10bfffc4 	addi	r2,r2,-1
   20708:	e0bffb05 	stb	r2,-20(fp)
   // set source port  (http):
   buf[TCP_SRC_PORT_L_P] = wwwport;
   i = 4;
   // sequence numbers:
   // add the rel ack num to SEQACK
   while(i > 0) {
   2070c:	e0bffb03 	ldbu	r2,-20(fp)
   20710:	103fd51e 	bne	r2,zero,20668 <make_tcphead+0x9c>
         buf[TCP_SEQ_H_P + i - 1] = 0; // some preset vallue
      }
      rel_ack_num = rel_ack_num >> 8;
      i--;
   }
   if (cp_seq == 0) {
   20714:	e0bfff03 	ldbu	r2,-4(fp)
   20718:	1000101e 	bne	r2,zero,2075c <make_tcphead+0x190>
      // put inital seq number
      buf[TCP_SEQ_H_P + 0] = 0;
   2071c:	e0bffc17 	ldw	r2,-16(fp)
   20720:	10800984 	addi	r2,r2,38
   20724:	10000005 	stb	zero,0(r2)
      buf[TCP_SEQ_H_P + 1] = 0;
   20728:	e0bffc17 	ldw	r2,-16(fp)
   2072c:	108009c4 	addi	r2,r2,39
   20730:	10000005 	stb	zero,0(r2)
      // we step only the second byte, this allows us to send packts 
      // with 255 bytes or 512 (if we step the initial seqnum by 2)
      buf[TCP_SEQ_H_P + 2] = seqnum; 
   20734:	e0bffc17 	ldw	r2,-16(fp)
   20738:	10800a04 	addi	r2,r2,40
   2073c:	d0e00043 	ldbu	r3,-32767(gp)
   20740:	10c00005 	stb	r3,0(r2)
      buf[TCP_SEQ_H_P + 3] = 0;
   20744:	e0bffc17 	ldw	r2,-16(fp)
   20748:	10800a44 	addi	r2,r2,41
   2074c:	10000005 	stb	zero,0(r2)
      // step the inititial seq num by something we will not use
      // during this tcp session:
      seqnum += 2;
   20750:	d0a00043 	ldbu	r2,-32767(gp)
   20754:	10800084 	addi	r2,r2,2
   20758:	d0a00045 	stb	r2,-32767(gp)
   }
   // zero the checksum
   buf[TCP_CHECKSUM_H_P] = 0;
   2075c:	e0bffc17 	ldw	r2,-16(fp)
   20760:	10800c84 	addi	r2,r2,50
   20764:	10000005 	stb	zero,0(r2)
   buf[TCP_CHECKSUM_L_P] = 0;
   20768:	e0bffc17 	ldw	r2,-16(fp)
   2076c:	10800cc4 	addi	r2,r2,51
   20770:	10000005 	stb	zero,0(r2)

   // The tcp header length is only a 4 bit field (the upper 4 bits).
   // It is calculated in units of 4 bytes. 
   // E.g 24 bytes: 24/4=6 => 0x60=header len field
   //buf[TCP_HEADER_LEN_P]=(((TCP_HEADER_LEN_PLAIN+4)/4)) <<4; // 0x60
   if(mss) {
   20774:	e0bffe03 	ldbu	r2,-8(fp)
   20778:	10001526 	beq	r2,zero,207d0 <make_tcphead+0x204>
      // the only option we set is MSS to 1408:
      // 1408 in hex is 0x580
      buf[TCP_OPTIONS_P] = 2;
   2077c:	e0bffc17 	ldw	r2,-16(fp)
   20780:	10800d84 	addi	r2,r2,54
   20784:	00c00084 	movi	r3,2
   20788:	10c00005 	stb	r3,0(r2)
      buf[TCP_OPTIONS_P + 1] = 4;
   2078c:	e0bffc17 	ldw	r2,-16(fp)
   20790:	10800dc4 	addi	r2,r2,55
   20794:	00c00104 	movi	r3,4
   20798:	10c00005 	stb	r3,0(r2)
      buf[TCP_OPTIONS_P + 2] = 0x05; 
   2079c:	e0bffc17 	ldw	r2,-16(fp)
   207a0:	10800e04 	addi	r2,r2,56
   207a4:	00c00144 	movi	r3,5
   207a8:	10c00005 	stb	r3,0(r2)
      buf[TCP_OPTIONS_P + 3] = 0x80;
   207ac:	e0bffc17 	ldw	r2,-16(fp)
   207b0:	10800e44 	addi	r2,r2,57
   207b4:	00ffe004 	movi	r3,-128
   207b8:	10c00005 	stb	r3,0(r2)
      // 24 bytes:
      buf[TCP_HEADER_LEN_P] = 0x60;
   207bc:	e0bffc17 	ldw	r2,-16(fp)
   207c0:	10800b84 	addi	r2,r2,46
   207c4:	00c01804 	movi	r3,96
   207c8:	10c00005 	stb	r3,0(r2)
   207cc:	00000406 	br	207e0 <make_tcphead+0x214>
   }
   else {
      // no options:
      // 20 bytes:
      buf[TCP_HEADER_LEN_P] = 0x50;
   207d0:	e0bffc17 	ldw	r2,-16(fp)
   207d4:	10800b84 	addi	r2,r2,46
   207d8:	00c01404 	movi	r3,80
   207dc:	10c00005 	stb	r3,0(r2)
   }
}
   207e0:	e037883a 	mov	sp,fp
   207e4:	df000017 	ldw	fp,0(sp)
   207e8:	dec00104 	addi	sp,sp,4
   207ec:	f800283a 	ret

000207f0 <make_arp_answer_from_request>:

void make_arp_answer_from_request(unsigned char* buf)
{
   207f0:	defffc04 	addi	sp,sp,-16
   207f4:	dfc00315 	stw	ra,12(sp)
   207f8:	df000215 	stw	fp,8(sp)
   207fc:	df000204 	addi	fp,sp,8
   20800:	e13fff15 	stw	r4,-4(fp)
   unsigned char i = 0;
   20804:	e03ffe05 	stb	zero,-8(fp)
   //
   make_eth(buf);
   20808:	e13fff17 	ldw	r4,-4(fp)
   2080c:	00203fc0 	call	203fc <make_eth>
   buf[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
   20810:	e0bfff17 	ldw	r2,-4(fp)
   20814:	10800504 	addi	r2,r2,20
   20818:	10000005 	stb	zero,0(r2)
   buf[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
   2081c:	e0bfff17 	ldw	r2,-4(fp)
   20820:	10800544 	addi	r2,r2,21
   20824:	00c00084 	movi	r3,2
   20828:	10c00005 	stb	r3,0(r2)
   // fill the mac addresses:
   while(i < 6) {
   2082c:	00001606 	br	20888 <make_arp_answer_from_request+0x98>
      buf[ETH_ARP_DST_MAC_P + i] = buf[ETH_ARP_SRC_MAC_P + i];
   20830:	e0bffe03 	ldbu	r2,-8(fp)
   20834:	10800804 	addi	r2,r2,32
   20838:	e0ffff17 	ldw	r3,-4(fp)
   2083c:	1885883a 	add	r2,r3,r2
   20840:	e0fffe03 	ldbu	r3,-8(fp)
   20844:	18c00584 	addi	r3,r3,22
   20848:	e13fff17 	ldw	r4,-4(fp)
   2084c:	20c7883a 	add	r3,r4,r3
   20850:	18c00003 	ldbu	r3,0(r3)
   20854:	10c00005 	stb	r3,0(r2)
      buf[ETH_ARP_SRC_MAC_P + i] = macaddr[i];
   20858:	e0bffe03 	ldbu	r2,-8(fp)
   2085c:	10800584 	addi	r2,r2,22
   20860:	e0ffff17 	ldw	r3,-4(fp)
   20864:	1885883a 	add	r2,r3,r2
   20868:	e13ffe03 	ldbu	r4,-8(fp)
   2086c:	d0e08d04 	addi	r3,gp,-32204
   20870:	20c7883a 	add	r3,r4,r3
   20874:	18c00003 	ldbu	r3,0(r3)
   20878:	10c00005 	stb	r3,0(r2)
      i++;
   2087c:	e0bffe03 	ldbu	r2,-8(fp)
   20880:	10800044 	addi	r2,r2,1
   20884:	e0bffe05 	stb	r2,-8(fp)
   //
   make_eth(buf);
   buf[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
   buf[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
   // fill the mac addresses:
   while(i < 6) {
   20888:	e0bffe03 	ldbu	r2,-8(fp)
   2088c:	108001b0 	cmpltui	r2,r2,6
   20890:	103fe71e 	bne	r2,zero,20830 <make_arp_answer_from_request+0x40>
      buf[ETH_ARP_DST_MAC_P + i] = buf[ETH_ARP_SRC_MAC_P + i];
      buf[ETH_ARP_SRC_MAC_P + i] = macaddr[i];
      i++;
   }
   i = 0;
   20894:	e03ffe05 	stb	zero,-8(fp)
   while(i < 4) {
   20898:	00001606 	br	208f4 <make_arp_answer_from_request+0x104>
      buf[ETH_ARP_DST_IP_P + i] = buf[ETH_ARP_SRC_IP_P + i];
   2089c:	e0bffe03 	ldbu	r2,-8(fp)
   208a0:	10800984 	addi	r2,r2,38
   208a4:	e0ffff17 	ldw	r3,-4(fp)
   208a8:	1885883a 	add	r2,r3,r2
   208ac:	e0fffe03 	ldbu	r3,-8(fp)
   208b0:	18c00704 	addi	r3,r3,28
   208b4:	e13fff17 	ldw	r4,-4(fp)
   208b8:	20c7883a 	add	r3,r4,r3
   208bc:	18c00003 	ldbu	r3,0(r3)
   208c0:	10c00005 	stb	r3,0(r2)
      buf[ETH_ARP_SRC_IP_P + i] = ipaddr[i];
   208c4:	e0bffe03 	ldbu	r2,-8(fp)
   208c8:	10800704 	addi	r2,r2,28
   208cc:	e0ffff17 	ldw	r3,-4(fp)
   208d0:	1885883a 	add	r2,r3,r2
   208d4:	e13ffe03 	ldbu	r4,-8(fp)
   208d8:	d0e08e84 	addi	r3,gp,-32198
   208dc:	20c7883a 	add	r3,r4,r3
   208e0:	18c00003 	ldbu	r3,0(r3)
   208e4:	10c00005 	stb	r3,0(r2)
      i++;
   208e8:	e0bffe03 	ldbu	r2,-8(fp)
   208ec:	10800044 	addi	r2,r2,1
   208f0:	e0bffe05 	stb	r2,-8(fp)
      buf[ETH_ARP_DST_MAC_P + i] = buf[ETH_ARP_SRC_MAC_P + i];
      buf[ETH_ARP_SRC_MAC_P + i] = macaddr[i];
      i++;
   }
   i = 0;
   while(i < 4) {
   208f4:	e0bffe03 	ldbu	r2,-8(fp)
   208f8:	10800130 	cmpltui	r2,r2,4
   208fc:	103fe71e 	bne	r2,zero,2089c <make_arp_answer_from_request+0xac>
      buf[ETH_ARP_DST_IP_P + i] = buf[ETH_ARP_SRC_IP_P + i];
      buf[ETH_ARP_SRC_IP_P + i] = ipaddr[i];
      i++;
   }
   // eth+arp is 42 bytes:
   enc28j60PacketSend(42, buf);
   20900:	01000a84 	movi	r4,42
   20904:	e17fff17 	ldw	r5,-4(fp)
   20908:	002182c0 	call	2182c <enc28j60PacketSend>
}
   2090c:	e037883a 	mov	sp,fp
   20910:	dfc00117 	ldw	ra,4(sp)
   20914:	df000017 	ldw	fp,0(sp)
   20918:	dec00204 	addi	sp,sp,8
   2091c:	f800283a 	ret

00020920 <make_echo_reply_from_request>:

void make_echo_reply_from_request(unsigned char* buf, unsigned  int len)
{
   20920:	defffc04 	addi	sp,sp,-16
   20924:	dfc00315 	stw	ra,12(sp)
   20928:	df000215 	stw	fp,8(sp)
   2092c:	df000204 	addi	fp,sp,8
   20930:	e13ffe15 	stw	r4,-8(fp)
   20934:	e17fff15 	stw	r5,-4(fp)
   make_eth(buf);
   20938:	e13ffe17 	ldw	r4,-8(fp)
   2093c:	00203fc0 	call	203fc <make_eth>
   make_ip(buf);
   20940:	e13ffe17 	ldw	r4,-8(fp)
   20944:	00205300 	call	20530 <make_ip>
   buf[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
   20948:	e0bffe17 	ldw	r2,-8(fp)
   2094c:	10800884 	addi	r2,r2,34
   20950:	10000005 	stb	zero,0(r2)
   // we changed only the icmp.type field from request(=8) to reply(=0).
   // we can therefore easily correct the checksum:
   if(buf[ICMP_CHECKSUM_P] > (0xff - 0x08)) {
   20954:	e0bffe17 	ldw	r2,-8(fp)
   20958:	10800904 	addi	r2,r2,36
   2095c:	10800003 	ldbu	r2,0(r2)
   20960:	10803fcc 	andi	r2,r2,255
   20964:	10803e30 	cmpltui	r2,r2,248
   20968:	1000051e 	bne	r2,zero,20980 <make_echo_reply_from_request+0x60>
      buf[ICMP_CHECKSUM_P + 1]++;
   2096c:	e0bffe17 	ldw	r2,-8(fp)
   20970:	10800944 	addi	r2,r2,37
   20974:	10c00003 	ldbu	r3,0(r2)
   20978:	18c00044 	addi	r3,r3,1
   2097c:	10c00005 	stb	r3,0(r2)
   }
   buf[ICMP_CHECKSUM_P] += 0x08;
   20980:	e0bffe17 	ldw	r2,-8(fp)
   20984:	10800904 	addi	r2,r2,36
   20988:	e0fffe17 	ldw	r3,-8(fp)
   2098c:	18c00904 	addi	r3,r3,36
   20990:	18c00003 	ldbu	r3,0(r3)
   20994:	18c00204 	addi	r3,r3,8
   20998:	10c00005 	stb	r3,0(r2)

   enc28j60PacketSend(len, buf);
   2099c:	e13fff17 	ldw	r4,-4(fp)
   209a0:	e17ffe17 	ldw	r5,-8(fp)
   209a4:	002182c0 	call	2182c <enc28j60PacketSend>
}
   209a8:	e037883a 	mov	sp,fp
   209ac:	dfc00117 	ldw	ra,4(sp)
   209b0:	df000017 	ldw	fp,0(sp)
   209b4:	dec00204 	addi	sp,sp,8
   209b8:	f800283a 	ret

000209bc <make_udp_reply_from_request>:

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(unsigned char* buf, char* data, unsigned char datalen, unsigned  int port)
{
   209bc:	defff804 	addi	sp,sp,-32
   209c0:	dfc00715 	stw	ra,28(sp)
   209c4:	df000615 	stw	fp,24(sp)
   209c8:	df000604 	addi	fp,sp,24
   209cc:	e13ffc15 	stw	r4,-16(fp)
   209d0:	e17ffd15 	stw	r5,-12(fp)
   209d4:	3005883a 	mov	r2,r6
   209d8:	e1ffff15 	stw	r7,-4(fp)
   209dc:	e0bffe05 	stb	r2,-8(fp)
   unsigned char i = 0;
   209e0:	e03ffa05 	stb	zero,-24(fp)
   unsigned  int ck;
   make_eth(buf);
   209e4:	e13ffc17 	ldw	r4,-16(fp)
   209e8:	00203fc0 	call	203fc <make_eth>
   if(datalen > 220) {
   209ec:	e0bffe03 	ldbu	r2,-8(fp)
   209f0:	10803770 	cmpltui	r2,r2,221
   209f4:	1000021e 	bne	r2,zero,20a00 <make_udp_reply_from_request+0x44>
      datalen = 220;
   209f8:	00bff704 	movi	r2,-36
   209fc:	e0bffe05 	stb	r2,-8(fp)
   }
   // total length field in the IP header must be set:
   buf[IP_TOTLEN_H_P] = 0;
   20a00:	e0bffc17 	ldw	r2,-16(fp)
   20a04:	10800404 	addi	r2,r2,16
   20a08:	10000005 	stb	zero,0(r2)
   buf[IP_TOTLEN_L_P] = IP_HEADER_LEN + UDP_HEADER_LEN + datalen;
   20a0c:	e0bffc17 	ldw	r2,-16(fp)
   20a10:	10800444 	addi	r2,r2,17
   20a14:	e0fffe03 	ldbu	r3,-8(fp)
   20a18:	18c00704 	addi	r3,r3,28
   20a1c:	10c00005 	stb	r3,0(r2)
   make_ip(buf);
   20a20:	e13ffc17 	ldw	r4,-16(fp)
   20a24:	00205300 	call	20530 <make_ip>
   buf[UDP_DST_PORT_H_P] = port >> 8;
   20a28:	e0bffc17 	ldw	r2,-16(fp)
   20a2c:	10800904 	addi	r2,r2,36
   20a30:	e0ffff17 	ldw	r3,-4(fp)
   20a34:	1806d23a 	srli	r3,r3,8
   20a38:	10c00005 	stb	r3,0(r2)
   buf[UDP_DST_PORT_L_P] = port & 0xff;
   20a3c:	e0bffc17 	ldw	r2,-16(fp)
   20a40:	10800944 	addi	r2,r2,37
   20a44:	e0ffff17 	ldw	r3,-4(fp)
   20a48:	10c00005 	stb	r3,0(r2)
   // source port does not matter and is what the sender used.
   // calculte the udp length:
   buf[UDP_LEN_H_P] = 0;
   20a4c:	e0bffc17 	ldw	r2,-16(fp)
   20a50:	10800984 	addi	r2,r2,38
   20a54:	10000005 	stb	zero,0(r2)
   buf[UDP_LEN_L_P] = UDP_HEADER_LEN + datalen;
   20a58:	e0bffc17 	ldw	r2,-16(fp)
   20a5c:	108009c4 	addi	r2,r2,39
   20a60:	e0fffe03 	ldbu	r3,-8(fp)
   20a64:	18c00204 	addi	r3,r3,8
   20a68:	10c00005 	stb	r3,0(r2)
   // zero the checksum
   buf[UDP_CHECKSUM_H_P] = 0;
   20a6c:	e0bffc17 	ldw	r2,-16(fp)
   20a70:	10800a04 	addi	r2,r2,40
   20a74:	10000005 	stb	zero,0(r2)
   buf[UDP_CHECKSUM_L_P] = 0;
   20a78:	e0bffc17 	ldw	r2,-16(fp)
   20a7c:	10800a44 	addi	r2,r2,41
   20a80:	10000005 	stb	zero,0(r2)
   // copy the data:
   while (i < datalen) {
   20a84:	00000c06 	br	20ab8 <make_udp_reply_from_request+0xfc>
      buf[UDP_DATA_P + i] = data[i];
   20a88:	e0bffa03 	ldbu	r2,-24(fp)
   20a8c:	10800a84 	addi	r2,r2,42
   20a90:	e0fffc17 	ldw	r3,-16(fp)
   20a94:	1885883a 	add	r2,r3,r2
   20a98:	e0fffa03 	ldbu	r3,-24(fp)
   20a9c:	e13ffd17 	ldw	r4,-12(fp)
   20aa0:	20c7883a 	add	r3,r4,r3
   20aa4:	18c00003 	ldbu	r3,0(r3)
   20aa8:	10c00005 	stb	r3,0(r2)
      i++;
   20aac:	e0bffa03 	ldbu	r2,-24(fp)
   20ab0:	10800044 	addi	r2,r2,1
   20ab4:	e0bffa05 	stb	r2,-24(fp)
   buf[UDP_LEN_L_P] = UDP_HEADER_LEN + datalen;
   // zero the checksum
   buf[UDP_CHECKSUM_H_P] = 0;
   buf[UDP_CHECKSUM_L_P] = 0;
   // copy the data:
   while (i < datalen) {
   20ab8:	e0fffa03 	ldbu	r3,-24(fp)
   20abc:	e0bffe03 	ldbu	r2,-8(fp)
   20ac0:	18bff136 	bltu	r3,r2,20a88 <make_udp_reply_from_request+0xcc>
      buf[UDP_DATA_P + i] = data[i];
      i++;
   }
   ck = checksum(&buf[IP_SRC_P], 16 + datalen, 1);
   20ac4:	e0bffc17 	ldw	r2,-16(fp)
   20ac8:	10c00684 	addi	r3,r2,26
   20acc:	e0bffe03 	ldbu	r2,-8(fp)
   20ad0:	10800404 	addi	r2,r2,16
   20ad4:	1809883a 	mov	r4,r3
   20ad8:	100b883a 	mov	r5,r2
   20adc:	01800044 	movi	r6,1
   20ae0:	002005c0 	call	2005c <checksum>
   20ae4:	e0bffb15 	stw	r2,-20(fp)
   buf[UDP_CHECKSUM_H_P] = ck >> 8;
   20ae8:	e0bffc17 	ldw	r2,-16(fp)
   20aec:	10800a04 	addi	r2,r2,40
   20af0:	e0fffb17 	ldw	r3,-20(fp)
   20af4:	1806d23a 	srli	r3,r3,8
   20af8:	10c00005 	stb	r3,0(r2)
   buf[UDP_CHECKSUM_L_P] = ck & 0xff;
   20afc:	e0bffc17 	ldw	r2,-16(fp)
   20b00:	10800a44 	addi	r2,r2,41
   20b04:	e0fffb17 	ldw	r3,-20(fp)
   20b08:	10c00005 	stb	r3,0(r2)
   enc28j60PacketSend(UDP_HEADER_LEN +
   20b0c:	e0bffe03 	ldbu	r2,-8(fp)
   20b10:	10800a84 	addi	r2,r2,42
   20b14:	1009883a 	mov	r4,r2
   20b18:	e17ffc17 	ldw	r5,-16(fp)
   20b1c:	002182c0 	call	2182c <enc28j60PacketSend>
      IP_HEADER_LEN +
      ETH_HEADER_LEN +
      datalen,
      buf);
}
   20b20:	e037883a 	mov	sp,fp
   20b24:	dfc00117 	ldw	ra,4(sp)
   20b28:	df000017 	ldw	fp,0(sp)
   20b2c:	dec00204 	addi	sp,sp,8
   20b30:	f800283a 	ret

00020b34 <make_tcp_synack_from_syn>:

void make_tcp_synack_from_syn(unsigned char* buf)
{
   20b34:	defffc04 	addi	sp,sp,-16
   20b38:	dfc00315 	stw	ra,12(sp)
   20b3c:	df000215 	stw	fp,8(sp)
   20b40:	df000204 	addi	fp,sp,8
   20b44:	e13fff15 	stw	r4,-4(fp)
   unsigned  int ck;
   make_eth(buf);
   20b48:	e13fff17 	ldw	r4,-4(fp)
   20b4c:	00203fc0 	call	203fc <make_eth>
   // total length field in the IP header must be set:
   // 20 bytes IP + 24 bytes (20tcp+4tcp options)
   buf[IP_TOTLEN_H_P] = 0;
   20b50:	e0bfff17 	ldw	r2,-4(fp)
   20b54:	10800404 	addi	r2,r2,16
   20b58:	10000005 	stb	zero,0(r2)
   buf[IP_TOTLEN_L_P] = IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + 4;
   20b5c:	e0bfff17 	ldw	r2,-4(fp)
   20b60:	10800444 	addi	r2,r2,17
   20b64:	00c00b04 	movi	r3,44
   20b68:	10c00005 	stb	r3,0(r2)
   make_ip(buf);
   20b6c:	e13fff17 	ldw	r4,-4(fp)
   20b70:	00205300 	call	20530 <make_ip>
   buf[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
   20b74:	e0bfff17 	ldw	r2,-4(fp)
   20b78:	10800bc4 	addi	r2,r2,47
   20b7c:	00c00484 	movi	r3,18
   20b80:	10c00005 	stb	r3,0(r2)
   make_tcphead(buf, 1, 1, 0);
   20b84:	e13fff17 	ldw	r4,-4(fp)
   20b88:	01400044 	movi	r5,1
   20b8c:	01800044 	movi	r6,1
   20b90:	000f883a 	mov	r7,zero
   20b94:	00205cc0 	call	205cc <make_tcphead>
   // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
   ck = checksum(&buf[IP_SRC_P], 8 + TCP_HEADER_LEN_PLAIN + 4, 2);
   20b98:	e0bfff17 	ldw	r2,-4(fp)
   20b9c:	10800684 	addi	r2,r2,26
   20ba0:	1009883a 	mov	r4,r2
   20ba4:	01400804 	movi	r5,32
   20ba8:	01800084 	movi	r6,2
   20bac:	002005c0 	call	2005c <checksum>
   20bb0:	e0bffe15 	stw	r2,-8(fp)
   buf[TCP_CHECKSUM_H_P] = ck >> 8;
   20bb4:	e0bfff17 	ldw	r2,-4(fp)
   20bb8:	10800c84 	addi	r2,r2,50
   20bbc:	e0fffe17 	ldw	r3,-8(fp)
   20bc0:	1806d23a 	srli	r3,r3,8
   20bc4:	10c00005 	stb	r3,0(r2)
   buf[TCP_CHECKSUM_L_P] = ck & 0xff;
   20bc8:	e0bfff17 	ldw	r2,-4(fp)
   20bcc:	10800cc4 	addi	r2,r2,51
   20bd0:	e0fffe17 	ldw	r3,-8(fp)
   20bd4:	10c00005 	stb	r3,0(r2)
   // add 4 for option mss:
   enc28j60PacketSend(IP_HEADER_LEN +
   20bd8:	01000e84 	movi	r4,58
   20bdc:	e17fff17 	ldw	r5,-4(fp)
   20be0:	002182c0 	call	2182c <enc28j60PacketSend>
      TCP_HEADER_LEN_PLAIN +
      4 +
      ETH_HEADER_LEN,
      buf);
}
   20be4:	e037883a 	mov	sp,fp
   20be8:	dfc00117 	ldw	ra,4(sp)
   20bec:	df000017 	ldw	fp,0(sp)
   20bf0:	dec00204 	addi	sp,sp,8
   20bf4:	f800283a 	ret

00020bf8 <get_tcp_data_pointer>:

// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
unsigned  int get_tcp_data_pointer(void)
{
   20bf8:	deffff04 	addi	sp,sp,-4
   20bfc:	df000015 	stw	fp,0(sp)
   20c00:	d839883a 	mov	fp,sp
   if(info_data_len) {
   20c04:	d0a09117 	ldw	r2,-32188(gp)
   20c08:	10000326 	beq	r2,zero,20c18 <get_tcp_data_pointer+0x20>
      return((unsigned  int) TCP_SRC_PORT_H_P + info_hdr_len);
   20c0c:	d0a09017 	ldw	r2,-32192(gp)
   20c10:	10800884 	addi	r2,r2,34
   20c14:	00000106 	br	20c1c <get_tcp_data_pointer+0x24>
   }
   else {
      return(0);
   20c18:	0005883a 	mov	r2,zero
   }
}
   20c1c:	e037883a 	mov	sp,fp
   20c20:	df000017 	ldw	fp,0(sp)
   20c24:	dec00104 	addi	sp,sp,4
   20c28:	f800283a 	ret

00020c2c <init_len_info>:

// do some basic length calculations and store the result in static varibales
void init_len_info(unsigned char* buf)
{
   20c2c:	defffe04 	addi	sp,sp,-8
   20c30:	df000115 	stw	fp,4(sp)
   20c34:	df000104 	addi	fp,sp,4
   20c38:	e13fff15 	stw	r4,-4(fp)
   info_data_len = (buf[IP_TOTLEN_H_P] << 8) | (buf[IP_TOTLEN_L_P] & 0xff);
   20c3c:	e0bfff17 	ldw	r2,-4(fp)
   20c40:	10800404 	addi	r2,r2,16
   20c44:	10800003 	ldbu	r2,0(r2)
   20c48:	10803fcc 	andi	r2,r2,255
   20c4c:	1006923a 	slli	r3,r2,8
   20c50:	e0bfff17 	ldw	r2,-4(fp)
   20c54:	10800444 	addi	r2,r2,17
   20c58:	10800003 	ldbu	r2,0(r2)
   20c5c:	10803fcc 	andi	r2,r2,255
   20c60:	1884b03a 	or	r2,r3,r2
   20c64:	d0a09115 	stw	r2,-32188(gp)
   info_data_len -= IP_HEADER_LEN;
   20c68:	d0a09117 	ldw	r2,-32188(gp)
   20c6c:	10bffb04 	addi	r2,r2,-20
   20c70:	d0a09115 	stw	r2,-32188(gp)
   info_hdr_len = (buf[TCP_HEADER_LEN_P] >> 4) * 4; // generate len in bytes;
   20c74:	e0bfff17 	ldw	r2,-4(fp)
   20c78:	10800b84 	addi	r2,r2,46
   20c7c:	10800003 	ldbu	r2,0(r2)
   20c80:	10803fcc 	andi	r2,r2,255
   20c84:	1004d13a 	srli	r2,r2,4
   20c88:	10803fcc 	andi	r2,r2,255
   20c8c:	1085883a 	add	r2,r2,r2
   20c90:	1085883a 	add	r2,r2,r2
   20c94:	d0a09015 	stw	r2,-32192(gp)
   info_data_len -= info_hdr_len;
   20c98:	d0e09117 	ldw	r3,-32188(gp)
   20c9c:	d0a09017 	ldw	r2,-32192(gp)
   20ca0:	1885c83a 	sub	r2,r3,r2
   20ca4:	d0a09115 	stw	r2,-32188(gp)
   if (info_data_len <= 0) {
   20ca8:	d0a09117 	ldw	r2,-32188(gp)
   20cac:	1000011e 	bne	r2,zero,20cb4 <init_len_info+0x88>
      info_data_len = 0;
   20cb0:	d0209115 	stw	zero,-32188(gp)
   }
}
   20cb4:	e037883a 	mov	sp,fp
   20cb8:	df000017 	ldw	fp,0(sp)
   20cbc:	dec00104 	addi	sp,sp,4
   20cc0:	f800283a 	ret

00020cc4 <fill_tcp_data_p>:
// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
unsigned  int fill_tcp_data_p(unsigned char* buf, unsigned  int pos,
                              const unsigned char* progmem_s)
{
   20cc4:	defffb04 	addi	sp,sp,-20
   20cc8:	df000415 	stw	fp,16(sp)
   20ccc:	df000404 	addi	fp,sp,16
   20cd0:	e13ffd15 	stw	r4,-12(fp)
   20cd4:	e17ffe15 	stw	r5,-8(fp)
   20cd8:	e1bfff15 	stw	r6,-4(fp)
   char c;
   // fill in tcp data at position pos
   //
   // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
   while( (c = pgm_read_byte(progmem_s++)) ) {
   20cdc:	00000906 	br	20d04 <fill_tcp_data_p+0x40>
      buf[TCP_CHECKSUM_L_P + 3 + pos] = c;
   20ce0:	e0bffe17 	ldw	r2,-8(fp)
   20ce4:	10800d84 	addi	r2,r2,54
   20ce8:	e0fffd17 	ldw	r3,-12(fp)
   20cec:	1885883a 	add	r2,r3,r2
   20cf0:	e0fffc03 	ldbu	r3,-16(fp)
   20cf4:	10c00005 	stb	r3,0(r2)
      pos++;
   20cf8:	e0bffe17 	ldw	r2,-8(fp)
   20cfc:	10800044 	addi	r2,r2,1
   20d00:	e0bffe15 	stw	r2,-8(fp)
{
   char c;
   // fill in tcp data at position pos
   //
   // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
   while( (c = pgm_read_byte(progmem_s++)) ) {
   20d04:	e0bfff17 	ldw	r2,-4(fp)
   20d08:	10800003 	ldbu	r2,0(r2)
   20d0c:	e0bffc05 	stb	r2,-16(fp)
   20d10:	e0bffc07 	ldb	r2,-16(fp)
   20d14:	1004c03a 	cmpne	r2,r2,zero
   20d18:	e0ffff17 	ldw	r3,-4(fp)
   20d1c:	18c00044 	addi	r3,r3,1
   20d20:	e0ffff15 	stw	r3,-4(fp)
   20d24:	10803fcc 	andi	r2,r2,255
   20d28:	103fed1e 	bne	r2,zero,20ce0 <fill_tcp_data_p+0x1c>
      buf[TCP_CHECKSUM_L_P + 3 + pos] = c;
      pos++;
   }
   return(pos);
   20d2c:	e0bffe17 	ldw	r2,-8(fp)
}
   20d30:	e037883a 	mov	sp,fp
   20d34:	df000017 	ldw	fp,0(sp)
   20d38:	dec00104 	addi	sp,sp,4
   20d3c:	f800283a 	ret

00020d40 <fill_tcp_data>:
// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
unsigned  int fill_tcp_data(unsigned char* buf, unsigned  int pos,
                            const char* s)
{
   20d40:	defffc04 	addi	sp,sp,-16
   20d44:	df000315 	stw	fp,12(sp)
   20d48:	df000304 	addi	fp,sp,12
   20d4c:	e13ffd15 	stw	r4,-12(fp)
   20d50:	e17ffe15 	stw	r5,-8(fp)
   20d54:	e1bfff15 	stw	r6,-4(fp)
   // fill in tcp data at position pos
   // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
   while(*s) {
   20d58:	00000d06 	br	20d90 <fill_tcp_data+0x50>
      buf[TCP_CHECKSUM_L_P + 3 + pos] = *s;
   20d5c:	e0bffe17 	ldw	r2,-8(fp)
   20d60:	10800d84 	addi	r2,r2,54
   20d64:	e0fffd17 	ldw	r3,-12(fp)
   20d68:	1885883a 	add	r2,r3,r2
   20d6c:	e0ffff17 	ldw	r3,-4(fp)
   20d70:	18c00003 	ldbu	r3,0(r3)
   20d74:	10c00005 	stb	r3,0(r2)
      pos++;
   20d78:	e0bffe17 	ldw	r2,-8(fp)
   20d7c:	10800044 	addi	r2,r2,1
   20d80:	e0bffe15 	stw	r2,-8(fp)
      s++;
   20d84:	e0bfff17 	ldw	r2,-4(fp)
   20d88:	10800044 	addi	r2,r2,1
   20d8c:	e0bfff15 	stw	r2,-4(fp)
unsigned  int fill_tcp_data(unsigned char* buf, unsigned  int pos,
                            const char* s)
{
   // fill in tcp data at position pos
   // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
   while(*s) {
   20d90:	e0bfff17 	ldw	r2,-4(fp)
   20d94:	10800003 	ldbu	r2,0(r2)
   20d98:	10803fcc 	andi	r2,r2,255
   20d9c:	1080201c 	xori	r2,r2,128
   20da0:	10bfe004 	addi	r2,r2,-128
   20da4:	103fed1e 	bne	r2,zero,20d5c <fill_tcp_data+0x1c>
      buf[TCP_CHECKSUM_L_P + 3 + pos] = *s;
      pos++;
      s++;
   }
   return(pos);
   20da8:	e0bffe17 	ldw	r2,-8(fp)
}
   20dac:	e037883a 	mov	sp,fp
   20db0:	df000017 	ldw	fp,0(sp)
   20db4:	dec00104 	addi	sp,sp,4
   20db8:	f800283a 	ret

00020dbc <make_tcp_ack_from_any>:

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(unsigned char* buf)
{
   20dbc:	defffc04 	addi	sp,sp,-16
   20dc0:	dfc00315 	stw	ra,12(sp)
   20dc4:	df000215 	stw	fp,8(sp)
   20dc8:	df000204 	addi	fp,sp,8
   20dcc:	e13fff15 	stw	r4,-4(fp)
   unsigned  int j;
   make_eth(buf);
   20dd0:	e13fff17 	ldw	r4,-4(fp)
   20dd4:	00203fc0 	call	203fc <make_eth>
   // fill the header:
   buf[TCP_FLAGS_P] = TCP_FLAGS_ACK_V;
   20dd8:	e0bfff17 	ldw	r2,-4(fp)
   20ddc:	10800bc4 	addi	r2,r2,47
   20de0:	00c00404 	movi	r3,16
   20de4:	10c00005 	stb	r3,0(r2)
   if (info_data_len == 0) {
   20de8:	d0a09117 	ldw	r2,-32188(gp)
   20dec:	1000061e 	bne	r2,zero,20e08 <make_tcp_ack_from_any+0x4c>
      // if there is no data then we must still acknoledge one packet
      make_tcphead(buf, 1, 0, 1); // no options
   20df0:	e13fff17 	ldw	r4,-4(fp)
   20df4:	01400044 	movi	r5,1
   20df8:	000d883a 	mov	r6,zero
   20dfc:	01c00044 	movi	r7,1
   20e00:	00205cc0 	call	205cc <make_tcphead>
   20e04:	00000606 	br	20e20 <make_tcp_ack_from_any+0x64>
   }
   else {
      make_tcphead(buf, info_data_len, 0, 1); // no options
   20e08:	d0a09117 	ldw	r2,-32188(gp)
   20e0c:	e13fff17 	ldw	r4,-4(fp)
   20e10:	100b883a 	mov	r5,r2
   20e14:	000d883a 	mov	r6,zero
   20e18:	01c00044 	movi	r7,1
   20e1c:	00205cc0 	call	205cc <make_tcphead>
   }

   // total length field in the IP header must be set:
   // 20 bytes IP + 20 bytes tcp (when no options) 
   j = IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN;
   20e20:	00800a04 	movi	r2,40
   20e24:	e0bffe15 	stw	r2,-8(fp)
   buf[IP_TOTLEN_H_P] = j >> 8;
   20e28:	e0bfff17 	ldw	r2,-4(fp)
   20e2c:	10800404 	addi	r2,r2,16
   20e30:	e0fffe17 	ldw	r3,-8(fp)
   20e34:	1806d23a 	srli	r3,r3,8
   20e38:	10c00005 	stb	r3,0(r2)
   buf[IP_TOTLEN_L_P] = j & 0xff;
   20e3c:	e0bfff17 	ldw	r2,-4(fp)
   20e40:	10800444 	addi	r2,r2,17
   20e44:	e0fffe17 	ldw	r3,-8(fp)
   20e48:	10c00005 	stb	r3,0(r2)
   make_ip(buf);
   20e4c:	e13fff17 	ldw	r4,-4(fp)
   20e50:	00205300 	call	20530 <make_ip>
   // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
   j = checksum(&buf[IP_SRC_P], 8 + TCP_HEADER_LEN_PLAIN, 2);
   20e54:	e0bfff17 	ldw	r2,-4(fp)
   20e58:	10800684 	addi	r2,r2,26
   20e5c:	1009883a 	mov	r4,r2
   20e60:	01400704 	movi	r5,28
   20e64:	01800084 	movi	r6,2
   20e68:	002005c0 	call	2005c <checksum>
   20e6c:	e0bffe15 	stw	r2,-8(fp)
   buf[TCP_CHECKSUM_H_P] = j >> 8;
   20e70:	e0bfff17 	ldw	r2,-4(fp)
   20e74:	10800c84 	addi	r2,r2,50
   20e78:	e0fffe17 	ldw	r3,-8(fp)
   20e7c:	1806d23a 	srli	r3,r3,8
   20e80:	10c00005 	stb	r3,0(r2)
   buf[TCP_CHECKSUM_L_P] = j & 0xff;
   20e84:	e0bfff17 	ldw	r2,-4(fp)
   20e88:	10800cc4 	addi	r2,r2,51
   20e8c:	e0fffe17 	ldw	r3,-8(fp)
   20e90:	10c00005 	stb	r3,0(r2)
   enc28j60PacketSend(IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + ETH_HEADER_LEN, buf);
   20e94:	01000d84 	movi	r4,54
   20e98:	e17fff17 	ldw	r5,-4(fp)
   20e9c:	002182c0 	call	2182c <enc28j60PacketSend>
}
   20ea0:	e037883a 	mov	sp,fp
   20ea4:	dfc00117 	ldw	ra,4(sp)
   20ea8:	df000017 	ldw	fp,0(sp)
   20eac:	dec00204 	addi	sp,sp,8
   20eb0:	f800283a 	ret

00020eb4 <make_tcp_ack_with_data>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void make_tcp_ack_with_data(unsigned char* buf, unsigned  int dlen)
{
   20eb4:	defffb04 	addi	sp,sp,-20
   20eb8:	dfc00415 	stw	ra,16(sp)
   20ebc:	df000315 	stw	fp,12(sp)
   20ec0:	df000304 	addi	fp,sp,12
   20ec4:	e13ffe15 	stw	r4,-8(fp)
   20ec8:	e17fff15 	stw	r5,-4(fp)
   unsigned  int j;
   // fill the header:
   // This code requires that we send only one data packet
   // because we keep no state information. We must therefore set
   // the fin here:
   buf[TCP_FLAGS_P] = TCP_FLAGS_ACK_V | TCP_FLAGS_PUSH_V | TCP_FLAGS_FIN_V;
   20ecc:	e0bffe17 	ldw	r2,-8(fp)
   20ed0:	10800bc4 	addi	r2,r2,47
   20ed4:	00c00644 	movi	r3,25
   20ed8:	10c00005 	stb	r3,0(r2)

   // total length field in the IP header must be set:
   // 20 bytes IP + 20 bytes tcp (when no options) + len of data
   j = IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + dlen;
   20edc:	e0bfff17 	ldw	r2,-4(fp)
   20ee0:	10800a04 	addi	r2,r2,40
   20ee4:	e0bffd15 	stw	r2,-12(fp)
   buf[IP_TOTLEN_H_P] = j >> 8;
   20ee8:	e0bffe17 	ldw	r2,-8(fp)
   20eec:	10800404 	addi	r2,r2,16
   20ef0:	e0fffd17 	ldw	r3,-12(fp)
   20ef4:	1806d23a 	srli	r3,r3,8
   20ef8:	10c00005 	stb	r3,0(r2)
   buf[IP_TOTLEN_L_P] = j & 0xff;
   20efc:	e0bffe17 	ldw	r2,-8(fp)
   20f00:	10800444 	addi	r2,r2,17
   20f04:	e0fffd17 	ldw	r3,-12(fp)
   20f08:	10c00005 	stb	r3,0(r2)
   fill_ip_hdr_checksum(buf);
   20f0c:	e13ffe17 	ldw	r4,-8(fp)
   20f10:	00204840 	call	20484 <fill_ip_hdr_checksum>
   // zero the checksum
   buf[TCP_CHECKSUM_H_P] = 0;
   20f14:	e0bffe17 	ldw	r2,-8(fp)
   20f18:	10800c84 	addi	r2,r2,50
   20f1c:	10000005 	stb	zero,0(r2)
   buf[TCP_CHECKSUM_L_P] = 0;
   20f20:	e0bffe17 	ldw	r2,-8(fp)
   20f24:	10800cc4 	addi	r2,r2,51
   20f28:	10000005 	stb	zero,0(r2)
   // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
   j = checksum(&buf[IP_SRC_P], 8 + TCP_HEADER_LEN_PLAIN + dlen, 2);
   20f2c:	e0bffe17 	ldw	r2,-8(fp)
   20f30:	10c00684 	addi	r3,r2,26
   20f34:	e0bfff17 	ldw	r2,-4(fp)
   20f38:	10800704 	addi	r2,r2,28
   20f3c:	1809883a 	mov	r4,r3
   20f40:	100b883a 	mov	r5,r2
   20f44:	01800084 	movi	r6,2
   20f48:	002005c0 	call	2005c <checksum>
   20f4c:	e0bffd15 	stw	r2,-12(fp)
   buf[TCP_CHECKSUM_H_P] = j >> 8;
   20f50:	e0bffe17 	ldw	r2,-8(fp)
   20f54:	10800c84 	addi	r2,r2,50
   20f58:	e0fffd17 	ldw	r3,-12(fp)
   20f5c:	1806d23a 	srli	r3,r3,8
   20f60:	10c00005 	stb	r3,0(r2)
   buf[TCP_CHECKSUM_L_P] = j & 0xff;
   20f64:	e0bffe17 	ldw	r2,-8(fp)
   20f68:	10800cc4 	addi	r2,r2,51
   20f6c:	e0fffd17 	ldw	r3,-12(fp)
   20f70:	10c00005 	stb	r3,0(r2)
   enc28j60PacketSend(IP_HEADER_LEN +
   20f74:	e0bfff17 	ldw	r2,-4(fp)
   20f78:	10800d84 	addi	r2,r2,54
   20f7c:	1009883a 	mov	r4,r2
   20f80:	e17ffe17 	ldw	r5,-8(fp)
   20f84:	002182c0 	call	2182c <enc28j60PacketSend>
      TCP_HEADER_LEN_PLAIN +
      dlen +
      ETH_HEADER_LEN,
      buf);
}
   20f88:	e037883a 	mov	sp,fp
   20f8c:	dfc00117 	ldw	ra,4(sp)
   20f90:	df000017 	ldw	fp,0(sp)
   20f94:	dec00204 	addi	sp,sp,8
   20f98:	f800283a 	ret

00020f9c <SPI2_Init>:
#define JOYSTICK        0xF800                     // JOYSTICK ALL KEYS

void SPI2_Init(void);

void SPI2_Init(void)
{
   20f9c:	deffff04 	addi	sp,sp,-4
   20fa0:	df000015 	stw	fp,0(sp)
   20fa4:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_SPI_CONTROL(LAN_BASE,0x00);
   20fa8:	0007883a 	mov	r3,zero
   20fac:	00860304 	movi	r2,6156
   20fb0:	10c00035 	stwio	r3,0(r2)
}
   20fb4:	e037883a 	mov	sp,fp
   20fb8:	df000017 	ldw	fp,0(sp)
   20fbc:	dec00104 	addi	sp,sp,4
   20fc0:	f800283a 	ret

00020fc4 <Delay>:


void Delay(unsigned long int nCount)
{
   20fc4:	defffe04 	addi	sp,sp,-8
   20fc8:	df000115 	stw	fp,4(sp)
   20fcc:	df000104 	addi	fp,sp,4
   20fd0:	e13fff15 	stw	r4,-4(fp)
   for (; nCount != 0; nCount--);
   20fd4:	00000306 	br	20fe4 <Delay+0x20>
   20fd8:	e0bfff17 	ldw	r2,-4(fp)
   20fdc:	10bfffc4 	addi	r2,r2,-1
   20fe0:	e0bfff15 	stw	r2,-4(fp)
   20fe4:	e0bfff17 	ldw	r2,-4(fp)
   20fe8:	103ffb1e 	bne	r2,zero,20fd8 <Delay+0x14>
}
   20fec:	e037883a 	mov	sp,fp
   20ff0:	df000017 	ldw	fp,0(sp)
   20ff4:	dec00104 	addi	sp,sp,4
   20ff8:	f800283a 	ret

00020ffc <main>:
int main(void)
{
   20ffc:	defffe04 	addi	sp,sp,-8
   21000:	dfc00115 	stw	ra,4(sp)
   21004:	df000015 	stw	fp,0(sp)
   21008:	d839883a 	mov	fp,sp
	 SPInet_Init();
   2100c:	0020f9c0 	call	20f9c <SPI2_Init>

	 simple_server();
   21010:	0022b580 	call	22b58 <simple_server>
	 return 0;
   21014:	0005883a 	mov	r2,zero
}
   21018:	e037883a 	mov	sp,fp
   2101c:	dfc00117 	ldw	ra,4(sp)
   21020:	df000017 	ldw	fp,0(sp)
   21024:	dec00204 	addi	sp,sp,8
   21028:	f800283a 	ret

0002102c <_Delay>:

static unsigned char Enc28j60Bank;
static alt_u16 NextPacketPtr;

void _Delay(unsigned int value)
{
   2102c:	defffe04 	addi	sp,sp,-8
   21030:	df000115 	stw	fp,4(sp)
   21034:	df000104 	addi	fp,sp,4
   21038:	e13fff15 	stw	r4,-4(fp)
	for (; value>0; value--);
   2103c:	00000306 	br	2104c <_Delay+0x20>
   21040:	e0bfff17 	ldw	r2,-4(fp)
   21044:	10bfffc4 	addi	r2,r2,-1
   21048:	e0bfff15 	stw	r2,-4(fp)
   2104c:	e0bfff17 	ldw	r2,-4(fp)
   21050:	103ffb1e 	bne	r2,zero,21040 <_Delay+0x14>
}
   21054:	e037883a 	mov	sp,fp
   21058:	df000017 	ldw	fp,0(sp)
   2105c:	dec00104 	addi	sp,sp,4
   21060:	f800283a 	ret

00021064 <SPI2_Write>:

void SPI2_Write(unsigned char writedat)
{
   21064:	defffa04 	addi	sp,sp,-24
   21068:	dfc00515 	stw	ra,20(sp)
   2106c:	df000415 	stw	fp,16(sp)
   21070:	df000404 	addi	fp,sp,16
   21074:	2005883a 	mov	r2,r4
   21078:	e0bfff05 	stb	r2,-4(fp)
    alt_avalon_spi_command(LAN_BASE,0,1,&writedat,0,NULL,ALT_AVALON_SPI_COMMAND_MERGE);
   2107c:	d8000015 	stw	zero,0(sp)
   21080:	d8000115 	stw	zero,4(sp)
   21084:	00800044 	movi	r2,1
   21088:	d8800215 	stw	r2,8(sp)
   2108c:	01060004 	movi	r4,6144
   21090:	000b883a 	mov	r5,zero
   21094:	01800044 	movi	r6,1
   21098:	e1ffff04 	addi	r7,fp,-4
   2109c:	0023b800 	call	23b80 <alt_avalon_spi_command>
}
   210a0:	e037883a 	mov	sp,fp
   210a4:	dfc00117 	ldw	ra,4(sp)
   210a8:	df000017 	ldw	fp,0(sp)
   210ac:	dec00204 	addi	sp,sp,8
   210b0:	f800283a 	ret

000210b4 <SPI2_Read>:

unsigned char SPI2_Read()
{
   210b4:	defffa04 	addi	sp,sp,-24
   210b8:	dfc00515 	stw	ra,20(sp)
   210bc:	df000415 	stw	fp,16(sp)
   210c0:	df000404 	addi	fp,sp,16
    alt_u8 temp;
    alt_avalon_spi_command(LAN_BASE,0,0,NULL,1,&temp,ALT_AVALON_SPI_COMMAND_MERGE);
   210c4:	00800044 	movi	r2,1
   210c8:	d8800015 	stw	r2,0(sp)
   210cc:	e0bfff04 	addi	r2,fp,-4
   210d0:	d8800115 	stw	r2,4(sp)
   210d4:	00800044 	movi	r2,1
   210d8:	d8800215 	stw	r2,8(sp)
   210dc:	01060004 	movi	r4,6144
   210e0:	000b883a 	mov	r5,zero
   210e4:	000d883a 	mov	r6,zero
   210e8:	000f883a 	mov	r7,zero
   210ec:	0023b800 	call	23b80 <alt_avalon_spi_command>

    return temp;
   210f0:	e0bfff03 	ldbu	r2,-4(fp)
}
   210f4:	e037883a 	mov	sp,fp
   210f8:	dfc00117 	ldw	ra,4(sp)
   210fc:	df000017 	ldw	fp,0(sp)
   21100:	dec00204 	addi	sp,sp,8
   21104:	f800283a 	ret

00021108 <enc28j60ReadOp>:

unsigned char enc28j60ReadOp(unsigned char op, unsigned char address)
{
   21108:	defffb04 	addi	sp,sp,-20
   2110c:	dfc00415 	stw	ra,16(sp)
   21110:	df000315 	stw	fp,12(sp)
   21114:	df000304 	addi	fp,sp,12
   21118:	2007883a 	mov	r3,r4
   2111c:	2805883a 	mov	r2,r5
   21120:	e0fffe05 	stb	r3,-8(fp)
   21124:	e0bfff05 	stb	r2,-4(fp)
    unsigned char dat = 0;
   21128:	e03ffd05 	stb	zero,-12(fp)

    ENC28J60_CSL();
   2112c:	0007883a 	mov	r3,zero
   21130:	00864004 	movi	r2,6400
   21134:	10c00035 	stwio	r3,0(r2)

    dat = op | (address & ADDR_MASK);
   21138:	e0bfff03 	ldbu	r2,-4(fp)
   2113c:	108007cc 	andi	r2,r2,31
   21140:	1007883a 	mov	r3,r2
   21144:	e0bffe03 	ldbu	r2,-8(fp)
   21148:	1884b03a 	or	r2,r3,r2
   2114c:	e0bffd05 	stb	r2,-12(fp)
    SPInet_Write(dat);
   21150:	e0bffd03 	ldbu	r2,-12(fp)
   21154:	1009883a 	mov	r4,r2
   21158:	00210640 	call	21064 <SPI2_Write>
    dat = SPInet_Read();
   2115c:	00210b40 	call	210b4 <SPI2_Read>
   21160:	e0bffd05 	stb	r2,-12(fp)
   // do dummy read if needed (for mac and mii, see datasheet page 29)
    if(address & 0x80) {
   21164:	e0bfff03 	ldbu	r2,-4(fp)
   21168:	10803fcc 	andi	r2,r2,255
   2116c:	1080201c 	xori	r2,r2,128
   21170:	10bfe004 	addi	r2,r2,-128
   21174:	1000030e 	bge	r2,zero,21184 <enc28j60ReadOp+0x7c>
      dat = SPInet_Read(0xFF);
   21178:	01003fc4 	movi	r4,255
   2117c:	00210b40 	call	210b4 <SPI2_Read>
   21180:	e0bffd05 	stb	r2,-12(fp)
    }
    // release CS
    ENC28J60_CSH();
   21184:	00c00044 	movi	r3,1
   21188:	00864004 	movi	r2,6400
   2118c:	10c00035 	stwio	r3,0(r2)

    return dat;
   21190:	e0bffd03 	ldbu	r2,-12(fp)
}
   21194:	e037883a 	mov	sp,fp
   21198:	dfc00117 	ldw	ra,4(sp)
   2119c:	df000017 	ldw	fp,0(sp)
   211a0:	dec00204 	addi	sp,sp,8
   211a4:	f800283a 	ret

000211a8 <enc28j60WriteOp>:

void enc28j60WriteOp(unsigned char op, unsigned char address, unsigned char data)
{
   211a8:	defffa04 	addi	sp,sp,-24
   211ac:	dfc00515 	stw	ra,20(sp)
   211b0:	df000415 	stw	fp,16(sp)
   211b4:	df000404 	addi	fp,sp,16
   211b8:	2807883a 	mov	r3,r5
   211bc:	3005883a 	mov	r2,r6
   211c0:	e13ffd05 	stb	r4,-12(fp)
   211c4:	e0fffe05 	stb	r3,-8(fp)
   211c8:	e0bfff05 	stb	r2,-4(fp)
    unsigned char dat = 0;
   211cc:	e03ffc05 	stb	zero,-16(fp)

    ENC28J60_CSL();
   211d0:	0007883a 	mov	r3,zero
   211d4:	00864004 	movi	r2,6400
   211d8:	10c00035 	stwio	r3,0(r2)
    // issue write command
    dat = op | (address & ADDR_MASK);
   211dc:	e0bffe03 	ldbu	r2,-8(fp)
   211e0:	108007cc 	andi	r2,r2,31
   211e4:	1007883a 	mov	r3,r2
   211e8:	e0bffd03 	ldbu	r2,-12(fp)
   211ec:	1884b03a 	or	r2,r3,r2
   211f0:	e0bffc05 	stb	r2,-16(fp)
    SPInet_Write(dat);
   211f4:	e0bffc03 	ldbu	r2,-16(fp)
   211f8:	1009883a 	mov	r4,r2
   211fc:	00210640 	call	21064 <SPI2_Write>
    // write data
    dat = data;
   21200:	e0bfff03 	ldbu	r2,-4(fp)
   21204:	e0bffc05 	stb	r2,-16(fp)
    SPInet_Write(dat);
   21208:	e0bffc03 	ldbu	r2,-16(fp)
   2120c:	1009883a 	mov	r4,r2
   21210:	00210640 	call	21064 <SPI2_Write>
    ENC28J60_CSH();
   21214:	00c00044 	movi	r3,1
   21218:	00864004 	movi	r2,6400
   2121c:	10c00035 	stwio	r3,0(r2)
}
   21220:	e037883a 	mov	sp,fp
   21224:	dfc00117 	ldw	ra,4(sp)
   21228:	df000017 	ldw	fp,0(sp)
   2122c:	dec00204 	addi	sp,sp,8
   21230:	f800283a 	ret

00021234 <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(alt_u16 len, unsigned char* data)
{
   21234:	defffc04 	addi	sp,sp,-16
   21238:	dfc00315 	stw	ra,12(sp)
   2123c:	df000215 	stw	fp,8(sp)
   21240:	df000204 	addi	fp,sp,8
   21244:	2005883a 	mov	r2,r4
   21248:	e17fff15 	stw	r5,-4(fp)
   2124c:	e0bffe0d 	sth	r2,-8(fp)
   ENC28J60_CSL();
   21250:	0007883a 	mov	r3,zero
   21254:	00864004 	movi	r2,6400
   21258:	10c00035 	stwio	r3,0(r2)
    // issue read command
    SPInet_Write(ENC28J60_READ_BUF_MEM);
   2125c:	01000e84 	movi	r4,58
   21260:	00210640 	call	21064 <SPI2_Write>
    while (len--) {
   21264:	00000606 	br	21280 <enc28j60ReadBuffer+0x4c>
        *data++ = (unsigned char) SPInet_Read( );
   21268:	00210b40 	call	210b4 <SPI2_Read>
   2126c:	e0ffff17 	ldw	r3,-4(fp)
   21270:	18800005 	stb	r2,0(r3)
   21274:	e0bfff17 	ldw	r2,-4(fp)
   21278:	10800044 	addi	r2,r2,1
   2127c:	e0bfff15 	stw	r2,-4(fp)
void enc28j60ReadBuffer(alt_u16 len, unsigned char* data)
{
   ENC28J60_CSL();
    // issue read command
    SPInet_Write(ENC28J60_READ_BUF_MEM);
    while (len--) {
   21280:	e0bffe0b 	ldhu	r2,-8(fp)
   21284:	1004c03a 	cmpne	r2,r2,zero
   21288:	e0fffe0b 	ldhu	r3,-8(fp)
   2128c:	18ffffc4 	addi	r3,r3,-1
   21290:	e0fffe0d 	sth	r3,-8(fp)
   21294:	10803fcc 	andi	r2,r2,255
   21298:	103ff31e 	bne	r2,zero,21268 <enc28j60ReadBuffer+0x34>
        *data++ = (unsigned char) SPInet_Read( );
    }
    *data = '\0';
   2129c:	e0bfff17 	ldw	r2,-4(fp)
   212a0:	10000005 	stb	zero,0(r2)
    ENC28J60_CSH();
   212a4:	00c00044 	movi	r3,1
   212a8:	00864004 	movi	r2,6400
   212ac:	10c00035 	stwio	r3,0(r2)
}
   212b0:	e037883a 	mov	sp,fp
   212b4:	dfc00117 	ldw	ra,4(sp)
   212b8:	df000017 	ldw	fp,0(sp)
   212bc:	dec00204 	addi	sp,sp,8
   212c0:	f800283a 	ret

000212c4 <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(alt_u16 len, unsigned char* data)
{
   212c4:	defffc04 	addi	sp,sp,-16
   212c8:	dfc00315 	stw	ra,12(sp)
   212cc:	df000215 	stw	fp,8(sp)
   212d0:	df000204 	addi	fp,sp,8
   212d4:	2005883a 	mov	r2,r4
   212d8:	e17fff15 	stw	r5,-4(fp)
   212dc:	e0bffe0d 	sth	r2,-8(fp)
    ENC28J60_CSL();
   212e0:	0007883a 	mov	r3,zero
   212e4:	00864004 	movi	r2,6400
   212e8:	10c00035 	stwio	r3,0(r2)
    // issue write command
    SPInet_Write(ENC28J60_WRITE_BUF_MEM);
   212ec:	01001e84 	movi	r4,122
   212f0:	00210640 	call	21064 <SPI2_Write>

    while (len--) {
   212f4:	00000806 	br	21318 <enc28j60WriteBuffer+0x54>
        SPInet_Write(*data++);
   212f8:	e0bfff17 	ldw	r2,-4(fp)
   212fc:	10800003 	ldbu	r2,0(r2)
   21300:	10803fcc 	andi	r2,r2,255
   21304:	e0ffff17 	ldw	r3,-4(fp)
   21308:	18c00044 	addi	r3,r3,1
   2130c:	e0ffff15 	stw	r3,-4(fp)
   21310:	1009883a 	mov	r4,r2
   21314:	00210640 	call	21064 <SPI2_Write>
{
    ENC28J60_CSL();
    // issue write command
    SPInet_Write(ENC28J60_WRITE_BUF_MEM);

    while (len--) {
   21318:	e0bffe0b 	ldhu	r2,-8(fp)
   2131c:	1004c03a 	cmpne	r2,r2,zero
   21320:	e0fffe0b 	ldhu	r3,-8(fp)
   21324:	18ffffc4 	addi	r3,r3,-1
   21328:	e0fffe0d 	sth	r3,-8(fp)
   2132c:	10803fcc 	andi	r2,r2,255
   21330:	103ff11e 	bne	r2,zero,212f8 <enc28j60WriteBuffer+0x34>
        SPInet_Write(*data++);
    }
    ENC28J60_CSH();
   21334:	00c00044 	movi	r3,1
   21338:	00864004 	movi	r2,6400
   2133c:	10c00035 	stwio	r3,0(r2)
}
   21340:	e037883a 	mov	sp,fp
   21344:	dfc00117 	ldw	ra,4(sp)
   21348:	df000017 	ldw	fp,0(sp)
   2134c:	dec00204 	addi	sp,sp,8
   21350:	f800283a 	ret

00021354 <enc28j60SetBank>:

void enc28j60SetBank(unsigned char address)
{
   21354:	defffd04 	addi	sp,sp,-12
   21358:	dfc00215 	stw	ra,8(sp)
   2135c:	df000115 	stw	fp,4(sp)
   21360:	df000104 	addi	fp,sp,4
   21364:	2005883a 	mov	r2,r4
   21368:	e0bfff05 	stb	r2,-4(fp)
    // set the bank (if needed)
    if((address & BANK_MASK) != Enc28j60Bank) {
   2136c:	e0bfff03 	ldbu	r2,-4(fp)
   21370:	10c0180c 	andi	r3,r2,96
   21374:	d0a09203 	ldbu	r2,-32184(gp)
   21378:	10803fcc 	andi	r2,r2,255
   2137c:	18800f26 	beq	r3,r2,213bc <enc28j60SetBank+0x68>
        // set the bank
        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1 | ECON1_BSEL0));
   21380:	01002804 	movi	r4,160
   21384:	014007c4 	movi	r5,31
   21388:	018000c4 	movi	r6,3
   2138c:	00211a80 	call	211a8 <enc28j60WriteOp>
        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK) >> 5);
   21390:	e0bfff03 	ldbu	r2,-4(fp)
   21394:	1080180c 	andi	r2,r2,96
   21398:	1005d17a 	srai	r2,r2,5
   2139c:	10803fcc 	andi	r2,r2,255
   213a0:	01002004 	movi	r4,128
   213a4:	014007c4 	movi	r5,31
   213a8:	100d883a 	mov	r6,r2
   213ac:	00211a80 	call	211a8 <enc28j60WriteOp>
        Enc28j60Bank = (address & BANK_MASK);
   213b0:	e0bfff03 	ldbu	r2,-4(fp)
   213b4:	1080180c 	andi	r2,r2,96
   213b8:	d0a09205 	stb	r2,-32184(gp)
    }
}
   213bc:	e037883a 	mov	sp,fp
   213c0:	dfc00117 	ldw	ra,4(sp)
   213c4:	df000017 	ldw	fp,0(sp)
   213c8:	dec00204 	addi	sp,sp,8
   213cc:	f800283a 	ret

000213d0 <enc28j60Read>:

unsigned char enc28j60Read(unsigned char address)
{
   213d0:	defffd04 	addi	sp,sp,-12
   213d4:	dfc00215 	stw	ra,8(sp)
   213d8:	df000115 	stw	fp,4(sp)
   213dc:	df000104 	addi	fp,sp,4
   213e0:	2005883a 	mov	r2,r4
   213e4:	e0bfff05 	stb	r2,-4(fp)
    // set the bank
    enc28j60SetBank(address);
   213e8:	e0bfff03 	ldbu	r2,-4(fp)
   213ec:	1009883a 	mov	r4,r2
   213f0:	00213540 	call	21354 <enc28j60SetBank>
    // do the read
    return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
   213f4:	e0bfff03 	ldbu	r2,-4(fp)
   213f8:	0009883a 	mov	r4,zero
   213fc:	100b883a 	mov	r5,r2
   21400:	00211080 	call	21108 <enc28j60ReadOp>
}
   21404:	e037883a 	mov	sp,fp
   21408:	dfc00117 	ldw	ra,4(sp)
   2140c:	df000017 	ldw	fp,0(sp)
   21410:	dec00204 	addi	sp,sp,8
   21414:	f800283a 	ret

00021418 <enc28j60Write>:

void enc28j60Write(unsigned char address, unsigned char data)
{
   21418:	defffc04 	addi	sp,sp,-16
   2141c:	dfc00315 	stw	ra,12(sp)
   21420:	df000215 	stw	fp,8(sp)
   21424:	df000204 	addi	fp,sp,8
   21428:	2007883a 	mov	r3,r4
   2142c:	2805883a 	mov	r2,r5
   21430:	e0fffe05 	stb	r3,-8(fp)
   21434:	e0bfff05 	stb	r2,-4(fp)
    // set the bank
    enc28j60SetBank(address);
   21438:	e0bffe03 	ldbu	r2,-8(fp)
   2143c:	1009883a 	mov	r4,r2
   21440:	00213540 	call	21354 <enc28j60SetBank>
    // do the write
    enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
   21444:	e0fffe03 	ldbu	r3,-8(fp)
   21448:	e0bfff03 	ldbu	r2,-4(fp)
   2144c:	01001004 	movi	r4,64
   21450:	180b883a 	mov	r5,r3
   21454:	100d883a 	mov	r6,r2
   21458:	00211a80 	call	211a8 <enc28j60WriteOp>
}
   2145c:	e037883a 	mov	sp,fp
   21460:	dfc00117 	ldw	ra,4(sp)
   21464:	df000017 	ldw	fp,0(sp)
   21468:	dec00204 	addi	sp,sp,8
   2146c:	f800283a 	ret

00021470 <enc28j60PhyWrite>:

void enc28j60PhyWrite(unsigned char address, alt_u16 data)
{
   21470:	defffc04 	addi	sp,sp,-16
   21474:	dfc00315 	stw	ra,12(sp)
   21478:	df000215 	stw	fp,8(sp)
   2147c:	df000204 	addi	fp,sp,8
   21480:	2007883a 	mov	r3,r4
   21484:	2805883a 	mov	r2,r5
   21488:	e0fffe05 	stb	r3,-8(fp)
   2148c:	e0bfff0d 	sth	r2,-4(fp)
    // set the PHY register address
    enc28j60Write(MIREGADR, address);
   21490:	e0bffe03 	ldbu	r2,-8(fp)
   21494:	01003504 	movi	r4,212
   21498:	100b883a 	mov	r5,r2
   2149c:	00214180 	call	21418 <enc28j60Write>
    // write the PHY data
    enc28j60Write(MIWRL, data);
   214a0:	e0bfff0b 	ldhu	r2,-4(fp)
   214a4:	10803fcc 	andi	r2,r2,255
   214a8:	01003584 	movi	r4,214
   214ac:	100b883a 	mov	r5,r2
   214b0:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(MIWRH, data >> 8);
   214b4:	e0bfff0b 	ldhu	r2,-4(fp)
   214b8:	1004d23a 	srli	r2,r2,8
   214bc:	10803fcc 	andi	r2,r2,255
   214c0:	010035c4 	movi	r4,215
   214c4:	100b883a 	mov	r5,r2
   214c8:	00214180 	call	21418 <enc28j60Write>
    // wait until the PHY write completes
    while(enc28j60Read(MISTAT) & MISTAT_BUSY) {
   214cc:	0001883a 	nop
   214d0:	01003a84 	movi	r4,234
   214d4:	00213d00 	call	213d0 <enc28j60Read>
   214d8:	10803fcc 	andi	r2,r2,255
   214dc:	1080004c 	andi	r2,r2,1
   214e0:	103ffb1e 	bne	r2,zero,214d0 <enc28j60PhyWrite+0x60>
    }
}
   214e4:	e037883a 	mov	sp,fp
   214e8:	dfc00117 	ldw	ra,4(sp)
   214ec:	df000017 	ldw	fp,0(sp)
   214f0:	dec00204 	addi	sp,sp,8
   214f4:	f800283a 	ret

000214f8 <enc28j60clkout>:

void enc28j60clkout(unsigned char clk)
{
   214f8:	defffd04 	addi	sp,sp,-12
   214fc:	dfc00215 	stw	ra,8(sp)
   21500:	df000115 	stw	fp,4(sp)
   21504:	df000104 	addi	fp,sp,4
   21508:	2005883a 	mov	r2,r4
   2150c:	e0bfff05 	stb	r2,-4(fp)
    // setup clkout: 2 is 12.5MHz:
    enc28j60Write(ECOCON, clk & 0x7);
   21510:	e0bfff03 	ldbu	r2,-4(fp)
   21514:	108001cc 	andi	r2,r2,7
   21518:	01001d44 	movi	r4,117
   2151c:	100b883a 	mov	r5,r2
   21520:	00214180 	call	21418 <enc28j60Write>
}
   21524:	e037883a 	mov	sp,fp
   21528:	dfc00117 	ldw	ra,4(sp)
   2152c:	df000017 	ldw	fp,0(sp)
   21530:	dec00204 	addi	sp,sp,8
   21534:	f800283a 	ret

00021538 <enc28j60Init>:

void enc28j60Init(unsigned char * macaddr)
{
   21538:	defffc04 	addi	sp,sp,-16
   2153c:	dfc00315 	stw	ra,12(sp)
   21540:	df000215 	stw	fp,8(sp)
   21544:	df000204 	addi	fp,sp,8
   21548:	e13fff15 	stw	r4,-4(fp)
    unsigned long i;

    ENC28J60_RSTH();
   2154c:	00c00044 	movi	r3,1
   21550:	00863804 	movi	r2,6368
   21554:	10c00035 	stwio	r3,0(r2)
    for(i = 0; i < 1000; i++);
   21558:	e03ffe15 	stw	zero,-8(fp)
   2155c:	00000306 	br	2156c <enc28j60Init+0x34>
   21560:	e0bffe17 	ldw	r2,-8(fp)
   21564:	10800044 	addi	r2,r2,1
   21568:	e0bffe15 	stw	r2,-8(fp)
   2156c:	e0bffe17 	ldw	r2,-8(fp)
   21570:	1080fa30 	cmpltui	r2,r2,1000
   21574:	103ffa1e 	bne	r2,zero,21560 <enc28j60Init+0x28>
    ENC28J60_RSTL();
   21578:	0007883a 	mov	r3,zero
   2157c:	00863804 	movi	r2,6368
   21580:	10c00035 	stwio	r3,0(r2)
    for(i = 0; i < 10000; i++);
   21584:	e03ffe15 	stw	zero,-8(fp)
   21588:	00000306 	br	21598 <enc28j60Init+0x60>
   2158c:	e0bffe17 	ldw	r2,-8(fp)
   21590:	10800044 	addi	r2,r2,1
   21594:	e0bffe15 	stw	r2,-8(fp)
   21598:	e0bffe17 	ldw	r2,-8(fp)
   2159c:	1089c430 	cmpltui	r2,r2,10000
   215a0:	103ffa1e 	bne	r2,zero,2158c <enc28j60Init+0x54>
    ENC28J60_RSTH();
   215a4:	00c00044 	movi	r3,1
   215a8:	00863804 	movi	r2,6368
   215ac:	10c00035 	stwio	r3,0(r2)
    for (i = 0; i < 10000; i++);
   215b0:	e03ffe15 	stw	zero,-8(fp)
   215b4:	00000306 	br	215c4 <enc28j60Init+0x8c>
   215b8:	e0bffe17 	ldw	r2,-8(fp)
   215bc:	10800044 	addi	r2,r2,1
   215c0:	e0bffe15 	stw	r2,-8(fp)
   215c4:	e0bffe17 	ldw	r2,-8(fp)
   215c8:	1089c430 	cmpltui	r2,r2,10000
   215cc:	103ffa1e 	bne	r2,zero,215b8 <enc28j60Init+0x80>


    // initialize I/O
    ENC28J60_CSH();
   215d0:	00c00044 	movi	r3,1
   215d4:	00864004 	movi	r2,6400
   215d8:	10c00035 	stwio	r3,0(r2)
    // perform system reset
    enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
   215dc:	01003fc4 	movi	r4,255
   215e0:	000b883a 	mov	r5,zero
   215e4:	01803fc4 	movi	r6,255
   215e8:	00211a80 	call	211a8 <enc28j60WriteOp>

    NextPacketPtr = RXSTART_INIT;
   215ec:	d020928d 	sth	zero,-32182(gp)
    // Rx start
    enc28j60Write(ERXSTL, RXSTART_INIT & 0xFF);
   215f0:	01000204 	movi	r4,8
   215f4:	000b883a 	mov	r5,zero
   215f8:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(ERXSTH, RXSTART_INIT >> 8);
   215fc:	01000244 	movi	r4,9
   21600:	000b883a 	mov	r5,zero
   21604:	00214180 	call	21418 <enc28j60Write>
    // set receive pointer address
    enc28j60Write(ERXRDPTL, RXSTART_INIT & 0xFF);
   21608:	01000304 	movi	r4,12
   2160c:	000b883a 	mov	r5,zero
   21610:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(ERXRDPTH, RXSTART_INIT >> 8);
   21614:	01000344 	movi	r4,13
   21618:	000b883a 	mov	r5,zero
   2161c:	00214180 	call	21418 <enc28j60Write>
    // RX end
    enc28j60Write(ERXNDL, RXSTOP_INIT & 0xFF);
   21620:	01000284 	movi	r4,10
   21624:	01403f84 	movi	r5,254
   21628:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(ERXNDH, RXSTOP_INIT >> 8);
   2162c:	010002c4 	movi	r4,11
   21630:	01400644 	movi	r5,25
   21634:	00214180 	call	21418 <enc28j60Write>
    // TX start
    enc28j60Write(ETXSTL, TXSTART_INIT & 0xFF);
   21638:	01000104 	movi	r4,4
   2163c:	01403fc4 	movi	r5,255
   21640:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(ETXSTH, TXSTART_INIT >> 8);
   21644:	01000144 	movi	r4,5
   21648:	01400644 	movi	r5,25
   2164c:	00214180 	call	21418 <enc28j60Write>
    // TX end
    enc28j60Write(ETXNDL, TXSTOP_INIT & 0xFF);
   21650:	01000184 	movi	r4,6
   21654:	01403fc4 	movi	r5,255
   21658:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(ETXNDH, TXSTOP_INIT >> 8);
   2165c:	010001c4 	movi	r4,7
   21660:	014007c4 	movi	r5,31
   21664:	00214180 	call	21418 <enc28j60Write>

    enc28j60Write(ERXFCON, ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_PMEN);
   21668:	01000e04 	movi	r4,56
   2166c:	01402c04 	movi	r5,176
   21670:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(EPMM0, 0x3f);
   21674:	01000a04 	movi	r4,40
   21678:	01400fc4 	movi	r5,63
   2167c:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(EPMM1, 0x30);
   21680:	01000a44 	movi	r4,41
   21684:	01400c04 	movi	r5,48
   21688:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(EPMCSL, 0xf9);
   2168c:	01000c04 	movi	r4,48
   21690:	01403e44 	movi	r5,249
   21694:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(EPMCSH, 0xf7);
   21698:	01000c44 	movi	r4,49
   2169c:	01403dc4 	movi	r5,247
   216a0:	00214180 	call	21418 <enc28j60Write>
   //
   // do bank 2 stuff
   // enable MAC receive
   enc28j60Write(MACON1, MACON1_MARXEN | MACON1_TXPAUS | MACON1_RXPAUS);
   216a4:	01003004 	movi	r4,192
   216a8:	01400344 	movi	r5,13
   216ac:	00214180 	call	21418 <enc28j60Write>
   // bring MAC out of reset
   enc28j60Write(MACON2, 0x00);
   216b0:	01003044 	movi	r4,193
   216b4:	000b883a 	mov	r5,zero
   216b8:	00214180 	call	21418 <enc28j60Write>
   // enable automatic padding to 60bytes and CRC operations
   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0 | MACON3_TXCRCEN | MACON3_FRMLNEN | MACON3_FULDPX);
   216bc:	01002004 	movi	r4,128
   216c0:	01403084 	movi	r5,194
   216c4:	01800cc4 	movi	r6,51
   216c8:	00211a80 	call	211a8 <enc28j60WriteOp>
   // set inter-frame gap (non-back-to-back)
   enc28j60Write(MAIPGL, 0x12);
   216cc:	01003184 	movi	r4,198
   216d0:	01400484 	movi	r5,18
   216d4:	00214180 	call	21418 <enc28j60Write>
   enc28j60Write(MAIPGH, 0x0C);
   216d8:	010031c4 	movi	r4,199
   216dc:	01400304 	movi	r5,12
   216e0:	00214180 	call	21418 <enc28j60Write>
   // set inter-frame gap (back-to-back)
   enc28j60Write(MABBIPG, 0x12);
   216e4:	01003104 	movi	r4,196
   216e8:	01400484 	movi	r5,18
   216ec:	00214180 	call	21418 <enc28j60Write>
   // Set the maximum packet size which the controller will accept
   // Do not send packets longer than MAX_FRAMELEN:
   enc28j60Write(MAMXFLL, MAX_FRAMELEN & 0xFF);
   216f0:	01003284 	movi	r4,202
   216f4:	01403704 	movi	r5,220
   216f8:	00214180 	call	21418 <enc28j60Write>
   enc28j60Write(MAMXFLH, MAX_FRAMELEN >> 8);
   216fc:	010032c4 	movi	r4,203
   21700:	01400144 	movi	r5,5
   21704:	00214180 	call	21418 <enc28j60Write>
   // do bank 3 stuff
   // write MAC address
   // NOTE: MAC address in ENC28J60 is byte-backward
   enc28j60Write(MAADR5, macaddr[0]);
   21708:	e0bfff17 	ldw	r2,-4(fp)
   2170c:	10800003 	ldbu	r2,0(r2)
   21710:	10803fcc 	andi	r2,r2,255
   21714:	01003904 	movi	r4,228
   21718:	100b883a 	mov	r5,r2
   2171c:	00214180 	call	21418 <enc28j60Write>
   enc28j60Write(MAADR4, macaddr[1]);
   21720:	e0bfff17 	ldw	r2,-4(fp)
   21724:	10800044 	addi	r2,r2,1
   21728:	10800003 	ldbu	r2,0(r2)
   2172c:	10803fcc 	andi	r2,r2,255
   21730:	01003944 	movi	r4,229
   21734:	100b883a 	mov	r5,r2
   21738:	00214180 	call	21418 <enc28j60Write>
   enc28j60Write(MAADR3, macaddr[2]);
   2173c:	e0bfff17 	ldw	r2,-4(fp)
   21740:	10800084 	addi	r2,r2,2
   21744:	10800003 	ldbu	r2,0(r2)
   21748:	10803fcc 	andi	r2,r2,255
   2174c:	01003884 	movi	r4,226
   21750:	100b883a 	mov	r5,r2
   21754:	00214180 	call	21418 <enc28j60Write>
   enc28j60Write(MAADR2, macaddr[3]);
   21758:	e0bfff17 	ldw	r2,-4(fp)
   2175c:	108000c4 	addi	r2,r2,3
   21760:	10800003 	ldbu	r2,0(r2)
   21764:	10803fcc 	andi	r2,r2,255
   21768:	010038c4 	movi	r4,227
   2176c:	100b883a 	mov	r5,r2
   21770:	00214180 	call	21418 <enc28j60Write>
   enc28j60Write(MAADR1, macaddr[4]);
   21774:	e0bfff17 	ldw	r2,-4(fp)
   21778:	10800104 	addi	r2,r2,4
   2177c:	10800003 	ldbu	r2,0(r2)
   21780:	10803fcc 	andi	r2,r2,255
   21784:	01003804 	movi	r4,224
   21788:	100b883a 	mov	r5,r2
   2178c:	00214180 	call	21418 <enc28j60Write>
   enc28j60Write(MAADR0, macaddr[5]);
   21790:	e0bfff17 	ldw	r2,-4(fp)
   21794:	10800144 	addi	r2,r2,5
   21798:	10800003 	ldbu	r2,0(r2)
   2179c:	10803fcc 	andi	r2,r2,255
   217a0:	01003844 	movi	r4,225
   217a4:	100b883a 	mov	r5,r2
   217a8:	00214180 	call	21418 <enc28j60Write>

   enc28j60PhyWrite(PHCON1, PHCON1_PDPXMD);
   217ac:	0009883a 	mov	r4,zero
   217b0:	01404004 	movi	r5,256
   217b4:	00214700 	call	21470 <enc28j60PhyWrite>


   // no loopback of transmitted frames
   enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
   217b8:	01000404 	movi	r4,16
   217bc:	01404004 	movi	r5,256
   217c0:	00214700 	call	21470 <enc28j60PhyWrite>
   // switch to bank 0
   enc28j60SetBank(ECON1);
   217c4:	010007c4 	movi	r4,31
   217c8:	00213540 	call	21354 <enc28j60SetBank>
   // enable interrutps
   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE | EIE_PKTIE);
   217cc:	01002004 	movi	r4,128
   217d0:	014006c4 	movi	r5,27
   217d4:	01803004 	movi	r6,192
   217d8:	00211a80 	call	211a8 <enc28j60WriteOp>
   // enable packet reception
   enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
   217dc:	01002004 	movi	r4,128
   217e0:	014007c4 	movi	r5,31
   217e4:	01800104 	movi	r6,4
   217e8:	00211a80 	call	211a8 <enc28j60WriteOp>
}
   217ec:	e037883a 	mov	sp,fp
   217f0:	dfc00117 	ldw	ra,4(sp)
   217f4:	df000017 	ldw	fp,0(sp)
   217f8:	dec00204 	addi	sp,sp,8
   217fc:	f800283a 	ret

00021800 <enc28j60getrev>:

// read the revision of the chip:
unsigned char enc28j60getrev(void)
{
   21800:	defffe04 	addi	sp,sp,-8
   21804:	dfc00115 	stw	ra,4(sp)
   21808:	df000015 	stw	fp,0(sp)
   2180c:	d839883a 	mov	fp,sp
    return(enc28j60Read(EREVID));
   21810:	01001c84 	movi	r4,114
   21814:	00213d00 	call	213d0 <enc28j60Read>
}
   21818:	e037883a 	mov	sp,fp
   2181c:	dfc00117 	ldw	ra,4(sp)
   21820:	df000017 	ldw	fp,0(sp)
   21824:	dec00204 	addi	sp,sp,8
   21828:	f800283a 	ret

0002182c <enc28j60PacketSend>:

void enc28j60PacketSend(unsigned int len, unsigned char* packet)
{
   2182c:	defffc04 	addi	sp,sp,-16
   21830:	dfc00315 	stw	ra,12(sp)
   21834:	df000215 	stw	fp,8(sp)
   21838:	df000204 	addi	fp,sp,8
   2183c:	e13ffe15 	stw	r4,-8(fp)
   21840:	e17fff15 	stw	r5,-4(fp)
    // Set the write pointer to start of transmit buffer area
    enc28j60Write(EWRPTL, TXSTART_INIT & 0xFF);
   21844:	01000084 	movi	r4,2
   21848:	01403fc4 	movi	r5,255
   2184c:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(EWRPTH, TXSTART_INIT >> 8);
   21850:	010000c4 	movi	r4,3
   21854:	01400644 	movi	r5,25
   21858:	00214180 	call	21418 <enc28j60Write>

    // Set the TXND pointer to correspond to the packet size given
    enc28j60Write(ETXNDL, (TXSTART_INIT + len) & 0xFF);
   2185c:	e0bffe17 	ldw	r2,-8(fp)
   21860:	10bfffc4 	addi	r2,r2,-1
   21864:	10803fcc 	andi	r2,r2,255
   21868:	01000184 	movi	r4,6
   2186c:	100b883a 	mov	r5,r2
   21870:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(ETXNDH, (TXSTART_INIT + len) >> 8);
   21874:	e0bffe17 	ldw	r2,-8(fp)
   21878:	10867fc4 	addi	r2,r2,6655
   2187c:	1004d23a 	srli	r2,r2,8
   21880:	10803fcc 	andi	r2,r2,255
   21884:	010001c4 	movi	r4,7
   21888:	100b883a 	mov	r5,r2
   2188c:	00214180 	call	21418 <enc28j60Write>

    // write per-packet control byte (0x00 means use macon3 settings)
    enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
   21890:	01001e84 	movi	r4,122
   21894:	000b883a 	mov	r5,zero
   21898:	000d883a 	mov	r6,zero
   2189c:	00211a80 	call	211a8 <enc28j60WriteOp>

    // copy the packet into the transmit buffer
    enc28j60WriteBuffer(len, packet);
   218a0:	e0bffe17 	ldw	r2,-8(fp)
   218a4:	10bfffcc 	andi	r2,r2,65535
   218a8:	1009883a 	mov	r4,r2
   218ac:	e17fff17 	ldw	r5,-4(fp)
   218b0:	00212c40 	call	212c4 <enc28j60WriteBuffer>

    // send the contents of the transmit buffer onto the network
    enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
   218b4:	01002004 	movi	r4,128
   218b8:	014007c4 	movi	r5,31
   218bc:	01800204 	movi	r6,8
   218c0:	00211a80 	call	211a8 <enc28j60WriteOp>

    // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
    if((enc28j60Read(EIR) & EIR_TXERIF)) {
   218c4:	01000704 	movi	r4,28
   218c8:	00213d00 	call	213d0 <enc28j60Read>
   218cc:	10803fcc 	andi	r2,r2,255
   218d0:	1080008c 	andi	r2,r2,2
   218d4:	10000426 	beq	r2,zero,218e8 <enc28j60PacketSend+0xbc>
        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
   218d8:	01002804 	movi	r4,160
   218dc:	014007c4 	movi	r5,31
   218e0:	01800204 	movi	r6,8
   218e4:	00211a80 	call	211a8 <enc28j60WriteOp>
    }
}
   218e8:	e037883a 	mov	sp,fp
   218ec:	dfc00117 	ldw	ra,4(sp)
   218f0:	df000017 	ldw	fp,0(sp)
   218f4:	dec00204 	addi	sp,sp,8
   218f8:	f800283a 	ret

000218fc <enc28j60PacketReceive>:
      maxlen  The maximum acceptable length of a retrieved packet.
      packet  Pointer where packet data should be stored.
 Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
-------------------------------------------------------------------*/
alt_u16 enc28j60PacketReceive(alt_u16 maxlen, unsigned char* packet)
{
   218fc:	defffa04 	addi	sp,sp,-24
   21900:	dfc00515 	stw	ra,20(sp)
   21904:	df000415 	stw	fp,16(sp)
   21908:	df000404 	addi	fp,sp,16
   2190c:	2005883a 	mov	r2,r4
   21910:	e17fff15 	stw	r5,-4(fp)
   21914:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int rxstat;
    unsigned int len;

    if(enc28j60Read(EPKTCNT) == 0) {
   21918:	01000e44 	movi	r4,57
   2191c:	00213d00 	call	213d0 <enc28j60Read>
   21920:	10803fcc 	andi	r2,r2,255
   21924:	1000021e 	bne	r2,zero,21930 <enc28j60PacketReceive+0x34>
        return(0);
   21928:	0005883a 	mov	r2,zero
   2192c:	00005a06 	br	21a98 <enc28j60PacketReceive+0x19c>
    }

    // Set the read pointer to the start of the received packet
    enc28j60Write(ERDPTL, (NextPacketPtr));
   21930:	d0a0928b 	ldhu	r2,-32182(gp)
   21934:	10803fcc 	andi	r2,r2,255
   21938:	0009883a 	mov	r4,zero
   2193c:	100b883a 	mov	r5,r2
   21940:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(ERDPTH, (NextPacketPtr) >> 8);
   21944:	d0a0928b 	ldhu	r2,-32182(gp)
   21948:	10bfffcc 	andi	r2,r2,65535
   2194c:	1004d23a 	srli	r2,r2,8
   21950:	10803fcc 	andi	r2,r2,255
   21954:	01000044 	movi	r4,1
   21958:	100b883a 	mov	r5,r2
   2195c:	00214180 	call	21418 <enc28j60Write>

    // read the next packet pointer
    NextPacketPtr = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
   21960:	01000e84 	movi	r4,58
   21964:	000b883a 	mov	r5,zero
   21968:	00211080 	call	21108 <enc28j60ReadOp>
   2196c:	10803fcc 	andi	r2,r2,255
   21970:	d0a0928d 	sth	r2,-32182(gp)
    NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0) << 8;
   21974:	01000e84 	movi	r4,58
   21978:	000b883a 	mov	r5,zero
   2197c:	00211080 	call	21108 <enc28j60ReadOp>
   21980:	10803fcc 	andi	r2,r2,255
   21984:	1004923a 	slli	r2,r2,8
   21988:	1007883a 	mov	r3,r2
   2198c:	d0a0928b 	ldhu	r2,-32182(gp)
   21990:	1884b03a 	or	r2,r3,r2
   21994:	d0a0928d 	sth	r2,-32182(gp)

    // read the packet length (see datasheet page 43)
    len = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
   21998:	01000e84 	movi	r4,58
   2199c:	000b883a 	mov	r5,zero
   219a0:	00211080 	call	21108 <enc28j60ReadOp>
   219a4:	10803fcc 	andi	r2,r2,255
   219a8:	e0bffc15 	stw	r2,-16(fp)
    len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0) << 8;
   219ac:	01000e84 	movi	r4,58
   219b0:	000b883a 	mov	r5,zero
   219b4:	00211080 	call	21108 <enc28j60ReadOp>
   219b8:	10803fcc 	andi	r2,r2,255
   219bc:	1004923a 	slli	r2,r2,8
   219c0:	e0fffc17 	ldw	r3,-16(fp)
   219c4:	1884b03a 	or	r2,r3,r2
   219c8:	e0bffc15 	stw	r2,-16(fp)

    len -= 4; //remove the CRC count
   219cc:	e0bffc17 	ldw	r2,-16(fp)
   219d0:	10bfff04 	addi	r2,r2,-4
   219d4:	e0bffc15 	stw	r2,-16(fp)
    // read the receive status (see datasheet page 43)
    rxstat = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
   219d8:	01000e84 	movi	r4,58
   219dc:	000b883a 	mov	r5,zero
   219e0:	00211080 	call	21108 <enc28j60ReadOp>
   219e4:	10803fcc 	andi	r2,r2,255
   219e8:	e0bffd15 	stw	r2,-12(fp)
    rxstat |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0) << 8;
   219ec:	01000e84 	movi	r4,58
   219f0:	000b883a 	mov	r5,zero
   219f4:	00211080 	call	21108 <enc28j60ReadOp>
   219f8:	10803fcc 	andi	r2,r2,255
   219fc:	1004923a 	slli	r2,r2,8
   21a00:	e0fffd17 	ldw	r3,-12(fp)
   21a04:	1884b03a 	or	r2,r3,r2
   21a08:	e0bffd15 	stw	r2,-12(fp)
    // limit retrieve length
    if(len > maxlen - 1) {
   21a0c:	e0bffe0b 	ldhu	r2,-8(fp)
   21a10:	10bfffc4 	addi	r2,r2,-1
   21a14:	1007883a 	mov	r3,r2
   21a18:	e0bffc17 	ldw	r2,-16(fp)
   21a1c:	1880032e 	bgeu	r3,r2,21a2c <enc28j60PacketReceive+0x130>
        len = maxlen - 1;
   21a20:	e0bffe0b 	ldhu	r2,-8(fp)
   21a24:	10bfffc4 	addi	r2,r2,-1
   21a28:	e0bffc15 	stw	r2,-16(fp)
    }

    // check CRC and symbol errors (see datasheet page 44, table 7-3):
    // The ERXFCON.CRCEN is set by default. Normally we should not
    // need to check this.
    if((rxstat & 0x80) == 0) {
   21a2c:	e0bffd17 	ldw	r2,-12(fp)
   21a30:	1080200c 	andi	r2,r2,128
   21a34:	1000021e 	bne	r2,zero,21a40 <enc28j60PacketReceive+0x144>
        // invalid
        len = 0;
   21a38:	e03ffc15 	stw	zero,-16(fp)
   21a3c:	00000506 	br	21a54 <enc28j60PacketReceive+0x158>
    }
    else {
        // copy the packet from the receive buffer
        enc28j60ReadBuffer(len, packet);
   21a40:	e0bffc17 	ldw	r2,-16(fp)
   21a44:	10bfffcc 	andi	r2,r2,65535
   21a48:	1009883a 	mov	r4,r2
   21a4c:	e17fff17 	ldw	r5,-4(fp)
   21a50:	00212340 	call	21234 <enc28j60ReadBuffer>
    }
    // Move the RX read pointer to the start of the next received packet
    // This frees the memory we just read out
    enc28j60Write(ERXRDPTL, (NextPacketPtr));
   21a54:	d0a0928b 	ldhu	r2,-32182(gp)
   21a58:	10803fcc 	andi	r2,r2,255
   21a5c:	01000304 	movi	r4,12
   21a60:	100b883a 	mov	r5,r2
   21a64:	00214180 	call	21418 <enc28j60Write>
    enc28j60Write(ERXRDPTH, (NextPacketPtr) >> 8);
   21a68:	d0a0928b 	ldhu	r2,-32182(gp)
   21a6c:	10bfffcc 	andi	r2,r2,65535
   21a70:	1004d23a 	srli	r2,r2,8
   21a74:	10803fcc 	andi	r2,r2,255
   21a78:	01000344 	movi	r4,13
   21a7c:	100b883a 	mov	r5,r2
   21a80:	00214180 	call	21418 <enc28j60Write>

    // decrement the packet counter indicate we are done with this packet
    enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
   21a84:	01002004 	movi	r4,128
   21a88:	01400784 	movi	r5,30
   21a8c:	01801004 	movi	r6,64
   21a90:	00211a80 	call	211a8 <enc28j60WriteOp>
    return(len);
   21a94:	e0bffc17 	ldw	r2,-16(fp)
}
   21a98:	e037883a 	mov	sp,fp
   21a9c:	dfc00117 	ldw	ra,4(sp)
   21aa0:	df000017 	ldw	fp,0(sp)
   21aa4:	dec00204 	addi	sp,sp,8
   21aa8:	f800283a 	ret

00021aac <readAddr>:
//______________________________________________________________________________
/**
 * Read the address of the selected memory cell.
 */
unsigned char readAddr()
{
   21aac:	deffff04 	addi	sp,sp,-4
   21ab0:	df000015 	stw	fp,0(sp)
   21ab4:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_ADDR_BASE);
   21ab8:	00862c04 	movi	r2,6320
   21abc:	10800037 	ldwio	r2,0(r2)
}
   21ac0:	e037883a 	mov	sp,fp
   21ac4:	df000017 	ldw	fp,0(sp)
   21ac8:	dec00104 	addi	sp,sp,4
   21acc:	f800283a 	ret

00021ad0 <readData>:
//______________________________________________________________________________
/**
 * Read the 8-bit data from the read register.
 */
unsigned char readData()
{
   21ad0:	deffff04 	addi	sp,sp,-4
   21ad4:	df000015 	stw	fp,0(sp)
   21ad8:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_RDATA_BASE);
   21adc:	00862804 	movi	r2,6304
   21ae0:	10800037 	ldwio	r2,0(r2)
}
   21ae4:	e037883a 	mov	sp,fp
   21ae8:	df000017 	ldw	fp,0(sp)
   21aec:	dec00104 	addi	sp,sp,4
   21af0:	f800283a 	ret

00021af4 <clearSignal>:
//______________________________________________________________________________
/**
 * Clear signal.
 */
void clearSignal()
{
   21af4:	deffff04 	addi	sp,sp,-4
   21af8:	df000015 	stw	fp,0(sp)
   21afc:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_SIGNALS_BASE, 0x00);
   21b00:	0007883a 	mov	r3,zero
   21b04:	00862004 	movi	r2,6272
   21b08:	10c00035 	stwio	r3,0(r2)
}
   21b0c:	e037883a 	mov	sp,fp
   21b10:	df000017 	ldw	fp,0(sp)
   21b14:	dec00104 	addi	sp,sp,4
   21b18:	f800283a 	ret

00021b1c <clearAddr>:
//______________________________________________________________________________
/**
 * Set memory cell address to zero.
 */
void clearAddr()
{
   21b1c:	deffff04 	addi	sp,sp,-4
   21b20:	df000015 	stw	fp,0(sp)
   21b24:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_ADDR_BASE, 0x00);
   21b28:	0007883a 	mov	r3,zero
   21b2c:	00862c04 	movi	r2,6320
   21b30:	10c00035 	stwio	r3,0(r2)
}
   21b34:	e037883a 	mov	sp,fp
   21b38:	df000017 	ldw	fp,0(sp)
   21b3c:	dec00104 	addi	sp,sp,4
   21b40:	f800283a 	ret

00021b44 <clearData>:
//______________________________________________________________________________
/**
 * Erase the data in the write register.
 */
void clearData()
{
   21b44:	deffff04 	addi	sp,sp,-4
   21b48:	df000015 	stw	fp,0(sp)
   21b4c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_WDATA_BASE, 0x00);
   21b50:	0007883a 	mov	r3,zero
   21b54:	00862404 	movi	r2,6288
   21b58:	10c00035 	stwio	r3,0(r2)
}
   21b5c:	e037883a 	mov	sp,fp
   21b60:	df000017 	ldw	fp,0(sp)
   21b64:	dec00104 	addi	sp,sp,4
   21b68:	f800283a 	ret

00021b6c <sendSignal>:
/**
 * Send generic signal. Possible signal codes are
 * specified in file constants.h
 */
void sendSignal(unsigned char value)
{
   21b6c:	defffd04 	addi	sp,sp,-12
   21b70:	dfc00215 	stw	ra,8(sp)
   21b74:	df000115 	stw	fp,4(sp)
   21b78:	df000104 	addi	fp,sp,4
   21b7c:	2005883a 	mov	r2,r4
   21b80:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_SIGNALS_BASE, value);
   21b84:	e0ffff03 	ldbu	r3,-4(fp)
   21b88:	00862004 	movi	r2,6272
   21b8c:	10c00035 	stwio	r3,0(r2)
	clearSignal();
   21b90:	0021af40 	call	21af4 <clearSignal>
}
   21b94:	e037883a 	mov	sp,fp
   21b98:	dfc00117 	ldw	ra,4(sp)
   21b9c:	df000017 	ldw	fp,0(sp)
   21ba0:	dec00204 	addi	sp,sp,8
   21ba4:	f800283a 	ret

00021ba8 <sendData>:
//______________________________________________________________________________
/**
 * Send 8-bit data.
 */
void sendData(unsigned char value)
{
   21ba8:	defffd04 	addi	sp,sp,-12
   21bac:	dfc00215 	stw	ra,8(sp)
   21bb0:	df000115 	stw	fp,4(sp)
   21bb4:	df000104 	addi	fp,sp,4
   21bb8:	2005883a 	mov	r2,r4
   21bbc:	e0bfff05 	stb	r2,-4(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_WDATA_BASE, value);
   21bc0:	e0ffff03 	ldbu	r3,-4(fp)
   21bc4:	00862404 	movi	r2,6288
   21bc8:	10c00035 	stwio	r3,0(r2)
    sendSignal(SIGNAL_WRDATA);
   21bcc:	01000204 	movi	r4,8
   21bd0:	0021b6c0 	call	21b6c <sendSignal>
}
   21bd4:	e037883a 	mov	sp,fp
   21bd8:	dfc00117 	ldw	ra,4(sp)
   21bdc:	df000017 	ldw	fp,0(sp)
   21be0:	dec00204 	addi	sp,sp,8
   21be4:	f800283a 	ret

00021be8 <sendData32>:
//______________________________________________________________________________
/**
 * Send 32-bit data.
 */
void sendData32(unsigned int value)
{
   21be8:	defffd04 	addi	sp,sp,-12
   21bec:	dfc00215 	stw	ra,8(sp)
   21bf0:	df000115 	stw	fp,4(sp)
   21bf4:	df000104 	addi	fp,sp,4
   21bf8:	e13fff15 	stw	r4,-4(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(DATA32_BASE, value);
   21bfc:	e0ffff17 	ldw	r3,-4(fp)
   21c00:	00861804 	movi	r2,6240
   21c04:	10c00035 	stwio	r3,0(r2)
    sendSignal(SIGNAL_WRDATA32);
   21c08:	01000804 	movi	r4,32
   21c0c:	0021b6c0 	call	21b6c <sendSignal>
}
   21c10:	e037883a 	mov	sp,fp
   21c14:	dfc00117 	ldw	ra,4(sp)
   21c18:	df000017 	ldw	fp,0(sp)
   21c1c:	dec00204 	addi	sp,sp,8
   21c20:	f800283a 	ret

00021c24 <sendAddr>:
//______________________________________________________________________________
/**
 * Set the memory cell address to be accessed.
 */
void sendAddr(unsigned char value)
{
   21c24:	defffd04 	addi	sp,sp,-12
   21c28:	dfc00215 	stw	ra,8(sp)
   21c2c:	df000115 	stw	fp,4(sp)
   21c30:	df000104 	addi	fp,sp,4
   21c34:	2005883a 	mov	r2,r4
   21c38:	e0bfff05 	stb	r2,-4(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_ADDR_BASE, value);
   21c3c:	e0ffff03 	ldbu	r3,-4(fp)
   21c40:	00862c04 	movi	r2,6320
   21c44:	10c00035 	stwio	r3,0(r2)
    sendSignal(SIGNAL_WRADDR);
   21c48:	01000044 	movi	r4,1
   21c4c:	0021b6c0 	call	21b6c <sendSignal>
}
   21c50:	e037883a 	mov	sp,fp
   21c54:	dfc00117 	ldw	ra,4(sp)
   21c58:	df000017 	ldw	fp,0(sp)
   21c5c:	dec00204 	addi	sp,sp,8
   21c60:	f800283a 	ret

00021c64 <readCounter>:
//______________________________________________________________________________
/**
 * Read particular counter channel. Returns the number of counted pulses.
 */
unsigned int readCounter(unsigned char channel)
{
   21c64:	defffe04 	addi	sp,sp,-8
   21c68:	df000115 	stw	fp,4(sp)
   21c6c:	df000104 	addi	fp,sp,4
   21c70:	2005883a 	mov	r2,r4
   21c74:	e0bfff05 	stb	r2,-4(fp)
	switch(channel){
   21c78:	e0bfff03 	ldbu	r2,-4(fp)
   21c7c:	10c000a0 	cmpeqi	r3,r2,2
   21c80:	18000d1e 	bne	r3,zero,21cb8 <readCounter+0x54>
   21c84:	10c000c8 	cmpgei	r3,r2,3
   21c88:	1800031e 	bne	r3,zero,21c98 <readCounter+0x34>
   21c8c:	10800060 	cmpeqi	r2,r2,1
   21c90:	1000061e 	bne	r2,zero,21cac <readCounter+0x48>
   21c94:	00001106 	br	21cdc <readCounter+0x78>
   21c98:	10c000e0 	cmpeqi	r3,r2,3
   21c9c:	1800091e 	bne	r3,zero,21cc4 <readCounter+0x60>
   21ca0:	10800120 	cmpeqi	r2,r2,4
   21ca4:	10000a1e 	bne	r2,zero,21cd0 <readCounter+0x6c>
   21ca8:	00000c06 	br	21cdc <readCounter+0x78>
	case 1:
		return IORD_ALTERA_AVALON_PIO_DATA(PIO_COUNT_BASE);
   21cac:	00863004 	movi	r2,6336
   21cb0:	10800037 	ldwio	r2,0(r2)
   21cb4:	00000b06 	br	21ce4 <readCounter+0x80>
		break;
	case 2:
		return IORD_ALTERA_AVALON_PIO_DATA(PIO_COUNT2_BASE);
   21cb8:	00861004 	movi	r2,6208
   21cbc:	10800037 	ldwio	r2,0(r2)
   21cc0:	00000806 	br	21ce4 <readCounter+0x80>
		break;
	case 3:
		return IORD_ALTERA_AVALON_PIO_DATA(PIO_COUNT3_BASE);
   21cc4:	00860c04 	movi	r2,6192
   21cc8:	10800037 	ldwio	r2,0(r2)
   21ccc:	00000506 	br	21ce4 <readCounter+0x80>
		break;
	case 4:
		return IORD_ALTERA_AVALON_PIO_DATA(PIO_COUNT4_BASE);
   21cd0:	00860804 	movi	r2,6176
   21cd4:	10800037 	ldwio	r2,0(r2)
   21cd8:	00000206 	br	21ce4 <readCounter+0x80>
		break;
	default:
		return IORD_ALTERA_AVALON_PIO_DATA(PIO_COUNT_BASE);
   21cdc:	00863004 	movi	r2,6336
   21ce0:	10800037 	ldwio	r2,0(r2)
	}
}
   21ce4:	e037883a 	mov	sp,fp
   21ce8:	df000017 	ldw	fp,0(sp)
   21cec:	dec00104 	addi	sp,sp,4
   21cf0:	f800283a 	ret

00021cf4 <readDAC>:
//______________________________________________________________________________
/**
 * 		Read DAC code from memory.
 */
void readDAC(unsigned short *dac, unsigned char *cAddr)
{
   21cf4:	defffb04 	addi	sp,sp,-20
   21cf8:	dfc00415 	stw	ra,16(sp)
   21cfc:	df000315 	stw	fp,12(sp)
   21d00:	dc000215 	stw	r16,8(sp)
   21d04:	df000204 	addi	fp,sp,8
   21d08:	e13ffe15 	stw	r4,-8(fp)
   21d0c:	e17fff15 	stw	r5,-4(fp)
    *dac ^= *dac;
   21d10:	e0bffe17 	ldw	r2,-8(fp)
   21d14:	1000000d 	sth	zero,0(r2)

    sendAddr(DAC_DATA1_ADDR);
   21d18:	01000904 	movi	r4,36
   21d1c:	0021c240 	call	21c24 <sendAddr>
    _Delay(delay);
   21d20:	d0a00517 	ldw	r2,-32748(gp)
   21d24:	1009883a 	mov	r4,r2
   21d28:	002102c0 	call	2102c <_Delay>
    *dac |= readData();
   21d2c:	e0bffe17 	ldw	r2,-8(fp)
   21d30:	1400000b 	ldhu	r16,0(r2)
   21d34:	0021ad00 	call	21ad0 <readData>
   21d38:	10803fcc 	andi	r2,r2,255
   21d3c:	8084b03a 	or	r2,r16,r2
   21d40:	1007883a 	mov	r3,r2
   21d44:	e0bffe17 	ldw	r2,-8(fp)
   21d48:	10c0000d 	sth	r3,0(r2)
    _Delay(delay);
   21d4c:	d0a00517 	ldw	r2,-32748(gp)
   21d50:	1009883a 	mov	r4,r2
   21d54:	002102c0 	call	2102c <_Delay>
    sendAddr(DAC_DATA2_ADDR);
   21d58:	01000944 	movi	r4,37
   21d5c:	0021c240 	call	21c24 <sendAddr>
    _Delay(delay);
   21d60:	d0a00517 	ldw	r2,-32748(gp)
   21d64:	1009883a 	mov	r4,r2
   21d68:	002102c0 	call	2102c <_Delay>
    *dac |= (readData()<<8);
   21d6c:	e0bffe17 	ldw	r2,-8(fp)
   21d70:	1080000b 	ldhu	r2,0(r2)
   21d74:	1021883a 	mov	r16,r2
   21d78:	0021ad00 	call	21ad0 <readData>
   21d7c:	10803fcc 	andi	r2,r2,255
   21d80:	1004923a 	slli	r2,r2,8
   21d84:	8084b03a 	or	r2,r16,r2
   21d88:	1007883a 	mov	r3,r2
   21d8c:	e0bffe17 	ldw	r2,-8(fp)
   21d90:	10c0000d 	sth	r3,0(r2)
    _Delay(delay);
   21d94:	d0a00517 	ldw	r2,-32748(gp)
   21d98:	1009883a 	mov	r4,r2
   21d9c:	002102c0 	call	2102c <_Delay>

    sendAddr(*cAddr);
   21da0:	e0bfff17 	ldw	r2,-4(fp)
   21da4:	10800003 	ldbu	r2,0(r2)
   21da8:	10803fcc 	andi	r2,r2,255
   21dac:	1009883a 	mov	r4,r2
   21db0:	0021c240 	call	21c24 <sendAddr>
}
   21db4:	e037883a 	mov	sp,fp
   21db8:	dfc00217 	ldw	ra,8(sp)
   21dbc:	df000117 	ldw	fp,4(sp)
   21dc0:	dc000017 	ldw	r16,0(sp)
   21dc4:	dec00304 	addi	sp,sp,12
   21dc8:	f800283a 	ret

00021dcc <resetDAC>:
//______________________________________________________________________________
/**
 * 		Reset all DAC channels to initial state.
 */
void resetDAC()
{
   21dcc:	defffe04 	addi	sp,sp,-8
   21dd0:	dfc00115 	stw	ra,4(sp)
   21dd4:	df000015 	stw	fp,0(sp)
   21dd8:	d839883a 	mov	fp,sp
	sendAddr(DAC_CMD_ADDR);
   21ddc:	010008c4 	movi	r4,35
   21de0:	0021c240 	call	21c24 <sendAddr>
	_Delay(delay);
   21de4:	d0a00517 	ldw	r2,-32748(gp)
   21de8:	1009883a 	mov	r4,r2
   21dec:	002102c0 	call	2102c <_Delay>
	sendData(0x01);
   21df0:	01000044 	movi	r4,1
   21df4:	0021ba80 	call	21ba8 <sendData>
	_Delay(delay);
   21df8:	d0a00517 	ldw	r2,-32748(gp)
   21dfc:	1009883a 	mov	r4,r2
   21e00:	002102c0 	call	2102c <_Delay>
}
   21e04:	e037883a 	mov	sp,fp
   21e08:	dfc00117 	ldw	ra,4(sp)
   21e0c:	df000017 	ldw	fp,0(sp)
   21e10:	dec00204 	addi	sp,sp,8
   21e14:	f800283a 	ret

00021e18 <initDACChannel>:
//______________________________________________________________________________
/**
 * 		Initialize specified DAC channel with value code.
 */
void initDACChannel(unsigned char ch, unsigned short value)
{
   21e18:	defffc04 	addi	sp,sp,-16
   21e1c:	dfc00315 	stw	ra,12(sp)
   21e20:	df000215 	stw	fp,8(sp)
   21e24:	df000204 	addi	fp,sp,8
   21e28:	2007883a 	mov	r3,r4
   21e2c:	2805883a 	mov	r2,r5
   21e30:	e0fffe05 	stb	r3,-8(fp)
   21e34:	e0bfff0d 	sth	r2,-4(fp)
	/*sendAddr(DAC_DATA32_ADDR);
	_Delay(delay);
	sendData32(value | 0x01 << (0x0f-ch));
	_Delay(delay);*/
	sendAddr(DAC_DATA2_ADDR);
   21e38:	01000944 	movi	r4,37
   21e3c:	0021c240 	call	21c24 <sendAddr>
	_Delay(delay);
   21e40:	d0a00517 	ldw	r2,-32748(gp)
   21e44:	1009883a 	mov	r4,r2
   21e48:	002102c0 	call	2102c <_Delay>
	sendData((value >> 8)|(0x01<<(0x07-ch)));
   21e4c:	e0bfff0b 	ldhu	r2,-4(fp)
   21e50:	1004d23a 	srli	r2,r2,8
   21e54:	1007883a 	mov	r3,r2
   21e58:	e0bffe03 	ldbu	r2,-8(fp)
   21e5c:	010001c4 	movi	r4,7
   21e60:	2085c83a 	sub	r2,r4,r2
   21e64:	01000044 	movi	r4,1
   21e68:	2084983a 	sll	r2,r4,r2
   21e6c:	1884b03a 	or	r2,r3,r2
   21e70:	10803fcc 	andi	r2,r2,255
   21e74:	1009883a 	mov	r4,r2
   21e78:	0021ba80 	call	21ba8 <sendData>
	_Delay(delay);
   21e7c:	d0a00517 	ldw	r2,-32748(gp)
   21e80:	1009883a 	mov	r4,r2
   21e84:	002102c0 	call	2102c <_Delay>
	sendAddr(DAC_DATA1_ADDR);
   21e88:	01000904 	movi	r4,36
   21e8c:	0021c240 	call	21c24 <sendAddr>
	_Delay(delay);
   21e90:	d0a00517 	ldw	r2,-32748(gp)
   21e94:	1009883a 	mov	r4,r2
   21e98:	002102c0 	call	2102c <_Delay>
	sendData(value);
   21e9c:	e0bfff0b 	ldhu	r2,-4(fp)
   21ea0:	10803fcc 	andi	r2,r2,255
   21ea4:	1009883a 	mov	r4,r2
   21ea8:	0021ba80 	call	21ba8 <sendData>
	_Delay(delay);
   21eac:	d0a00517 	ldw	r2,-32748(gp)
   21eb0:	1009883a 	mov	r4,r2
   21eb4:	002102c0 	call	2102c <_Delay>
}
   21eb8:	e037883a 	mov	sp,fp
   21ebc:	dfc00117 	ldw	ra,4(sp)
   21ec0:	df000017 	ldw	fp,0(sp)
   21ec4:	dec00204 	addi	sp,sp,8
   21ec8:	f800283a 	ret

00021ecc <initDAC>:
//______________________________________________________________________________
/**
 * 		Initialize DAC channels.
 */
void initDAC(unsigned char *channels, unsigned short *value)
{
   21ecc:	defffb04 	addi	sp,sp,-20
   21ed0:	dfc00415 	stw	ra,16(sp)
   21ed4:	df000315 	stw	fp,12(sp)
   21ed8:	df000304 	addi	fp,sp,12
   21edc:	e13ffe15 	stw	r4,-8(fp)
   21ee0:	e17fff15 	stw	r5,-4(fp)
	resetDAC();
   21ee4:	0021dcc0 	call	21dcc <resetDAC>
	if (channels) {
   21ee8:	e0bffe17 	ldw	r2,-8(fp)
   21eec:	10001b26 	beq	r2,zero,21f5c <initDAC+0x90>
		unsigned char i;
		for (i=0; i<4; i++){
   21ef0:	e03ffd05 	stb	zero,-12(fp)
   21ef4:	00001606 	br	21f50 <initDAC+0x84>
			if (! ((*channels)<<i & 0x08) ) continue;
   21ef8:	e0bffe17 	ldw	r2,-8(fp)
   21efc:	10800003 	ldbu	r2,0(r2)
   21f00:	10c03fcc 	andi	r3,r2,255
   21f04:	e0bffd03 	ldbu	r2,-12(fp)
   21f08:	1884983a 	sll	r2,r3,r2
   21f0c:	1080020c 	andi	r2,r2,8
   21f10:	10000b26 	beq	r2,zero,21f40 <initDAC+0x74>
			initDACChannel(i, *(value+i));
   21f14:	e0fffd03 	ldbu	r3,-12(fp)
   21f18:	e0bffd03 	ldbu	r2,-12(fp)
   21f1c:	1085883a 	add	r2,r2,r2
   21f20:	e13fff17 	ldw	r4,-4(fp)
   21f24:	2085883a 	add	r2,r4,r2
   21f28:	1080000b 	ldhu	r2,0(r2)
   21f2c:	10bfffcc 	andi	r2,r2,65535
   21f30:	1809883a 	mov	r4,r3
   21f34:	100b883a 	mov	r5,r2
   21f38:	0021e180 	call	21e18 <initDACChannel>
   21f3c:	00000106 	br	21f44 <initDAC+0x78>
{
	resetDAC();
	if (channels) {
		unsigned char i;
		for (i=0; i<4; i++){
			if (! ((*channels)<<i & 0x08) ) continue;
   21f40:	0001883a 	nop
void initDAC(unsigned char *channels, unsigned short *value)
{
	resetDAC();
	if (channels) {
		unsigned char i;
		for (i=0; i<4; i++){
   21f44:	e0bffd03 	ldbu	r2,-12(fp)
   21f48:	10800044 	addi	r2,r2,1
   21f4c:	e0bffd05 	stb	r2,-12(fp)
   21f50:	e0bffd03 	ldbu	r2,-12(fp)
   21f54:	10800130 	cmpltui	r2,r2,4
   21f58:	103fe71e 	bne	r2,zero,21ef8 <initDAC+0x2c>
			if (! ((*channels)<<i & 0x08) ) continue;
			initDACChannel(i, *(value+i));
		}
	}
}
   21f5c:	e037883a 	mov	sp,fp
   21f60:	dfc00117 	ldw	ra,4(sp)
   21f64:	df000017 	ldw	fp,0(sp)
   21f68:	dec00204 	addi	sp,sp,8
   21f6c:	f800283a 	ret

00021f70 <sendCalibDAC>:
/**
 * 		Write DAC calibration code.
 */
void sendCalibDAC(unsigned char *channels, unsigned short *dac,
		unsigned char *cAddr)
{
   21f70:	defffa04 	addi	sp,sp,-24
   21f74:	dfc00515 	stw	ra,20(sp)
   21f78:	df000415 	stw	fp,16(sp)
   21f7c:	df000404 	addi	fp,sp,16
   21f80:	e13ffd15 	stw	r4,-12(fp)
   21f84:	e17ffe15 	stw	r5,-8(fp)
   21f88:	e1bfff15 	stw	r6,-4(fp)
	unsigned char i;
	unsigned char addr = DAC1_CALIBDATA1_ADDR;
   21f8c:	00800084 	movi	r2,2
   21f90:	e0bffc45 	stb	r2,-15(fp)
	for (i=0; i<4; i++){
   21f94:	e03ffc05 	stb	zero,-16(fp)
   21f98:	00003b06 	br	22088 <sendCalibDAC+0x118>
		if (! ((*channels)<<i & 0x08) ) continue;
   21f9c:	e0bffd17 	ldw	r2,-12(fp)
   21fa0:	10800003 	ldbu	r2,0(r2)
   21fa4:	10c03fcc 	andi	r3,r2,255
   21fa8:	e0bffc03 	ldbu	r2,-16(fp)
   21fac:	1884983a 	sll	r2,r3,r2
   21fb0:	1080020c 	andi	r2,r2,8
   21fb4:	10003026 	beq	r2,zero,22078 <sendCalibDAC+0x108>
		sendAddr(addr+2*i);
   21fb8:	e0bffc03 	ldbu	r2,-16(fp)
   21fbc:	1085883a 	add	r2,r2,r2
   21fc0:	1007883a 	mov	r3,r2
   21fc4:	e0bffc43 	ldbu	r2,-15(fp)
   21fc8:	1885883a 	add	r2,r3,r2
   21fcc:	10803fcc 	andi	r2,r2,255
   21fd0:	1009883a 	mov	r4,r2
   21fd4:	0021c240 	call	21c24 <sendAddr>
		_Delay(delay);
   21fd8:	d0a00517 	ldw	r2,-32748(gp)
   21fdc:	1009883a 	mov	r4,r2
   21fe0:	002102c0 	call	2102c <_Delay>
		sendData(*(dac+i));
   21fe4:	e0bffc03 	ldbu	r2,-16(fp)
   21fe8:	1085883a 	add	r2,r2,r2
   21fec:	e0fffe17 	ldw	r3,-8(fp)
   21ff0:	1885883a 	add	r2,r3,r2
   21ff4:	1080000b 	ldhu	r2,0(r2)
   21ff8:	10803fcc 	andi	r2,r2,255
   21ffc:	1009883a 	mov	r4,r2
   22000:	0021ba80 	call	21ba8 <sendData>
		_Delay(delay);
   22004:	d0a00517 	ldw	r2,-32748(gp)
   22008:	1009883a 	mov	r4,r2
   2200c:	002102c0 	call	2102c <_Delay>
		sendAddr(addr+2*i+1);
   22010:	e0bffc03 	ldbu	r2,-16(fp)
   22014:	1085883a 	add	r2,r2,r2
   22018:	1007883a 	mov	r3,r2
   2201c:	e0bffc43 	ldbu	r2,-15(fp)
   22020:	1885883a 	add	r2,r3,r2
   22024:	10800044 	addi	r2,r2,1
   22028:	10803fcc 	andi	r2,r2,255
   2202c:	1009883a 	mov	r4,r2
   22030:	0021c240 	call	21c24 <sendAddr>
		_Delay(delay);
   22034:	d0a00517 	ldw	r2,-32748(gp)
   22038:	1009883a 	mov	r4,r2
   2203c:	002102c0 	call	2102c <_Delay>
		sendData(*(dac+i)>>8);
   22040:	e0bffc03 	ldbu	r2,-16(fp)
   22044:	1085883a 	add	r2,r2,r2
   22048:	e0fffe17 	ldw	r3,-8(fp)
   2204c:	1885883a 	add	r2,r3,r2
   22050:	1080000b 	ldhu	r2,0(r2)
   22054:	10bfffcc 	andi	r2,r2,65535
   22058:	1004d23a 	srli	r2,r2,8
   2205c:	10803fcc 	andi	r2,r2,255
   22060:	1009883a 	mov	r4,r2
   22064:	0021ba80 	call	21ba8 <sendData>
		_Delay(delay);
   22068:	d0a00517 	ldw	r2,-32748(gp)
   2206c:	1009883a 	mov	r4,r2
   22070:	002102c0 	call	2102c <_Delay>
   22074:	00000106 	br	2207c <sendCalibDAC+0x10c>
		unsigned char *cAddr)
{
	unsigned char i;
	unsigned char addr = DAC1_CALIBDATA1_ADDR;
	for (i=0; i<4; i++){
		if (! ((*channels)<<i & 0x08) ) continue;
   22078:	0001883a 	nop
void sendCalibDAC(unsigned char *channels, unsigned short *dac,
		unsigned char *cAddr)
{
	unsigned char i;
	unsigned char addr = DAC1_CALIBDATA1_ADDR;
	for (i=0; i<4; i++){
   2207c:	e0bffc03 	ldbu	r2,-16(fp)
   22080:	10800044 	addi	r2,r2,1
   22084:	e0bffc05 	stb	r2,-16(fp)
   22088:	e0bffc03 	ldbu	r2,-16(fp)
   2208c:	10800130 	cmpltui	r2,r2,4
   22090:	103fc21e 	bne	r2,zero,21f9c <sendCalibDAC+0x2c>
		sendAddr(addr+2*i+1);
		_Delay(delay);
		sendData(*(dac+i)>>8);
		_Delay(delay);
	}
	sendAddr(*cAddr);
   22094:	e0bfff17 	ldw	r2,-4(fp)
   22098:	10800003 	ldbu	r2,0(r2)
   2209c:	10803fcc 	andi	r2,r2,255
   220a0:	1009883a 	mov	r4,r2
   220a4:	0021c240 	call	21c24 <sendAddr>
}
   220a8:	e037883a 	mov	sp,fp
   220ac:	dfc00117 	ldw	ra,4(sp)
   220b0:	df000017 	ldw	fp,0(sp)
   220b4:	dec00204 	addi	sp,sp,8
   220b8:	f800283a 	ret

000220bc <resetCounter>:
//______________________________________________________________________________
/**
 * 		Reset counter to initial state.
 */
void resetCounter()
{
   220bc:	defffe04 	addi	sp,sp,-8
   220c0:	dfc00115 	stw	ra,4(sp)
   220c4:	df000015 	stw	fp,0(sp)
   220c8:	d839883a 	mov	fp,sp
	sendAddr(CNT_CMD_ADDR);
   220cc:	01000984 	movi	r4,38
   220d0:	0021c240 	call	21c24 <sendAddr>
	_Delay(delay);
   220d4:	d0a00517 	ldw	r2,-32748(gp)
   220d8:	1009883a 	mov	r4,r2
   220dc:	002102c0 	call	2102c <_Delay>
	sendData(0x01);
   220e0:	01000044 	movi	r4,1
   220e4:	0021ba80 	call	21ba8 <sendData>
	_Delay(delay);
   220e8:	d0a00517 	ldw	r2,-32748(gp)
   220ec:	1009883a 	mov	r4,r2
   220f0:	002102c0 	call	2102c <_Delay>
}
   220f4:	e037883a 	mov	sp,fp
   220f8:	dfc00117 	ldw	ra,4(sp)
   220fc:	df000017 	ldw	fp,0(sp)
   22100:	dec00204 	addi	sp,sp,8
   22104:	f800283a 	ret

00022108 <initCounter>:
//______________________________________________________________________________
/**
 * 		Initialize counter.
 */
void initCounter(unsigned char *channels, unsigned char *time)
{
   22108:	defffb04 	addi	sp,sp,-20
   2210c:	dfc00415 	stw	ra,16(sp)
   22110:	df000315 	stw	fp,12(sp)
   22114:	df000304 	addi	fp,sp,12
   22118:	e13ffe15 	stw	r4,-8(fp)
   2211c:	e17fff15 	stw	r5,-4(fp)
	resetCounter();
   22120:	00220bc0 	call	220bc <resetCounter>
	unsigned char cmd = ((*channels) << 4);// | ( readData() & 0x0f );
   22124:	e0bffe17 	ldw	r2,-8(fp)
   22128:	10800003 	ldbu	r2,0(r2)
   2212c:	1004913a 	slli	r2,r2,4
   22130:	e0bffd05 	stb	r2,-12(fp)
	sendData(cmd);
   22134:	e0bffd03 	ldbu	r2,-12(fp)
   22138:	1009883a 	mov	r4,r2
   2213c:	0021ba80 	call	21ba8 <sendData>
	_Delay(delay);
   22140:	d0a00517 	ldw	r2,-32748(gp)
   22144:	1009883a 	mov	r4,r2
   22148:	002102c0 	call	2102c <_Delay>
	sendAddr(CNT_STATUS_ADDR);
   2214c:	010009c4 	movi	r4,39
   22150:	0021c240 	call	21c24 <sendAddr>
	_Delay(delay);
   22154:	d0a00517 	ldw	r2,-32748(gp)
   22158:	1009883a 	mov	r4,r2
   2215c:	002102c0 	call	2102c <_Delay>
	sendData(*time);
   22160:	e0bfff17 	ldw	r2,-4(fp)
   22164:	10800003 	ldbu	r2,0(r2)
   22168:	10803fcc 	andi	r2,r2,255
   2216c:	1009883a 	mov	r4,r2
   22170:	0021ba80 	call	21ba8 <sendData>
	_Delay(delay);
   22174:	d0a00517 	ldw	r2,-32748(gp)
   22178:	1009883a 	mov	r4,r2
   2217c:	002102c0 	call	2102c <_Delay>
}
   22180:	e037883a 	mov	sp,fp
   22184:	dfc00117 	ldw	ra,4(sp)
   22188:	df000017 	ldw	fp,0(sp)
   2218c:	dec00204 	addi	sp,sp,8
   22190:	f800283a 	ret

00022194 <sendRun>:
/**
 *		Start counting
 */
void sendRun(unsigned char channels, unsigned char cTime,
		unsigned char *cAddr, unsigned short *value)
{
   22194:	defffa04 	addi	sp,sp,-24
   22198:	dfc00515 	stw	ra,20(sp)
   2219c:	df000415 	stw	fp,16(sp)
   221a0:	df000404 	addi	fp,sp,16
   221a4:	2007883a 	mov	r3,r4
   221a8:	2805883a 	mov	r2,r5
   221ac:	e1bffe15 	stw	r6,-8(fp)
   221b0:	e1ffff15 	stw	r7,-4(fp)
   221b4:	e0fffc05 	stb	r3,-16(fp)
   221b8:	e0bffd05 	stb	r2,-12(fp)
    // write dac code
	initDAC(&channels, value);
   221bc:	e13ffc04 	addi	r4,fp,-16
   221c0:	e17fff17 	ldw	r5,-4(fp)
   221c4:	0021ecc0 	call	21ecc <initDAC>

    // write counting time
	initCounter(&channels, &cTime);
   221c8:	e0bffd04 	addi	r2,fp,-12
   221cc:	e13ffc04 	addi	r4,fp,-16
   221d0:	100b883a 	mov	r5,r2
   221d4:	00221080 	call	22108 <initCounter>

	sendAddr(*cAddr);
   221d8:	e0bffe17 	ldw	r2,-8(fp)
   221dc:	10800003 	ldbu	r2,0(r2)
   221e0:	10803fcc 	andi	r2,r2,255
   221e4:	1009883a 	mov	r4,r2
   221e8:	0021c240 	call	21c24 <sendAddr>
    sendSignal(SIGNAL_CNT);
   221ec:	01000404 	movi	r4,16
   221f0:	0021b6c0 	call	21b6c <sendSignal>
}
   221f4:	e037883a 	mov	sp,fp
   221f8:	dfc00117 	ldw	ra,4(sp)
   221fc:	df000017 	ldw	fp,0(sp)
   22200:	dec00204 	addi	sp,sp,8
   22204:	f800283a 	ret

00022208 <sendFreq>:
//______________________________________________________________________________
/**
 *		Set trigger pulses frequency.
 */
void sendFreq(unsigned int *freqInt, unsigned char *cAddr)
{
   22208:	defffc04 	addi	sp,sp,-16
   2220c:	dfc00315 	stw	ra,12(sp)
   22210:	df000215 	stw	fp,8(sp)
   22214:	df000204 	addi	fp,sp,8
   22218:	e13ffe15 	stw	r4,-8(fp)
   2221c:	e17fff15 	stw	r5,-4(fp)
	sendAddr(GEN_DATA32_ADDR);
   22220:	010014c4 	movi	r4,83
   22224:	0021c240 	call	21c24 <sendAddr>
	_Delay(delay);
   22228:	d0a00517 	ldw	r2,-32748(gp)
   2222c:	1009883a 	mov	r4,r2
   22230:	002102c0 	call	2102c <_Delay>
    // *freqInt = (1/20*atof(value)*10^(-9)) - 10;
    // if(*freqInt < 0)
    //     *freqInt = 0;
    sendData32(*freqInt);
   22234:	e0bffe17 	ldw	r2,-8(fp)
   22238:	10800017 	ldw	r2,0(r2)
   2223c:	1009883a 	mov	r4,r2
   22240:	0021be80 	call	21be8 <sendData32>
    _Delay(delay);
   22244:	d0a00517 	ldw	r2,-32748(gp)
   22248:	1009883a 	mov	r4,r2
   2224c:	002102c0 	call	2102c <_Delay>

    sendAddr(*cAddr);
   22250:	e0bfff17 	ldw	r2,-4(fp)
   22254:	10800003 	ldbu	r2,0(r2)
   22258:	10803fcc 	andi	r2,r2,255
   2225c:	1009883a 	mov	r4,r2
   22260:	0021c240 	call	21c24 <sendAddr>
}
   22264:	e037883a 	mov	sp,fp
   22268:	dfc00117 	ldw	ra,4(sp)
   2226c:	df000017 	ldw	fp,0(sp)
   22270:	dec00204 	addi	sp,sp,8
   22274:	f800283a 	ret

00022278 <sendGate>:
//______________________________________________________________________________
/**
 *		Set gate.
 */
void sendGate(unsigned char *cGate, unsigned char *cAddr)
{
   22278:	defffc04 	addi	sp,sp,-16
   2227c:	dfc00315 	stw	ra,12(sp)
   22280:	df000215 	stw	fp,8(sp)
   22284:	df000204 	addi	fp,sp,8
   22288:	e13ffe15 	stw	r4,-8(fp)
   2228c:	e17fff15 	stw	r5,-4(fp)
	sendAddr(GATE_DATA_ADDR);
   22290:	01000884 	movi	r4,34
   22294:	0021c240 	call	21c24 <sendAddr>
	_Delay(delay);
   22298:	d0a00517 	ldw	r2,-32748(gp)
   2229c:	1009883a 	mov	r4,r2
   222a0:	002102c0 	call	2102c <_Delay>

    sendData(*cGate);
   222a4:	e0bffe17 	ldw	r2,-8(fp)
   222a8:	10800003 	ldbu	r2,0(r2)
   222ac:	10803fcc 	andi	r2,r2,255
   222b0:	1009883a 	mov	r4,r2
   222b4:	0021ba80 	call	21ba8 <sendData>
    _Delay(delay);
   222b8:	d0a00517 	ldw	r2,-32748(gp)
   222bc:	1009883a 	mov	r4,r2
   222c0:	002102c0 	call	2102c <_Delay>

    sendAddr(*cAddr);
   222c4:	e0bfff17 	ldw	r2,-4(fp)
   222c8:	10800003 	ldbu	r2,0(r2)
   222cc:	10803fcc 	andi	r2,r2,255
   222d0:	1009883a 	mov	r4,r2
   222d4:	0021c240 	call	21c24 <sendAddr>
}
   222d8:	e037883a 	mov	sp,fp
   222dc:	dfc00117 	ldw	ra,4(sp)
   222e0:	df000017 	ldw	fp,0(sp)
   222e4:	dec00204 	addi	sp,sp,8
   222e8:	f800283a 	ret

000222ec <writeResponse>:
//______________________________________________________________________________
/**
 * 		Make a generic response. Write recieved command code.
 */
void writeResponse(unsigned char code, unsigned char **dataPtr)
{
   222ec:	defffd04 	addi	sp,sp,-12
   222f0:	df000215 	stw	fp,8(sp)
   222f4:	df000204 	addi	fp,sp,8
   222f8:	2005883a 	mov	r2,r4
   222fc:	e17fff15 	stw	r5,-4(fp)
   22300:	e0bffe05 	stb	r2,-8(fp)
	// Write output mark
	*(*dataPtr)++ = MARK_OUT >> 8;
   22304:	e0bfff17 	ldw	r2,-4(fp)
   22308:	10800017 	ldw	r2,0(r2)
   2230c:	00fff784 	movi	r3,-34
   22310:	10c00005 	stb	r3,0(r2)
   22314:	10c00044 	addi	r3,r2,1
   22318:	e0bfff17 	ldw	r2,-4(fp)
   2231c:	10c00015 	stw	r3,0(r2)
	*(*dataPtr)++ = MARK_OUT & 0xff;
   22320:	e0bfff17 	ldw	r2,-4(fp)
   22324:	10800017 	ldw	r2,0(r2)
   22328:	00ffeb44 	movi	r3,-83
   2232c:	10c00005 	stb	r3,0(r2)
   22330:	10c00044 	addi	r3,r2,1
   22334:	e0bfff17 	ldw	r2,-4(fp)
   22338:	10c00015 	stw	r3,0(r2)

	// Write command code
	*(*dataPtr)++ = code;
   2233c:	e0bfff17 	ldw	r2,-4(fp)
   22340:	10800017 	ldw	r2,0(r2)
   22344:	e0fffe03 	ldbu	r3,-8(fp)
   22348:	10c00005 	stb	r3,0(r2)
   2234c:	10c00044 	addi	r3,r2,1
   22350:	e0bfff17 	ldw	r2,-4(fp)
   22354:	10c00015 	stw	r3,0(r2)
}
   22358:	e037883a 	mov	sp,fp
   2235c:	df000017 	ldw	fp,0(sp)
   22360:	dec00104 	addi	sp,sp,4
   22364:	f800283a 	ret

00022368 <writeInt>:
//______________________________________________________________________________
/**
 * 		Write int into the buffer.
 */
void writeInt(unsigned int value, unsigned char **dataPtr)
{
   22368:	defffc04 	addi	sp,sp,-16
   2236c:	df000315 	stw	fp,12(sp)
   22370:	df000304 	addi	fp,sp,12
   22374:	e13ffe15 	stw	r4,-8(fp)
   22378:	e17fff15 	stw	r5,-4(fp)
	char i;
	for  (i=3; i>=0; i--){
   2237c:	008000c4 	movi	r2,3
   22380:	e0bffd05 	stb	r2,-12(fp)
   22384:	00001306 	br	223d4 <writeInt+0x6c>
		**dataPtr 	   = 0;
   22388:	e0bfff17 	ldw	r2,-4(fp)
   2238c:	10800017 	ldw	r2,0(r2)
   22390:	10000005 	stb	zero,0(r2)
		*(*dataPtr)++ |= (value >> (i*8)) & 0xff;
   22394:	e0bfff17 	ldw	r2,-4(fp)
   22398:	10800017 	ldw	r2,0(r2)
   2239c:	1007883a 	mov	r3,r2
   223a0:	19400003 	ldbu	r5,0(r3)
   223a4:	e13ffd07 	ldb	r4,-12(fp)
   223a8:	200890fa 	slli	r4,r4,3
   223ac:	e1bffe17 	ldw	r6,-8(fp)
   223b0:	3108d83a 	srl	r4,r6,r4
   223b4:	2908b03a 	or	r4,r5,r4
   223b8:	19000005 	stb	r4,0(r3)
   223bc:	10c00044 	addi	r3,r2,1
   223c0:	e0bfff17 	ldw	r2,-4(fp)
   223c4:	10c00015 	stw	r3,0(r2)
 * 		Write int into the buffer.
 */
void writeInt(unsigned int value, unsigned char **dataPtr)
{
	char i;
	for  (i=3; i>=0; i--){
   223c8:	e0bffd03 	ldbu	r2,-12(fp)
   223cc:	10bfffc4 	addi	r2,r2,-1
   223d0:	e0bffd05 	stb	r2,-12(fp)
   223d4:	e0bffd07 	ldb	r2,-12(fp)
   223d8:	103feb0e 	bge	r2,zero,22388 <writeInt+0x20>
		**dataPtr 	   = 0;
		*(*dataPtr)++ |= (value >> (i*8)) & 0xff;
	}
}
   223dc:	e037883a 	mov	sp,fp
   223e0:	df000017 	ldw	fp,0(sp)
   223e4:	dec00104 	addi	sp,sp,4
   223e8:	f800283a 	ret

000223ec <makeCharResponse>:
/**
 * Make a response for a command with or without argument and with output value.
 */
int makeCharResponse(unsigned char code, unsigned char value,
		unsigned char *resp)
{
   223ec:	defffa04 	addi	sp,sp,-24
   223f0:	dfc00515 	stw	ra,20(sp)
   223f4:	df000415 	stw	fp,16(sp)
   223f8:	df000404 	addi	fp,sp,16
   223fc:	2007883a 	mov	r3,r4
   22400:	2805883a 	mov	r2,r5
   22404:	e1bfff15 	stw	r6,-4(fp)
   22408:	e0fffd05 	stb	r3,-12(fp)
   2240c:	e0bffe05 	stb	r2,-8(fp)
	unsigned char *dataPtr;
	dataPtr = resp;
   22410:	e0bfff17 	ldw	r2,-4(fp)
   22414:	e0bffc15 	stw	r2,-16(fp)
	writeResponse(code, &dataPtr);
   22418:	e0bffd03 	ldbu	r2,-12(fp)
   2241c:	1009883a 	mov	r4,r2
   22420:	e17ffc04 	addi	r5,fp,-16
   22424:	00222ec0 	call	222ec <writeResponse>
	*dataPtr++ = value;
   22428:	e0bffc17 	ldw	r2,-16(fp)
   2242c:	e0fffe03 	ldbu	r3,-8(fp)
   22430:	10c00005 	stb	r3,0(r2)
   22434:	10800044 	addi	r2,r2,1
   22438:	e0bffc15 	stw	r2,-16(fp)
	return dataPtr-resp;
   2243c:	e0bffc17 	ldw	r2,-16(fp)
   22440:	1007883a 	mov	r3,r2
   22444:	e0bfff17 	ldw	r2,-4(fp)
   22448:	1885c83a 	sub	r2,r3,r2
}
   2244c:	e037883a 	mov	sp,fp
   22450:	dfc00117 	ldw	ra,4(sp)
   22454:	df000017 	ldw	fp,0(sp)
   22458:	dec00204 	addi	sp,sp,8
   2245c:	f800283a 	ret

00022460 <makeIntResponse>:
/**
 * Make a response for a command with or without argument and with output value.
 */
int makeIntResponse(unsigned char code, unsigned char mark, unsigned int value,
		unsigned char *resp)
{
   22460:	defff904 	addi	sp,sp,-28
   22464:	dfc00615 	stw	ra,24(sp)
   22468:	df000515 	stw	fp,20(sp)
   2246c:	df000504 	addi	fp,sp,20
   22470:	2007883a 	mov	r3,r4
   22474:	2805883a 	mov	r2,r5
   22478:	e1bffe15 	stw	r6,-8(fp)
   2247c:	e1ffff15 	stw	r7,-4(fp)
   22480:	e0fffc05 	stb	r3,-16(fp)
   22484:	e0bffd05 	stb	r2,-12(fp)
	unsigned char *dataPtr;
	dataPtr = resp;
   22488:	e0bfff17 	ldw	r2,-4(fp)
   2248c:	e0bffb15 	stw	r2,-20(fp)
	writeResponse(code, &dataPtr);
   22490:	e0bffc03 	ldbu	r2,-16(fp)
   22494:	1009883a 	mov	r4,r2
   22498:	e17ffb04 	addi	r5,fp,-20
   2249c:	00222ec0 	call	222ec <writeResponse>
	*dataPtr++ = mark;
   224a0:	e0bffb17 	ldw	r2,-20(fp)
   224a4:	e0fffd03 	ldbu	r3,-12(fp)
   224a8:	10c00005 	stb	r3,0(r2)
   224ac:	10800044 	addi	r2,r2,1
   224b0:	e0bffb15 	stw	r2,-20(fp)
	writeInt(value, &dataPtr);
   224b4:	e13ffe17 	ldw	r4,-8(fp)
   224b8:	e17ffb04 	addi	r5,fp,-20
   224bc:	00223680 	call	22368 <writeInt>
	return dataPtr-resp;
   224c0:	e0bffb17 	ldw	r2,-20(fp)
   224c4:	1007883a 	mov	r3,r2
   224c8:	e0bfff17 	ldw	r2,-4(fp)
   224cc:	1885c83a 	sub	r2,r3,r2
}
   224d0:	e037883a 	mov	sp,fp
   224d4:	dfc00117 	ldw	ra,4(sp)
   224d8:	df000017 	ldw	fp,0(sp)
   224dc:	dec00204 	addi	sp,sp,8
   224e0:	f800283a 	ret

000224e4 <writeDACValues>:
/**
 * 		Write DAC codes into buffer.
 */
void writeDACValues(unsigned char channels, unsigned short *dac,
		unsigned char **dataPtr)
{
   224e4:	defffb04 	addi	sp,sp,-20
   224e8:	df000415 	stw	fp,16(sp)
   224ec:	df000404 	addi	fp,sp,16
   224f0:	2005883a 	mov	r2,r4
   224f4:	e17ffe15 	stw	r5,-8(fp)
   224f8:	e1bfff15 	stw	r6,-4(fp)
   224fc:	e0bffd05 	stb	r2,-12(fp)
	unsigned char i, tmp;
	unsigned short value;
	tmp = 0;
   22500:	e03ffc45 	stb	zero,-15(fp)

	*(*dataPtr)++ |= channels & 0x0f;
   22504:	e0bfff17 	ldw	r2,-4(fp)
   22508:	10800017 	ldw	r2,0(r2)
   2250c:	1007883a 	mov	r3,r2
   22510:	19000003 	ldbu	r4,0(r3)
   22514:	200b883a 	mov	r5,r4
   22518:	e13ffd03 	ldbu	r4,-12(fp)
   2251c:	210003cc 	andi	r4,r4,15
   22520:	2908b03a 	or	r4,r5,r4
   22524:	19000005 	stb	r4,0(r3)
   22528:	10c00044 	addi	r3,r2,1
   2252c:	e0bfff17 	ldw	r2,-4(fp)
   22530:	10c00015 	stw	r3,0(r2)
	for (i=0; i<4; i++){
   22534:	e03ffc05 	stb	zero,-16(fp)
   22538:	00005506 	br	22690 <writeDACValues+0x1ac>
		if( ! (channels<<i & 0x08) ) continue;
   2253c:	e0fffd03 	ldbu	r3,-12(fp)
   22540:	e0bffc03 	ldbu	r2,-16(fp)
   22544:	1884983a 	sll	r2,r3,r2
   22548:	1080020c 	andi	r2,r2,8
   2254c:	10004c26 	beq	r2,zero,22680 <writeDACValues+0x19c>

		value = *(dac+i) & 0xfff;
   22550:	e0bffc03 	ldbu	r2,-16(fp)
   22554:	1085883a 	add	r2,r2,r2
   22558:	e0fffe17 	ldw	r3,-8(fp)
   2255c:	1885883a 	add	r2,r3,r2
   22560:	1080000b 	ldhu	r2,0(r2)
   22564:	1083ffcc 	andi	r2,r2,4095
   22568:	e0bffc8d 	sth	r2,-14(fp)
		if ( tmp & 0x01 ){
   2256c:	e0bffc43 	ldbu	r2,-15(fp)
   22570:	1080004c 	andi	r2,r2,1
   22574:	10002226 	beq	r2,zero,22600 <writeDACValues+0x11c>
			**dataPtr	&= 0xf0;
   22578:	e0bfff17 	ldw	r2,-4(fp)
   2257c:	10800017 	ldw	r2,0(r2)
   22580:	e0ffff17 	ldw	r3,-4(fp)
   22584:	18c00017 	ldw	r3,0(r3)
   22588:	19000003 	ldbu	r4,0(r3)
   2258c:	00fffc04 	movi	r3,-16
   22590:	20c6703a 	and	r3,r4,r3
   22594:	10c00005 	stb	r3,0(r2)
			*(*dataPtr)++ |= value >> 8;
   22598:	e0bfff17 	ldw	r2,-4(fp)
   2259c:	10800017 	ldw	r2,0(r2)
   225a0:	1007883a 	mov	r3,r2
   225a4:	19400003 	ldbu	r5,0(r3)
   225a8:	e13ffc8b 	ldhu	r4,-14(fp)
   225ac:	2008d23a 	srli	r4,r4,8
   225b0:	2908b03a 	or	r4,r5,r4
   225b4:	19000005 	stb	r4,0(r3)
   225b8:	10c00044 	addi	r3,r2,1
   225bc:	e0bfff17 	ldw	r2,-4(fp)
   225c0:	10c00015 	stw	r3,0(r2)
			**dataPtr	  = 0;
   225c4:	e0bfff17 	ldw	r2,-4(fp)
   225c8:	10800017 	ldw	r2,0(r2)
   225cc:	10000005 	stb	zero,0(r2)
			*(*dataPtr)++ |= value & 0xff;
   225d0:	e0bfff17 	ldw	r2,-4(fp)
   225d4:	10800017 	ldw	r2,0(r2)
   225d8:	1007883a 	mov	r3,r2
   225dc:	19000003 	ldbu	r4,0(r3)
   225e0:	200b883a 	mov	r5,r4
   225e4:	e13ffc8b 	ldhu	r4,-14(fp)
   225e8:	2908b03a 	or	r4,r5,r4
   225ec:	19000005 	stb	r4,0(r3)
   225f0:	10c00044 	addi	r3,r2,1
   225f4:	e0bfff17 	ldw	r2,-4(fp)
   225f8:	10c00015 	stw	r3,0(r2)
   225fc:	00001c06 	br	22670 <writeDACValues+0x18c>
		}
		else {
			**dataPtr 	   = 0;
   22600:	e0bfff17 	ldw	r2,-4(fp)
   22604:	10800017 	ldw	r2,0(r2)
   22608:	10000005 	stb	zero,0(r2)
			*(*dataPtr)++  = value >> 4;
   2260c:	e0bfff17 	ldw	r2,-4(fp)
   22610:	10800017 	ldw	r2,0(r2)
   22614:	e0fffc8b 	ldhu	r3,-14(fp)
   22618:	1806d13a 	srli	r3,r3,4
   2261c:	10c00005 	stb	r3,0(r2)
   22620:	10c00044 	addi	r3,r2,1
   22624:	e0bfff17 	ldw	r2,-4(fp)
   22628:	10c00015 	stw	r3,0(r2)
			**dataPtr	  &= 0x0f;
   2262c:	e0bfff17 	ldw	r2,-4(fp)
   22630:	10800017 	ldw	r2,0(r2)
   22634:	e0ffff17 	ldw	r3,-4(fp)
   22638:	18c00017 	ldw	r3,0(r3)
   2263c:	18c00003 	ldbu	r3,0(r3)
   22640:	18c003cc 	andi	r3,r3,15
   22644:	10c00005 	stb	r3,0(r2)
			**dataPtr	  |= value << 4;
   22648:	e0bfff17 	ldw	r2,-4(fp)
   2264c:	10800017 	ldw	r2,0(r2)
   22650:	e0ffff17 	ldw	r3,-4(fp)
   22654:	18c00017 	ldw	r3,0(r3)
   22658:	18c00003 	ldbu	r3,0(r3)
   2265c:	1809883a 	mov	r4,r3
   22660:	e0fffc8b 	ldhu	r3,-14(fp)
   22664:	1806913a 	slli	r3,r3,4
   22668:	20c6b03a 	or	r3,r4,r3
   2266c:	10c00005 	stb	r3,0(r2)
		}
		tmp++;
   22670:	e0bffc43 	ldbu	r2,-15(fp)
   22674:	10800044 	addi	r2,r2,1
   22678:	e0bffc45 	stb	r2,-15(fp)
   2267c:	00000106 	br	22684 <writeDACValues+0x1a0>
	unsigned short value;
	tmp = 0;

	*(*dataPtr)++ |= channels & 0x0f;
	for (i=0; i<4; i++){
		if( ! (channels<<i & 0x08) ) continue;
   22680:	0001883a 	nop
	unsigned char i, tmp;
	unsigned short value;
	tmp = 0;

	*(*dataPtr)++ |= channels & 0x0f;
	for (i=0; i<4; i++){
   22684:	e0bffc03 	ldbu	r2,-16(fp)
   22688:	10800044 	addi	r2,r2,1
   2268c:	e0bffc05 	stb	r2,-16(fp)
   22690:	e0bffc03 	ldbu	r2,-16(fp)
   22694:	10800130 	cmpltui	r2,r2,4
   22698:	103fa81e 	bne	r2,zero,2253c <writeDACValues+0x58>
			**dataPtr	  &= 0x0f;
			**dataPtr	  |= value << 4;
		}
		tmp++;
	}
	if ( tmp & 0x01 ) (*dataPtr)++;
   2269c:	e0bffc43 	ldbu	r2,-15(fp)
   226a0:	1080004c 	andi	r2,r2,1
   226a4:	10000526 	beq	r2,zero,226bc <writeDACValues+0x1d8>
   226a8:	e0bfff17 	ldw	r2,-4(fp)
   226ac:	10800017 	ldw	r2,0(r2)
   226b0:	10c00044 	addi	r3,r2,1
   226b4:	e0bfff17 	ldw	r2,-4(fp)
   226b8:	10c00015 	stw	r3,0(r2)
}
   226bc:	e037883a 	mov	sp,fp
   226c0:	df000017 	ldw	fp,0(sp)
   226c4:	dec00104 	addi	sp,sp,4
   226c8:	f800283a 	ret

000226cc <makeCountResponse>:
/**
 * Write DAC codes and counter values for active channels into the buffer.
 */
int makeCountResponse( unsigned char channels, unsigned short *dac,
		unsigned int *count, bool calib, unsigned char *resp )
{
   226cc:	defff804 	addi	sp,sp,-32
   226d0:	dfc00715 	stw	ra,28(sp)
   226d4:	df000615 	stw	fp,24(sp)
   226d8:	df000604 	addi	fp,sp,24
   226dc:	2007883a 	mov	r3,r4
   226e0:	e17ffd15 	stw	r5,-12(fp)
   226e4:	e1bffe15 	stw	r6,-8(fp)
   226e8:	3805883a 	mov	r2,r7
   226ec:	e0fffc05 	stb	r3,-16(fp)
   226f0:	e0bfff05 	stb	r2,-4(fp)
	unsigned char *dataPtr;
	unsigned char i;
	dataPtr = resp;
   226f4:	e0800217 	ldw	r2,8(fp)
   226f8:	e0bffb15 	stw	r2,-20(fp)
	writeResponse(CMD_DAC, &dataPtr);
   226fc:	e0bffb04 	addi	r2,fp,-20
   22700:	01003404 	movi	r4,208
   22704:	100b883a 	mov	r5,r2
   22708:	00222ec0 	call	222ec <writeResponse>
	dataPtr--;
   2270c:	e0bffb17 	ldw	r2,-20(fp)
   22710:	10bfffc4 	addi	r2,r2,-1
   22714:	e0bffb15 	stw	r2,-20(fp)
	writeDACValues(channels, dac, &dataPtr);
   22718:	e0fffc03 	ldbu	r3,-16(fp)
   2271c:	e0bffb04 	addi	r2,fp,-20
   22720:	1809883a 	mov	r4,r3
   22724:	e17ffd17 	ldw	r5,-12(fp)
   22728:	100d883a 	mov	r6,r2
   2272c:	00224e40 	call	224e4 <writeDACValues>
	*dataPtr++ = calib<<7;
   22730:	e0bffb17 	ldw	r2,-20(fp)
   22734:	e0ffff03 	ldbu	r3,-4(fp)
   22738:	180691fa 	slli	r3,r3,7
   2273c:	10c00005 	stb	r3,0(r2)
   22740:	10800044 	addi	r2,r2,1
   22744:	e0bffb15 	stw	r2,-20(fp)
	if (calib)	return dataPtr-resp;
   22748:	e0bfff03 	ldbu	r2,-4(fp)
   2274c:	10000526 	beq	r2,zero,22764 <makeCountResponse+0x98>
   22750:	e0bffb17 	ldw	r2,-20(fp)
   22754:	1007883a 	mov	r3,r2
   22758:	e0800217 	ldw	r2,8(fp)
   2275c:	1885c83a 	sub	r2,r3,r2
   22760:	00001d06 	br	227d8 <makeCountResponse+0x10c>
	for (i=0; i<4; i++){
   22764:	e03ffa05 	stb	zero,-24(fp)
   22768:	00001406 	br	227bc <makeCountResponse+0xf0>
		if( ! (channels<<i & 0x08) ) continue;
   2276c:	e0fffc03 	ldbu	r3,-16(fp)
   22770:	e0bffa03 	ldbu	r2,-24(fp)
   22774:	1884983a 	sll	r2,r3,r2
   22778:	1080020c 	andi	r2,r2,8
   2277c:	10000b26 	beq	r2,zero,227ac <makeCountResponse+0xe0>
		writeInt(*(count+i), &dataPtr);
   22780:	e0bffa03 	ldbu	r2,-24(fp)
   22784:	1085883a 	add	r2,r2,r2
   22788:	1085883a 	add	r2,r2,r2
   2278c:	e0fffe17 	ldw	r3,-8(fp)
   22790:	1885883a 	add	r2,r3,r2
   22794:	10c00017 	ldw	r3,0(r2)
   22798:	e0bffb04 	addi	r2,fp,-20
   2279c:	1809883a 	mov	r4,r3
   227a0:	100b883a 	mov	r5,r2
   227a4:	00223680 	call	22368 <writeInt>
   227a8:	00000106 	br	227b0 <makeCountResponse+0xe4>
	dataPtr--;
	writeDACValues(channels, dac, &dataPtr);
	*dataPtr++ = calib<<7;
	if (calib)	return dataPtr-resp;
	for (i=0; i<4; i++){
		if( ! (channels<<i & 0x08) ) continue;
   227ac:	0001883a 	nop
	writeResponse(CMD_DAC, &dataPtr);
	dataPtr--;
	writeDACValues(channels, dac, &dataPtr);
	*dataPtr++ = calib<<7;
	if (calib)	return dataPtr-resp;
	for (i=0; i<4; i++){
   227b0:	e0bffa03 	ldbu	r2,-24(fp)
   227b4:	10800044 	addi	r2,r2,1
   227b8:	e0bffa05 	stb	r2,-24(fp)
   227bc:	e0bffa03 	ldbu	r2,-24(fp)
   227c0:	10800130 	cmpltui	r2,r2,4
   227c4:	103fe91e 	bne	r2,zero,2276c <makeCountResponse+0xa0>
		if( ! (channels<<i & 0x08) ) continue;
		writeInt(*(count+i), &dataPtr);
	}
	return dataPtr-resp;
   227c8:	e0bffb17 	ldw	r2,-20(fp)
   227cc:	1007883a 	mov	r3,r2
   227d0:	e0800217 	ldw	r2,8(fp)
   227d4:	1885c83a 	sub	r2,r3,r2
}
   227d8:	e037883a 	mov	sp,fp
   227dc:	dfc00117 	ldw	ra,4(sp)
   227e0:	df000017 	ldw	fp,0(sp)
   227e4:	dec00204 	addi	sp,sp,8
   227e8:	f800283a 	ret

000227ec <readDACValues>:
/**
 * 		Parse DAC values
 */
void readDACValues( unsigned char *channels, unsigned short *dac,
        unsigned char **dataPtr )
{
   227ec:	defffb04 	addi	sp,sp,-20
   227f0:	df000415 	stw	fp,16(sp)
   227f4:	df000404 	addi	fp,sp,16
   227f8:	e13ffd15 	stw	r4,-12(fp)
   227fc:	e17ffe15 	stw	r5,-8(fp)
   22800:	e1bfff15 	stw	r6,-4(fp)
    unsigned char i, tmp;
    unsigned short value;

    // Enabled channels
    *channels = *(*dataPtr)++ & 0x0f;
   22804:	e0bfff17 	ldw	r2,-4(fp)
   22808:	10800017 	ldw	r2,0(r2)
   2280c:	10c00003 	ldbu	r3,0(r2)
   22810:	18c003cc 	andi	r3,r3,15
   22814:	1809883a 	mov	r4,r3
   22818:	e0fffd17 	ldw	r3,-12(fp)
   2281c:	19000005 	stb	r4,0(r3)
   22820:	10c00044 	addi	r3,r2,1
   22824:	e0bfff17 	ldw	r2,-4(fp)
   22828:	10c00015 	stw	r3,0(r2)

    // Parse DAC values
    tmp = 0;
   2282c:	e03ffc45 	stb	zero,-15(fp)
    for (i=0; i<4; i++){
   22830:	e03ffc05 	stb	zero,-16(fp)
   22834:	00006606 	br	229d0 <readDACValues+0x1e4>
        if ( ! (*channels<<i & 0x08) ){			    // Check whether the i-th
   22838:	e0bffd17 	ldw	r2,-12(fp)
   2283c:	10800003 	ldbu	r2,0(r2)
   22840:	10c03fcc 	andi	r3,r2,255
   22844:	e0bffc03 	ldbu	r2,-16(fp)
   22848:	1884983a 	sll	r2,r3,r2
   2284c:	1080020c 	andi	r2,r2,8
   22850:	10005b26 	beq	r2,zero,229c0 <readDACValues+0x1d4>
        	//*(dac+i) = 0x800;						// channel is enabled
        	continue;
        }
        *(dac+i) = 0x0;
   22854:	e0bffc03 	ldbu	r2,-16(fp)
   22858:	1085883a 	add	r2,r2,r2
   2285c:	e0fffe17 	ldw	r3,-8(fp)
   22860:	1885883a 	add	r2,r3,r2
   22864:	1000000d 	sth	zero,0(r2)
        if ( tmp & 0x01 ){
   22868:	e0bffc43 	ldbu	r2,-15(fp)
   2286c:	1080004c 	andi	r2,r2,1
   22870:	10002a26 	beq	r2,zero,2291c <readDACValues+0x130>
            value = *(*dataPtr)++ & 0x0f;
   22874:	e0bfff17 	ldw	r2,-4(fp)
   22878:	10800017 	ldw	r2,0(r2)
   2287c:	10c00003 	ldbu	r3,0(r2)
   22880:	18c03fcc 	andi	r3,r3,255
   22884:	18c003cc 	andi	r3,r3,15
   22888:	e0fffc8d 	sth	r3,-14(fp)
   2288c:	10c00044 	addi	r3,r2,1
   22890:	e0bfff17 	ldw	r2,-4(fp)
   22894:	10c00015 	stw	r3,0(r2)
            *(dac+i) |= value << 8;
   22898:	e0bffc03 	ldbu	r2,-16(fp)
   2289c:	1085883a 	add	r2,r2,r2
   228a0:	e0fffe17 	ldw	r3,-8(fp)
   228a4:	1887883a 	add	r3,r3,r2
   228a8:	e0bffc03 	ldbu	r2,-16(fp)
   228ac:	1085883a 	add	r2,r2,r2
   228b0:	e13ffe17 	ldw	r4,-8(fp)
   228b4:	2085883a 	add	r2,r4,r2
   228b8:	1080000b 	ldhu	r2,0(r2)
   228bc:	1009883a 	mov	r4,r2
   228c0:	e0bffc8b 	ldhu	r2,-14(fp)
   228c4:	1004923a 	slli	r2,r2,8
   228c8:	2084b03a 	or	r2,r4,r2
   228cc:	1880000d 	sth	r2,0(r3)
            *(dac+i) |= *(*dataPtr)++;
   228d0:	e0bffc03 	ldbu	r2,-16(fp)
   228d4:	1085883a 	add	r2,r2,r2
   228d8:	e0fffe17 	ldw	r3,-8(fp)
   228dc:	1887883a 	add	r3,r3,r2
   228e0:	e0bffc03 	ldbu	r2,-16(fp)
   228e4:	1085883a 	add	r2,r2,r2
   228e8:	e13ffe17 	ldw	r4,-8(fp)
   228ec:	2085883a 	add	r2,r4,r2
   228f0:	1140000b 	ldhu	r5,0(r2)
   228f4:	e0bfff17 	ldw	r2,-4(fp)
   228f8:	10800017 	ldw	r2,0(r2)
   228fc:	11000003 	ldbu	r4,0(r2)
   22900:	21003fcc 	andi	r4,r4,255
   22904:	2908b03a 	or	r4,r5,r4
   22908:	1900000d 	sth	r4,0(r3)
   2290c:	10c00044 	addi	r3,r2,1
   22910:	e0bfff17 	ldw	r2,-4(fp)
   22914:	10c00015 	stw	r3,0(r2)
   22918:	00002506 	br	229b0 <readDACValues+0x1c4>
        }
        else {
        	*(dac+i) |= *(*dataPtr)++ << 4;
   2291c:	e0bffc03 	ldbu	r2,-16(fp)
   22920:	1085883a 	add	r2,r2,r2
   22924:	e0fffe17 	ldw	r3,-8(fp)
   22928:	1887883a 	add	r3,r3,r2
   2292c:	e0bffc03 	ldbu	r2,-16(fp)
   22930:	1085883a 	add	r2,r2,r2
   22934:	e13ffe17 	ldw	r4,-8(fp)
   22938:	2085883a 	add	r2,r4,r2
   2293c:	1080000b 	ldhu	r2,0(r2)
   22940:	100b883a 	mov	r5,r2
   22944:	e0bfff17 	ldw	r2,-4(fp)
   22948:	10800017 	ldw	r2,0(r2)
   2294c:	11000003 	ldbu	r4,0(r2)
   22950:	21003fcc 	andi	r4,r4,255
   22954:	2008913a 	slli	r4,r4,4
   22958:	2908b03a 	or	r4,r5,r4
   2295c:	1900000d 	sth	r4,0(r3)
   22960:	10c00044 	addi	r3,r2,1
   22964:	e0bfff17 	ldw	r2,-4(fp)
   22968:	10c00015 	stw	r3,0(r2)
            *(dac+i) |= **dataPtr >> 4;
   2296c:	e0bffc03 	ldbu	r2,-16(fp)
   22970:	1085883a 	add	r2,r2,r2
   22974:	e0fffe17 	ldw	r3,-8(fp)
   22978:	1887883a 	add	r3,r3,r2
   2297c:	e0bffc03 	ldbu	r2,-16(fp)
   22980:	1085883a 	add	r2,r2,r2
   22984:	e13ffe17 	ldw	r4,-8(fp)
   22988:	2085883a 	add	r2,r4,r2
   2298c:	1100000b 	ldhu	r4,0(r2)
   22990:	e0bfff17 	ldw	r2,-4(fp)
   22994:	10800017 	ldw	r2,0(r2)
   22998:	10800003 	ldbu	r2,0(r2)
   2299c:	10803fcc 	andi	r2,r2,255
   229a0:	1004d13a 	srli	r2,r2,4
   229a4:	10803fcc 	andi	r2,r2,255
   229a8:	2084b03a 	or	r2,r4,r2
   229ac:	1880000d 	sth	r2,0(r3)
        }
        tmp++;
   229b0:	e0bffc43 	ldbu	r2,-15(fp)
   229b4:	10800044 	addi	r2,r2,1
   229b8:	e0bffc45 	stb	r2,-15(fp)
   229bc:	00000106 	br	229c4 <readDACValues+0x1d8>
    // Parse DAC values
    tmp = 0;
    for (i=0; i<4; i++){
        if ( ! (*channels<<i & 0x08) ){			    // Check whether the i-th
        	//*(dac+i) = 0x800;						// channel is enabled
        	continue;
   229c0:	0001883a 	nop
    // Enabled channels
    *channels = *(*dataPtr)++ & 0x0f;

    // Parse DAC values
    tmp = 0;
    for (i=0; i<4; i++){
   229c4:	e0bffc03 	ldbu	r2,-16(fp)
   229c8:	10800044 	addi	r2,r2,1
   229cc:	e0bffc05 	stb	r2,-16(fp)
   229d0:	e0bffc03 	ldbu	r2,-16(fp)
   229d4:	10800130 	cmpltui	r2,r2,4
   229d8:	103f971e 	bne	r2,zero,22838 <readDACValues+0x4c>
        	*(dac+i) |= *(*dataPtr)++ << 4;
            *(dac+i) |= **dataPtr >> 4;
        }
        tmp++;
    }
    if ( tmp & 0x01 ) (*dataPtr)++;
   229dc:	e0bffc43 	ldbu	r2,-15(fp)
   229e0:	1080004c 	andi	r2,r2,1
   229e4:	10000526 	beq	r2,zero,229fc <readDACValues+0x210>
   229e8:	e0bfff17 	ldw	r2,-4(fp)
   229ec:	10800017 	ldw	r2,0(r2)
   229f0:	10c00044 	addi	r3,r2,1
   229f4:	e0bfff17 	ldw	r2,-4(fp)
   229f8:	10c00015 	stw	r3,0(r2)
}
   229fc:	e037883a 	mov	sp,fp
   22a00:	df000017 	ldw	fp,0(sp)
   22a04:	dec00104 	addi	sp,sp,4
   22a08:	f800283a 	ret

00022a0c <parseRun>:
 *      Parse query.
 */
void parseRun(unsigned short *dac, unsigned char *channels,
		unsigned char *cTime, unsigned short *step,
		unsigned short *nSteps, bool *calibration)
{
   22a0c:	defff904 	addi	sp,sp,-28
   22a10:	dfc00615 	stw	ra,24(sp)
   22a14:	df000515 	stw	fp,20(sp)
   22a18:	df000504 	addi	fp,sp,20
   22a1c:	e13ffc15 	stw	r4,-16(fp)
   22a20:	e17ffd15 	stw	r5,-12(fp)
   22a24:	e1bffe15 	stw	r6,-8(fp)
   22a28:	e1ffff15 	stw	r7,-4(fp)
	unsigned char *dataPtr;								// pointer to the beginning of the data to be processed
	dataPtr = buf + UDP_DATA_P + 2;
   22a2c:	008000b4 	movhi	r2,2
   22a30:	10930244 	addi	r2,r2,19465
   22a34:	e0bffb15 	stw	r2,-20(fp)

	// Parse channels and DAC values
	readDACValues(channels, dac, &dataPtr);
   22a38:	e13ffd17 	ldw	r4,-12(fp)
   22a3c:	e17ffc17 	ldw	r5,-16(fp)
   22a40:	e1bffb04 	addi	r6,fp,-20
   22a44:	00227ec0 	call	227ec <readDACValues>

	// Parse count time
	*cTime = *dataPtr++;
   22a48:	e0bffb17 	ldw	r2,-20(fp)
   22a4c:	11000003 	ldbu	r4,0(r2)
   22a50:	e0fffe17 	ldw	r3,-8(fp)
   22a54:	19000005 	stb	r4,0(r3)
   22a58:	10800044 	addi	r2,r2,1
   22a5c:	e0bffb15 	stw	r2,-20(fp)

	// Parse DAC step for counter
	*step |= *dataPtr++ << 8;
   22a60:	e0bfff17 	ldw	r2,-4(fp)
   22a64:	1080000b 	ldhu	r2,0(r2)
   22a68:	1009883a 	mov	r4,r2
   22a6c:	e0bffb17 	ldw	r2,-20(fp)
   22a70:	10c00003 	ldbu	r3,0(r2)
   22a74:	18c03fcc 	andi	r3,r3,255
   22a78:	1806923a 	slli	r3,r3,8
   22a7c:	20c6b03a 	or	r3,r4,r3
   22a80:	1809883a 	mov	r4,r3
   22a84:	e0ffff17 	ldw	r3,-4(fp)
   22a88:	1900000d 	sth	r4,0(r3)
   22a8c:	10800044 	addi	r2,r2,1
   22a90:	e0bffb15 	stw	r2,-20(fp)
	*step |= *dataPtr++;
   22a94:	e0bfff17 	ldw	r2,-4(fp)
   22a98:	1100000b 	ldhu	r4,0(r2)
   22a9c:	e0bffb17 	ldw	r2,-20(fp)
   22aa0:	10c00003 	ldbu	r3,0(r2)
   22aa4:	18c03fcc 	andi	r3,r3,255
   22aa8:	20c6b03a 	or	r3,r4,r3
   22aac:	1809883a 	mov	r4,r3
   22ab0:	e0ffff17 	ldw	r3,-4(fp)
   22ab4:	1900000d 	sth	r4,0(r3)
   22ab8:	10800044 	addi	r2,r2,1
   22abc:	e0bffb15 	stw	r2,-20(fp)

	// Parse number of steps for counter
	*nSteps |= *dataPtr++ << 8;
   22ac0:	e0800217 	ldw	r2,8(fp)
   22ac4:	1080000b 	ldhu	r2,0(r2)
   22ac8:	1009883a 	mov	r4,r2
   22acc:	e0bffb17 	ldw	r2,-20(fp)
   22ad0:	10c00003 	ldbu	r3,0(r2)
   22ad4:	18c03fcc 	andi	r3,r3,255
   22ad8:	1806923a 	slli	r3,r3,8
   22adc:	20c6b03a 	or	r3,r4,r3
   22ae0:	1809883a 	mov	r4,r3
   22ae4:	e0c00217 	ldw	r3,8(fp)
   22ae8:	1900000d 	sth	r4,0(r3)
   22aec:	10800044 	addi	r2,r2,1
   22af0:	e0bffb15 	stw	r2,-20(fp)
	*nSteps |= *dataPtr++;
   22af4:	e0800217 	ldw	r2,8(fp)
   22af8:	1100000b 	ldhu	r4,0(r2)
   22afc:	e0bffb17 	ldw	r2,-20(fp)
   22b00:	10c00003 	ldbu	r3,0(r2)
   22b04:	18c03fcc 	andi	r3,r3,255
   22b08:	20c6b03a 	or	r3,r4,r3
   22b0c:	1809883a 	mov	r4,r3
   22b10:	e0c00217 	ldw	r3,8(fp)
   22b14:	1900000d 	sth	r4,0(r3)
   22b18:	10800044 	addi	r2,r2,1
   22b1c:	e0bffb15 	stw	r2,-20(fp)

	// Parse calibration tag for counter
	*calibration = *dataPtr >> 7;
   22b20:	e0bffb17 	ldw	r2,-20(fp)
   22b24:	10800003 	ldbu	r2,0(r2)
   22b28:	10803fcc 	andi	r2,r2,255
   22b2c:	1004d1fa 	srli	r2,r2,7
   22b30:	10803fcc 	andi	r2,r2,255
   22b34:	1004c03a 	cmpne	r2,r2,zero
   22b38:	1007883a 	mov	r3,r2
   22b3c:	e0800317 	ldw	r2,12(fp)
   22b40:	10c00005 	stb	r3,0(r2)
}
   22b44:	e037883a 	mov	sp,fp
   22b48:	dfc00117 	ldw	ra,4(sp)
   22b4c:	df000017 	ldw	fp,0(sp)
   22b50:	dec00204 	addi	sp,sp,8
   22b54:	f800283a 	ret

00022b58 <simple_server>:

//______________________________________________________________________________
int simple_server()
{
   22b58:	deffce04 	addi	sp,sp,-200
   22b5c:	dfc03115 	stw	ra,196(sp)
   22b60:	df003015 	stw	fp,192(sp)
   22b64:	dc002f15 	stw	r16,188(sp)
   22b68:	df002f04 	addi	fp,sp,188
    // common
    unsigned int plen;
    unsigned int i, j;
    unsigned char str[100] = {0};
   22b6c:	e0ffd904 	addi	r3,fp,-156
   22b70:	00801904 	movi	r2,100
   22b74:	1809883a 	mov	r4,r3
   22b78:	000b883a 	mov	r5,zero
   22b7c:	100d883a 	mov	r6,r2
   22b80:	00237180 	call	23718 <memset>
    //char result_array[70] = {0};

    bool isRun = false;
   22b84:	e03fd505 	stb	zero,-172(fp)
    unsigned short nSteps = 0;
   22b88:	e03ff20d 	sth	zero,-56(fp)
    unsigned short step = 0;
   22b8c:	e03ff28d 	sth	zero,-54(fp)

    // time
    unsigned char cTime = 0x01;
   22b90:	00800044 	movi	r2,1
   22b94:	e0bff305 	stb	r2,-52(fp)

    // dac
    unsigned short dac[4] = {0x800};
   22b98:	e03ff38d 	sth	zero,-50(fp)
   22b9c:	e03ff40d 	sth	zero,-48(fp)
   22ba0:	e03ff48d 	sth	zero,-46(fp)
   22ba4:	e03ff50d 	sth	zero,-44(fp)
   22ba8:	00820004 	movi	r2,2048
   22bac:	e0bff38d 	sth	r2,-50(fp)
    bool calib = false;
   22bb0:	e03ff585 	stb	zero,-42(fp)
    unsigned short calibDAC[4] = {0x800};
   22bb4:	e03ff615 	stw	zero,-40(fp)
   22bb8:	e03ff715 	stw	zero,-36(fp)
   22bbc:	00820004 	movi	r2,2048
   22bc0:	e0bff60d 	sth	r2,-40(fp)

    // gate
    unsigned char cGate = 0;
   22bc4:	e03ff805 	stb	zero,-32(fp)

    // freq
    unsigned int freqInt = 0;
   22bc8:	e03ff915 	stw	zero,-28(fp)

    // addr
    unsigned char cAddr = 0; clearAddr();
   22bcc:	e03ffa05 	stb	zero,-24(fp)
   22bd0:	0021b1c0 	call	21b1c <clearAddr>

    // data
    unsigned char cWdata = 0x00; clearData();
   22bd4:	e03fd745 	stb	zero,-163(fp)
   22bd8:	0021b440 	call	21b44 <clearData>

    unsigned char cRdata = 0x00; cRdata = readData();
   22bdc:	e03fd785 	stb	zero,-162(fp)
   22be0:	0021ad00 	call	21ad0 <readData>
   22be4:	e0bfd785 	stb	r2,-162(fp)
    clearSignal();
   22be8:	0021af40 	call	21af4 <clearSignal>

    unsigned int count[4];
    for (i=0; i<4; i++) *(count+i) = 0;
   22bec:	e03fd315 	stw	zero,-180(fp)
   22bf0:	00000906 	br	22c18 <simple_server+0xc0>
   22bf4:	e0bfd317 	ldw	r2,-180(fp)
   22bf8:	1085883a 	add	r2,r2,r2
   22bfc:	1085883a 	add	r2,r2,r2
   22c00:	e0fffb04 	addi	r3,fp,-20
   22c04:	1885883a 	add	r2,r3,r2
   22c08:	10000015 	stw	zero,0(r2)
   22c0c:	e0bfd317 	ldw	r2,-180(fp)
   22c10:	10800044 	addi	r2,r2,1
   22c14:	e0bfd315 	stw	r2,-180(fp)
   22c18:	e0bfd317 	ldw	r2,-180(fp)
   22c1c:	10800130 	cmpltui	r2,r2,4
   22c20:	103ff41e 	bne	r2,zero,22bf4 <simple_server+0x9c>
    unsigned char cChannels = 0x0;
   22c24:	e03fff05 	stb	zero,-4(fp)
    unsigned char cmd = 0x0;
   22c28:	e03fd545 	stb	zero,-171(fp)
    int respLen = 0x0;
   22c2c:	e03fd615 	stw	zero,-168(fp)

    //unsigned int time;   time   = IORD_ALTERA_AVALON_PIO_DATA(PIO_TIME_BASE);

    /*initialize enc28j60*/
    enc28j60Init(mymac);
   22c30:	d1200104 	addi	r4,gp,-32764
   22c34:	00215380 	call	21538 <enc28j60Init>

    str[0] = (char)enc28j60getrev();
   22c38:	00218000 	call	21800 <enc28j60getrev>
   22c3c:	e0bfd905 	stb	r2,-156(fp)

    init_ip_arp_udp_tcp(mymac, myip, myudpport);
   22c40:	d0a00417 	ldw	r2,-32752(gp)
   22c44:	10803fcc 	andi	r2,r2,255
   22c48:	d1200104 	addi	r4,gp,-32764
   22c4c:	d1600284 	addi	r5,gp,-32758
   22c50:	100d883a 	mov	r6,r2
   22c54:	002019c0 	call	2019c <init_ip_arp_udp_tcp>
    enc28j60PhyWrite(PHLCON, 0x476);
   22c58:	01000504 	movi	r4,20
   22c5c:	01411d84 	movi	r5,1142
   22c60:	00214700 	call	21470 <enc28j60PhyWrite>
    enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
   22c64:	01000084 	movi	r4,2
   22c68:	00214f80 	call	214f8 <enc28j60clkout>
   22c6c:	00000106 	br	22c74 <simple_server+0x11c>
            respLen = makeCharResponse(cmd, MARK_ERR, str);
            ANSWER: make_udp_reply_from_request(buf,
            		(char*)str, respLen, myudpport);
        }
        // UDP end
    }
   22c70:	0001883a 	nop
    enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz

    // init the ethernet/ip layer:
    while (1) {
        // RUN READ AND WAIT
        if(isRun &	(IORD_ALTERA_AVALON_PIO_DATA(PIO_SIGNALS_0_BASE)\
   22c74:	e0ffd503 	ldbu	r3,-172(fp)
   22c78:	00861c04 	movi	r2,6256
   22c7c:	10800037 	ldwio	r2,0(r2)
        		== SIGNAL_CNT)) {
   22c80:	10800420 	cmpeqi	r2,r2,16
   22c84:	10803fcc 	andi	r2,r2,255
    enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz

    // init the ethernet/ip layer:
    while (1) {
        // RUN READ AND WAIT
        if(isRun &	(IORD_ALTERA_AVALON_PIO_DATA(PIO_SIGNALS_0_BASE)\
   22c88:	1884703a 	and	r2,r3,r2
   22c8c:	1000d226 	beq	r2,zero,22fd8 <simple_server+0x480>
        		== SIGNAL_CNT)) {
    	    sendSignal(SIGNAL_RDCNT);
   22c90:	01000084 	movi	r4,2
   22c94:	0021b6c0 	call	21b6c <sendSignal>

            // read count
            for (i=0; i<4; i++)	*(count+i) = readCounter(i+1);
   22c98:	e03fd315 	stw	zero,-180(fp)
   22c9c:	00000e06 	br	22cd8 <simple_server+0x180>
   22ca0:	e0bfd317 	ldw	r2,-180(fp)
   22ca4:	1085883a 	add	r2,r2,r2
   22ca8:	1085883a 	add	r2,r2,r2
   22cac:	e0fffb04 	addi	r3,fp,-20
   22cb0:	18a1883a 	add	r16,r3,r2
   22cb4:	e0bfd317 	ldw	r2,-180(fp)
   22cb8:	10800044 	addi	r2,r2,1
   22cbc:	10803fcc 	andi	r2,r2,255
   22cc0:	1009883a 	mov	r4,r2
   22cc4:	0021c640 	call	21c64 <readCounter>
   22cc8:	80800015 	stw	r2,0(r16)
   22ccc:	e0bfd317 	ldw	r2,-180(fp)
   22cd0:	10800044 	addi	r2,r2,1
   22cd4:	e0bfd315 	stw	r2,-180(fp)
   22cd8:	e0bfd317 	ldw	r2,-180(fp)
   22cdc:	10800130 	cmpltui	r2,r2,4
   22ce0:	103fef1e 	bne	r2,zero,22ca0 <simple_server+0x148>
            // read time (sec)
            //time = 0;   time   = IORD_ALTERA_AVALON_PIO_DATA(PIO_TIME_BASE);

            unsigned char cnt_flag = 0x0;
   22ce4:	e03fd705 	stb	zero,-164(fp)
            for (i=0; i<4; i++) cnt_flag |= (*(count+i) > 0)<<(7-i);
   22ce8:	e03fd315 	stw	zero,-180(fp)
   22cec:	00001306 	br	22d3c <simple_server+0x1e4>
   22cf0:	e0bfd317 	ldw	r2,-180(fp)
   22cf4:	1085883a 	add	r2,r2,r2
   22cf8:	1085883a 	add	r2,r2,r2
   22cfc:	e0fffb04 	addi	r3,fp,-20
   22d00:	1885883a 	add	r2,r3,r2
   22d04:	10800017 	ldw	r2,0(r2)
   22d08:	1004c03a 	cmpne	r2,r2,zero
   22d0c:	10c03fcc 	andi	r3,r2,255
   22d10:	010001c4 	movi	r4,7
   22d14:	e0bfd317 	ldw	r2,-180(fp)
   22d18:	2085c83a 	sub	r2,r4,r2
   22d1c:	1884983a 	sll	r2,r3,r2
   22d20:	1007883a 	mov	r3,r2
   22d24:	e0bfd703 	ldbu	r2,-164(fp)
   22d28:	1884b03a 	or	r2,r3,r2
   22d2c:	e0bfd705 	stb	r2,-164(fp)
   22d30:	e0bfd317 	ldw	r2,-180(fp)
   22d34:	10800044 	addi	r2,r2,1
   22d38:	e0bfd315 	stw	r2,-180(fp)
   22d3c:	e0bfd317 	ldw	r2,-180(fp)
   22d40:	10800130 	cmpltui	r2,r2,4
   22d44:	103fea1e 	bne	r2,zero,22cf0 <simple_server+0x198>
            if( cnt_flag>0 && calib ) {
   22d48:	e0bfd703 	ldbu	r2,-164(fp)
   22d4c:	10005426 	beq	r2,zero,22ea0 <simple_server+0x348>
   22d50:	e0bff583 	ldbu	r2,-42(fp)
   22d54:	10803fcc 	andi	r2,r2,255
   22d58:	10005126 	beq	r2,zero,22ea0 <simple_server+0x348>
            	for (i=0; i<4; i++){
   22d5c:	e03fd315 	stw	zero,-180(fp)
   22d60:	00001b06 	br	22dd0 <simple_server+0x278>
            		if ( ! (cChannels<<i & 0x08) ) continue;
   22d64:	e0bfff03 	ldbu	r2,-4(fp)
   22d68:	10c03fcc 	andi	r3,r2,255
   22d6c:	e0bfd317 	ldw	r2,-180(fp)
   22d70:	1884983a 	sll	r2,r3,r2
   22d74:	1080020c 	andi	r2,r2,8
   22d78:	10001126 	beq	r2,zero,22dc0 <simple_server+0x268>
            		if (cnt_flag>>(7-i)){
   22d7c:	e0ffd703 	ldbu	r3,-164(fp)
   22d80:	010001c4 	movi	r4,7
   22d84:	e0bfd317 	ldw	r2,-180(fp)
   22d88:	2085c83a 	sub	r2,r4,r2
   22d8c:	1885d83a 	sra	r2,r3,r2
   22d90:	10000c26 	beq	r2,zero,22dc4 <simple_server+0x26c>
            			*(calibDAC+i) = *(dac+i);
   22d94:	e0bfd317 	ldw	r2,-180(fp)
   22d98:	1085883a 	add	r2,r2,r2
   22d9c:	e0fff604 	addi	r3,fp,-40
   22da0:	1887883a 	add	r3,r3,r2
   22da4:	e0bfd317 	ldw	r2,-180(fp)
   22da8:	1085883a 	add	r2,r2,r2
   22dac:	e13ff384 	addi	r4,fp,-50
   22db0:	2085883a 	add	r2,r4,r2
   22db4:	1080000b 	ldhu	r2,0(r2)
   22db8:	1880000d 	sth	r2,0(r3)
   22dbc:	00000106 	br	22dc4 <simple_server+0x26c>

            unsigned char cnt_flag = 0x0;
            for (i=0; i<4; i++) cnt_flag |= (*(count+i) > 0)<<(7-i);
            if( cnt_flag>0 && calib ) {
            	for (i=0; i<4; i++){
            		if ( ! (cChannels<<i & 0x08) ) continue;
   22dc0:	0001883a 	nop
            //time = 0;   time   = IORD_ALTERA_AVALON_PIO_DATA(PIO_TIME_BASE);

            unsigned char cnt_flag = 0x0;
            for (i=0; i<4; i++) cnt_flag |= (*(count+i) > 0)<<(7-i);
            if( cnt_flag>0 && calib ) {
            	for (i=0; i<4; i++){
   22dc4:	e0bfd317 	ldw	r2,-180(fp)
   22dc8:	10800044 	addi	r2,r2,1
   22dcc:	e0bfd315 	stw	r2,-180(fp)
   22dd0:	e0bfd317 	ldw	r2,-180(fp)
   22dd4:	10800130 	cmpltui	r2,r2,4
   22dd8:	103fe21e 	bne	r2,zero,22d64 <simple_server+0x20c>
            			*(calibDAC+i) = *(dac+i);
            		}
            	}

                // write dac code
                sendCalibDAC(&cChannels, calibDAC, &cAddr);
   22ddc:	e13fff04 	addi	r4,fp,-4
   22de0:	e0fff604 	addi	r3,fp,-40
   22de4:	e0bffa04 	addi	r2,fp,-24
   22de8:	180b883a 	mov	r5,r3
   22dec:	100d883a 	mov	r6,r2
   22df0:	0021f700 	call	21f70 <sendCalibDAC>

                nSteps = 0;
   22df4:	e03ff20d 	sth	zero,-56(fp)
                isRun = false;
   22df8:	e03fd505 	stb	zero,-172(fp)
                calib = false;
   22dfc:	e03ff585 	stb	zero,-42(fp)

                respLen = makeCountResponse(cChannels, dac,
   22e00:	e0bfff03 	ldbu	r2,-4(fp)
   22e04:	11003fcc 	andi	r4,r2,255
   22e08:	e0bff583 	ldbu	r2,-42(fp)
   22e0c:	10803fcc 	andi	r2,r2,255
   22e10:	e17ff384 	addi	r5,fp,-50
                		count, calib, str);
   22e14:	e0fffb04 	addi	r3,fp,-20
   22e18:	e1bfd904 	addi	r6,fp,-156

                nSteps = 0;
                isRun = false;
                calib = false;

                respLen = makeCountResponse(cChannels, dac,
   22e1c:	d9800015 	stw	r6,0(sp)
   22e20:	180d883a 	mov	r6,r3
   22e24:	100f883a 	mov	r7,r2
   22e28:	00226cc0 	call	226cc <makeCountResponse>
   22e2c:	e0bfd615 	stw	r2,-168(fp)
                		count, calib, str);
                for(i = 0; i < BUFFER_SIZE; i++) buf[i] = bufUDP[i];
   22e30:	e03fd315 	stw	zero,-180(fp)
   22e34:	00000d06 	br	22e6c <simple_server+0x314>
   22e38:	00c000b4 	movhi	r3,2
   22e3c:	18d2ac04 	addi	r3,r3,19120
   22e40:	e0bfd317 	ldw	r2,-180(fp)
   22e44:	1885883a 	add	r2,r3,r2
   22e48:	10c00003 	ldbu	r3,0(r2)
   22e4c:	010000b4 	movhi	r4,2
   22e50:	2112f744 	addi	r4,r4,19421
   22e54:	e0bfd317 	ldw	r2,-180(fp)
   22e58:	2085883a 	add	r2,r4,r2
   22e5c:	10c00005 	stb	r3,0(r2)
   22e60:	e0bfd317 	ldw	r2,-180(fp)
   22e64:	10800044 	addi	r2,r2,1
   22e68:	e0bfd315 	stw	r2,-180(fp)
   22e6c:	e0bfd317 	ldw	r2,-180(fp)
   22e70:	10804b30 	cmpltui	r2,r2,300
   22e74:	103ff01e 	bne	r2,zero,22e38 <simple_server+0x2e0>
                make_udp_reply_from_request(buf,
   22e78:	e0bfd617 	ldw	r2,-168(fp)
   22e7c:	10c03fcc 	andi	r3,r2,255
   22e80:	d0a00417 	ldw	r2,-32752(gp)
                		(char*)str, respLen, myudpport);
   22e84:	e17fd904 	addi	r5,fp,-156
                calib = false;

                respLen = makeCountResponse(cChannels, dac,
                		count, calib, str);
                for(i = 0; i < BUFFER_SIZE; i++) buf[i] = bufUDP[i];
                make_udp_reply_from_request(buf,
   22e88:	010000b4 	movhi	r4,2
   22e8c:	2112f744 	addi	r4,r4,19421
   22e90:	180d883a 	mov	r6,r3
   22e94:	100f883a 	mov	r7,r2
   22e98:	00209bc0 	call	209bc <make_udp_reply_from_request>
   22e9c:	00004e06 	br	22fd8 <simple_server+0x480>
                		(char*)str, respLen, myudpport);
            }
            else {
            	respLen = makeCountResponse(cChannels, dac,
   22ea0:	e0bfff03 	ldbu	r2,-4(fp)
   22ea4:	11003fcc 	andi	r4,r2,255
   22ea8:	e0bff583 	ldbu	r2,-42(fp)
   22eac:	10803fcc 	andi	r2,r2,255
   22eb0:	e17ff384 	addi	r5,fp,-50
            			count, calib, str);
   22eb4:	e0fffb04 	addi	r3,fp,-20
   22eb8:	e1bfd904 	addi	r6,fp,-156
                for(i = 0; i < BUFFER_SIZE; i++) buf[i] = bufUDP[i];
                make_udp_reply_from_request(buf,
                		(char*)str, respLen, myudpport);
            }
            else {
            	respLen = makeCountResponse(cChannels, dac,
   22ebc:	d9800015 	stw	r6,0(sp)
   22ec0:	180d883a 	mov	r6,r3
   22ec4:	100f883a 	mov	r7,r2
   22ec8:	00226cc0 	call	226cc <makeCountResponse>
   22ecc:	e0bfd615 	stw	r2,-168(fp)
            			count, calib, str);
            	for(i = 0; i < BUFFER_SIZE; i++) buf[i] = bufUDP[i];
   22ed0:	e03fd315 	stw	zero,-180(fp)
   22ed4:	00000d06 	br	22f0c <simple_server+0x3b4>
   22ed8:	00c000b4 	movhi	r3,2
   22edc:	18d2ac04 	addi	r3,r3,19120
   22ee0:	e0bfd317 	ldw	r2,-180(fp)
   22ee4:	1885883a 	add	r2,r3,r2
   22ee8:	10c00003 	ldbu	r3,0(r2)
   22eec:	010000b4 	movhi	r4,2
   22ef0:	2112f744 	addi	r4,r4,19421
   22ef4:	e0bfd317 	ldw	r2,-180(fp)
   22ef8:	2085883a 	add	r2,r4,r2
   22efc:	10c00005 	stb	r3,0(r2)
   22f00:	e0bfd317 	ldw	r2,-180(fp)
   22f04:	10800044 	addi	r2,r2,1
   22f08:	e0bfd315 	stw	r2,-180(fp)
   22f0c:	e0bfd317 	ldw	r2,-180(fp)
   22f10:	10804b30 	cmpltui	r2,r2,300
   22f14:	103ff01e 	bne	r2,zero,22ed8 <simple_server+0x380>
            	make_udp_reply_from_request(buf,
   22f18:	e0bfd617 	ldw	r2,-168(fp)
   22f1c:	10c03fcc 	andi	r3,r2,255
   22f20:	d0a00417 	ldw	r2,-32752(gp)
            			(char*)str, respLen, myudpport);
   22f24:	e17fd904 	addi	r5,fp,-156
            }
            else {
            	respLen = makeCountResponse(cChannels, dac,
            			count, calib, str);
            	for(i = 0; i < BUFFER_SIZE; i++) buf[i] = bufUDP[i];
            	make_udp_reply_from_request(buf,
   22f28:	010000b4 	movhi	r4,2
   22f2c:	2112f744 	addi	r4,r4,19421
   22f30:	180d883a 	mov	r6,r3
   22f34:	100f883a 	mov	r7,r2
   22f38:	00209bc0 	call	209bc <make_udp_reply_from_request>
            			(char*)str, respLen, myudpport);

                if(nSteps > 0) {
   22f3c:	e0bff20b 	ldhu	r2,-56(fp)
   22f40:	10bfffcc 	andi	r2,r2,65535
   22f44:	10002326 	beq	r2,zero,22fd4 <simple_server+0x47c>
                    nSteps = nSteps - 1;
   22f48:	e0bff20b 	ldhu	r2,-56(fp)
   22f4c:	10bfffc4 	addi	r2,r2,-1
   22f50:	e0bff20d 	sth	r2,-56(fp)
                    isRun = true;
   22f54:	00800044 	movi	r2,1
   22f58:	e0bfd505 	stb	r2,-172(fp)

                    for (i=0; i<4; i++){
   22f5c:	e03fd315 	stw	zero,-180(fp)
   22f60:	00000f06 	br	22fa0 <simple_server+0x448>
                    	*(dac+i) = *(dac+i) + step;
   22f64:	e0bfd317 	ldw	r2,-180(fp)
   22f68:	1085883a 	add	r2,r2,r2
   22f6c:	e0fff384 	addi	r3,fp,-50
   22f70:	1887883a 	add	r3,r3,r2
   22f74:	e0bfd317 	ldw	r2,-180(fp)
   22f78:	1085883a 	add	r2,r2,r2
   22f7c:	e13ff384 	addi	r4,fp,-50
   22f80:	2085883a 	add	r2,r4,r2
   22f84:	1100000b 	ldhu	r4,0(r2)
   22f88:	e0bff28b 	ldhu	r2,-54(fp)
   22f8c:	2085883a 	add	r2,r4,r2
   22f90:	1880000d 	sth	r2,0(r3)

                if(nSteps > 0) {
                    nSteps = nSteps - 1;
                    isRun = true;

                    for (i=0; i<4; i++){
   22f94:	e0bfd317 	ldw	r2,-180(fp)
   22f98:	10800044 	addi	r2,r2,1
   22f9c:	e0bfd315 	stw	r2,-180(fp)
   22fa0:	e0bfd317 	ldw	r2,-180(fp)
   22fa4:	10800130 	cmpltui	r2,r2,4
   22fa8:	103fee1e 	bne	r2,zero,22f64 <simple_server+0x40c>
                    	*(dac+i) = *(dac+i) + step;
                    }

                    sendRun(cChannels, cTime,  &cAddr, dac);
   22fac:	e0bfff03 	ldbu	r2,-4(fp)
   22fb0:	11003fcc 	andi	r4,r2,255
   22fb4:	e0bff303 	ldbu	r2,-52(fp)
   22fb8:	11403fcc 	andi	r5,r2,255
   22fbc:	e0fffa04 	addi	r3,fp,-24
   22fc0:	e0bff384 	addi	r2,fp,-50
   22fc4:	180d883a 	mov	r6,r3
   22fc8:	100f883a 	mov	r7,r2
   22fcc:	00221940 	call	22194 <sendRun>
   22fd0:	00000106 	br	22fd8 <simple_server+0x480>
                }
                else {
                    isRun = false;
   22fd4:	e03fd505 	stb	zero,-172(fp)
                }
            }
        }

        plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
   22fd8:	01004b04 	movi	r4,300
   22fdc:	014000b4 	movhi	r5,2
   22fe0:	2952f744 	addi	r5,r5,19421
   22fe4:	00218fc0 	call	218fc <enc28j60PacketReceive>
   22fe8:	10bfffcc 	andi	r2,r2,65535
   22fec:	e0bfd815 	stw	r2,-160(fp)
        if(plen == 0) {
   22ff0:	e0bfd817 	ldw	r2,-160(fp)
   22ff4:	1001ba26 	beq	r2,zero,236e0 <simple_server+0xb88>
            continue;
        }

        if(eth_type_is_arp_and_my_ip(buf, plen)) {
   22ff8:	010000b4 	movhi	r4,2
   22ffc:	2112f744 	addi	r4,r4,19421
   23000:	e17fd817 	ldw	r5,-160(fp)
   23004:	00202500 	call	20250 <eth_type_is_arp_and_my_ip>
   23008:	10803fcc 	andi	r2,r2,255
   2300c:	10000426 	beq	r2,zero,23020 <simple_server+0x4c8>
            make_arp_answer_from_request(buf);
   23010:	010000b4 	movhi	r4,2
   23014:	2112f744 	addi	r4,r4,19421
   23018:	00207f00 	call	207f0 <make_arp_answer_from_request>
            continue;
   2301c:	0001b306 	br	236ec <simple_server+0xb94>
        }

        if(eth_type_is_ip_and_my_ip(buf, plen) == 0) {
   23020:	010000b4 	movhi	r4,2
   23024:	2112f744 	addi	r4,r4,19421
   23028:	e17fd817 	ldw	r5,-160(fp)
   2302c:	00203180 	call	20318 <eth_type_is_ip_and_my_ip>
   23030:	10803fcc 	andi	r2,r2,255
   23034:	1001ac26 	beq	r2,zero,236e8 <simple_server+0xb90>
            continue;
        }

        if(buf[IP_PROTO_P] == IP_PROTO_ICMP_V &&
   23038:	008000b4 	movhi	r2,2
   2303c:	1092f744 	addi	r2,r2,19421
   23040:	108005c3 	ldbu	r2,23(r2)
   23044:	10803fcc 	andi	r2,r2,255
   23048:	10800058 	cmpnei	r2,r2,1
   2304c:	10000b1e 	bne	r2,zero,2307c <simple_server+0x524>
            buf[ICMP_TYPE_P] == ICMP_TYPE_ECHOREQUEST_V) {
   23050:	008000b4 	movhi	r2,2
   23054:	1092f744 	addi	r2,r2,19421
   23058:	10800883 	ldbu	r2,34(r2)

        if(eth_type_is_ip_and_my_ip(buf, plen) == 0) {
            continue;
        }

        if(buf[IP_PROTO_P] == IP_PROTO_ICMP_V &&
   2305c:	10803fcc 	andi	r2,r2,255
   23060:	10800218 	cmpnei	r2,r2,8
   23064:	1000051e 	bne	r2,zero,2307c <simple_server+0x524>
            buf[ICMP_TYPE_P] == ICMP_TYPE_ECHOREQUEST_V) {
            make_echo_reply_from_request(buf, plen);
   23068:	010000b4 	movhi	r4,2
   2306c:	2112f744 	addi	r4,r4,19421
   23070:	e17fd817 	ldw	r5,-160(fp)
   23074:	00209200 	call	20920 <make_echo_reply_from_request>
            continue;
   23078:	00019c06 	br	236ec <simple_server+0xb94>
        }

        // udp start, we listen on udp port 1200=0x4B0
        if( buf[IP_PROTO_P] == IP_PROTO_UDP_V
   2307c:	008000b4 	movhi	r2,2
   23080:	1092f744 	addi	r2,r2,19421
   23084:	108005c3 	ldbu	r2,23(r2)
   23088:	10803fcc 	andi	r2,r2,255
   2308c:	10800458 	cmpnei	r2,r2,17
   23090:	103ef71e 	bne	r2,zero,22c70 <simple_server+0x118>
        		&& buf[UDP_DST_PORT_H_P] == (myudpport>>8)
   23094:	008000b4 	movhi	r2,2
   23098:	1092f744 	addi	r2,r2,19421
   2309c:	10800903 	ldbu	r2,36(r2)
   230a0:	10c03fcc 	andi	r3,r2,255
   230a4:	d0a00417 	ldw	r2,-32752(gp)
   230a8:	1004d23a 	srli	r2,r2,8
   230ac:	18bef01e 	bne	r3,r2,22c70 <simple_server+0x118>
        		&& buf[UDP_DST_PORT_L_P] == (myudpport&0xff) ) {
   230b0:	008000b4 	movhi	r2,2
   230b4:	1092f744 	addi	r2,r2,19421
   230b8:	10800943 	ldbu	r2,37(r2)
   230bc:	10c03fcc 	andi	r3,r2,255
   230c0:	d0a00417 	ldw	r2,-32752(gp)
   230c4:	10803fcc 	andi	r2,r2,255
   230c8:	18bee91e 	bne	r3,r2,22c70 <simple_server+0x118>
            for(i = UDP_DATA_P; i < UDP_DATA_P+10; i++) {
   230cc:	00800a84 	movi	r2,42
   230d0:	e0bfd315 	stw	r2,-180(fp)
   230d4:	00016e06 	br	23690 <simple_server+0xb38>
            	if(!(*(buf+i)==(MARK_INP>>8) && *(buf+i+1)==(MARK_INP&0xff))){
   230d8:	e0ffd317 	ldw	r3,-180(fp)
   230dc:	008000b4 	movhi	r2,2
   230e0:	1092f744 	addi	r2,r2,19421
   230e4:	1885883a 	add	r2,r3,r2
   230e8:	10800003 	ldbu	r2,0(r2)
   230ec:	10803fcc 	andi	r2,r2,255
   230f0:	10803798 	cmpnei	r2,r2,222
   230f4:	1000091e 	bne	r2,zero,2311c <simple_server+0x5c4>
   230f8:	e0bfd317 	ldw	r2,-180(fp)
   230fc:	10c00044 	addi	r3,r2,1
   23100:	008000b4 	movhi	r2,2
   23104:	1092f744 	addi	r2,r2,19421
   23108:	1885883a 	add	r2,r3,r2
   2310c:	10800003 	ldbu	r2,0(r2)
   23110:	10803fcc 	andi	r2,r2,255
   23114:	10802be0 	cmpeqi	r2,r2,175
   23118:	1000041e 	bne	r2,zero,2312c <simple_server+0x5d4>

        // udp start, we listen on udp port 1200=0x4B0
        if( buf[IP_PROTO_P] == IP_PROTO_UDP_V
        		&& buf[UDP_DST_PORT_H_P] == (myudpport>>8)
        		&& buf[UDP_DST_PORT_L_P] == (myudpport&0xff) ) {
            for(i = UDP_DATA_P; i < UDP_DATA_P+10; i++) {
   2311c:	e0bfd317 	ldw	r2,-180(fp)
   23120:	10800044 	addi	r2,r2,1
   23124:	e0bfd315 	stw	r2,-180(fp)
   23128:	00015906 	br	23690 <simple_server+0xb38>
            	if(!(*(buf+i)==(MARK_INP>>8) && *(buf+i+1)==(MARK_INP&0xff))){
            		continue;
            	}
            	cmd = *(buf+i+2) & 0xf0;
   2312c:	e0bfd317 	ldw	r2,-180(fp)
   23130:	10c00084 	addi	r3,r2,2
   23134:	008000b4 	movhi	r2,2
   23138:	1092f744 	addi	r2,r2,19421
   2313c:	1885883a 	add	r2,r3,r2
   23140:	10c00003 	ldbu	r3,0(r2)
   23144:	00bffc04 	movi	r2,-16
   23148:	1884703a 	and	r2,r3,r2
   2314c:	e0bfd545 	stb	r2,-171(fp)
            	switch(cmd){
   23150:	e0bfd543 	ldbu	r2,-171(fp)
   23154:	10c01c20 	cmpeqi	r3,r2,112
   23158:	18007e1e 	bne	r3,zero,23354 <simple_server+0x7fc>
   2315c:	10c01c48 	cmpgei	r3,r2,113
   23160:	1800101e 	bne	r3,zero,231a4 <simple_server+0x64c>
   23164:	10c00c20 	cmpeqi	r3,r2,48
   23168:	1800401e 	bne	r3,zero,2326c <simple_server+0x714>
   2316c:	10c00c48 	cmpgei	r3,r2,49
   23170:	1800051e 	bne	r3,zero,23188 <simple_server+0x630>
   23174:	10c00420 	cmpeqi	r3,r2,16
   23178:	18001a1e 	bne	r3,zero,231e4 <simple_server+0x68c>
   2317c:	10800820 	cmpeqi	r2,r2,32
   23180:	1000321e 	bne	r2,zero,2324c <simple_server+0x6f4>
   23184:	00013a06 	br	23670 <simple_server+0xb18>
   23188:	10c01420 	cmpeqi	r3,r2,80
   2318c:	1800541e 	bne	r3,zero,232e0 <simple_server+0x788>
   23190:	10c01820 	cmpeqi	r3,r2,96
   23194:	18005d1e 	bne	r3,zero,2330c <simple_server+0x7b4>
   23198:	10801020 	cmpeqi	r2,r2,64
   2319c:	10003c1e 	bne	r2,zero,23290 <simple_server+0x738>
   231a0:	00013306 	br	23670 <simple_server+0xb18>
   231a4:	10c02820 	cmpeqi	r3,r2,160
   231a8:	1800a61e 	bne	r3,zero,23444 <simple_server+0x8ec>
   231ac:	10c02848 	cmpgei	r3,r2,161
   231b0:	1800051e 	bne	r3,zero,231c8 <simple_server+0x670>
   231b4:	10c02020 	cmpeqi	r3,r2,128
   231b8:	1800701e 	bne	r3,zero,2337c <simple_server+0x824>
   231bc:	10802420 	cmpeqi	r2,r2,144
   231c0:	1000971e 	bne	r2,zero,23420 <simple_server+0x8c8>
   231c4:	00012a06 	br	23670 <simple_server+0xb18>
   231c8:	10c03020 	cmpeqi	r3,r2,192
   231cc:	1800bb1e 	bne	r3,zero,234bc <simple_server+0x964>
   231d0:	10c03420 	cmpeqi	r3,r2,208
   231d4:	1800f31e 	bne	r3,zero,235a4 <simple_server+0xa4c>
   231d8:	10802c20 	cmpeqi	r2,r2,176
   231dc:	1000ae1e 	bne	r2,zero,23498 <simple_server+0x940>
   231e0:	00012306 	br	23670 <simple_server+0xb18>
            	case CMD_INIT:
            		for(j = 0; j < BUFFER_SIZE; j++) bufUDP[j] = buf[j];
   231e4:	e03fd415 	stw	zero,-176(fp)
   231e8:	00000d06 	br	23220 <simple_server+0x6c8>
   231ec:	00c000b4 	movhi	r3,2
   231f0:	18d2f744 	addi	r3,r3,19421
   231f4:	e0bfd417 	ldw	r2,-176(fp)
   231f8:	1885883a 	add	r2,r3,r2
   231fc:	10c00003 	ldbu	r3,0(r2)
   23200:	010000b4 	movhi	r4,2
   23204:	2112ac04 	addi	r4,r4,19120
   23208:	e0bfd417 	ldw	r2,-176(fp)
   2320c:	2085883a 	add	r2,r4,r2
   23210:	10c00005 	stb	r3,0(r2)
   23214:	e0bfd417 	ldw	r2,-176(fp)
   23218:	10800044 	addi	r2,r2,1
   2321c:	e0bfd415 	stw	r2,-176(fp)
   23220:	e0bfd417 	ldw	r2,-176(fp)
   23224:	10804b30 	cmpltui	r2,r2,300
   23228:	103ff01e 	bne	r2,zero,231ec <simple_server+0x694>
            		respLen = makeCharResponse(cmd, MARK_OK, str);
   2322c:	e0ffd543 	ldbu	r3,-171(fp)
   23230:	e0bfd904 	addi	r2,fp,-156
   23234:	1809883a 	mov	r4,r3
   23238:	01400204 	movi	r5,8
   2323c:	100d883a 	mov	r6,r2
   23240:	00223ec0 	call	223ec <makeCharResponse>
   23244:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   23248:	00011b06 	br	236b8 <simple_server+0xb60>
            	case CMD_HELP:
            		respLen = makeCharResponse(cmd, MARK_OK, str);
   2324c:	e0ffd543 	ldbu	r3,-171(fp)
   23250:	e0bfd904 	addi	r2,fp,-156
   23254:	1809883a 	mov	r4,r3
   23258:	01400204 	movi	r5,8
   2325c:	100d883a 	mov	r6,r2
   23260:	00223ec0 	call	223ec <makeCharResponse>
   23264:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   23268:	00011306 	br	236b8 <simple_server+0xb60>
            	case CMD_INTR:
            		nSteps = 0;
   2326c:	e03ff20d 	sth	zero,-56(fp)
            		respLen = makeCharResponse(cmd, MARK_OK, str);
   23270:	e0ffd543 	ldbu	r3,-171(fp)
   23274:	e0bfd904 	addi	r2,fp,-156
   23278:	1809883a 	mov	r4,r3
   2327c:	01400204 	movi	r5,8
   23280:	100d883a 	mov	r6,r2
   23284:	00223ec0 	call	223ec <makeCharResponse>
   23288:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   2328c:	00010a06 	br	236b8 <simple_server+0xb60>
            	case CMD_ADDR:
            		// parsing addr
            		cAddr = *(buf+i+3);
   23290:	e0bfd317 	ldw	r2,-180(fp)
   23294:	10c000c4 	addi	r3,r2,3
   23298:	008000b4 	movhi	r2,2
   2329c:	1092f744 	addi	r2,r2,19421
   232a0:	1885883a 	add	r2,r3,r2
   232a4:	10800003 	ldbu	r2,0(r2)
   232a8:	e0bffa05 	stb	r2,-24(fp)
            		sendAddr(cAddr);
   232ac:	e0bffa03 	ldbu	r2,-24(fp)
   232b0:	10803fcc 	andi	r2,r2,255
   232b4:	1009883a 	mov	r4,r2
   232b8:	0021c240 	call	21c24 <sendAddr>
            		respLen = makeCharResponse(cmd, cAddr, str);
   232bc:	e13fd543 	ldbu	r4,-171(fp)
   232c0:	e0bffa03 	ldbu	r2,-24(fp)
   232c4:	10c03fcc 	andi	r3,r2,255
   232c8:	e0bfd904 	addi	r2,fp,-156
   232cc:	180b883a 	mov	r5,r3
   232d0:	100d883a 	mov	r6,r2
   232d4:	00223ec0 	call	223ec <makeCharResponse>
   232d8:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   232dc:	0000f606 	br	236b8 <simple_server+0xb60>
            	case CMD_RADDR:
            		// parsing raddr
            		cAddr = readAddr();
   232e0:	0021aac0 	call	21aac <readAddr>
   232e4:	e0bffa05 	stb	r2,-24(fp)
            		respLen = makeCharResponse(cmd, cAddr, str);
   232e8:	e13fd543 	ldbu	r4,-171(fp)
   232ec:	e0bffa03 	ldbu	r2,-24(fp)
   232f0:	10c03fcc 	andi	r3,r2,255
   232f4:	e0bfd904 	addi	r2,fp,-156
   232f8:	180b883a 	mov	r5,r3
   232fc:	100d883a 	mov	r6,r2
   23300:	00223ec0 	call	223ec <makeCharResponse>
   23304:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   23308:	0000eb06 	br	236b8 <simple_server+0xb60>
            	case CMD_DATA:
            		// parsing data
            		cWdata = *(buf+i+3);
   2330c:	e0bfd317 	ldw	r2,-180(fp)
   23310:	10c000c4 	addi	r3,r2,3
   23314:	008000b4 	movhi	r2,2
   23318:	1092f744 	addi	r2,r2,19421
   2331c:	1885883a 	add	r2,r3,r2
   23320:	10800003 	ldbu	r2,0(r2)
   23324:	e0bfd745 	stb	r2,-163(fp)
            		sendData(cWdata);
   23328:	e0bfd743 	ldbu	r2,-163(fp)
   2332c:	1009883a 	mov	r4,r2
   23330:	0021ba80 	call	21ba8 <sendData>
            		respLen = makeCharResponse(cmd, cWdata, str);
   23334:	e13fd543 	ldbu	r4,-171(fp)
   23338:	e0ffd743 	ldbu	r3,-163(fp)
   2333c:	e0bfd904 	addi	r2,fp,-156
   23340:	180b883a 	mov	r5,r3
   23344:	100d883a 	mov	r6,r2
   23348:	00223ec0 	call	223ec <makeCharResponse>
   2334c:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   23350:	0000d906 	br	236b8 <simple_server+0xb60>
            	case CMD_RDATA:
            		// parsing rdata
            		cRdata = readData();
   23354:	0021ad00 	call	21ad0 <readData>
   23358:	e0bfd785 	stb	r2,-162(fp)
            		respLen = makeCharResponse(cmd, cRdata, str);
   2335c:	e13fd543 	ldbu	r4,-171(fp)
   23360:	e0ffd783 	ldbu	r3,-162(fp)
   23364:	e0bfd904 	addi	r2,fp,-156
   23368:	180b883a 	mov	r5,r3
   2336c:	100d883a 	mov	r6,r2
   23370:	00223ec0 	call	223ec <makeCharResponse>
   23374:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   23378:	0000cf06 	br	236b8 <simple_server+0xb60>
            	case CMD_FRQ:
            		// parsing freq
            		freqInt = 0;
   2337c:	e03ff915 	stw	zero,-28(fp)
            		for (j=0;j<4;j++){ freqInt |= *(buf+i+3+j)<<8*(3-j); }
   23380:	e03fd415 	stw	zero,-176(fp)
   23384:	00001506 	br	233dc <simple_server+0x884>
   23388:	e0ffd317 	ldw	r3,-180(fp)
   2338c:	e0bfd417 	ldw	r2,-176(fp)
   23390:	1885883a 	add	r2,r3,r2
   23394:	10c000c4 	addi	r3,r2,3
   23398:	008000b4 	movhi	r2,2
   2339c:	1092f744 	addi	r2,r2,19421
   233a0:	1885883a 	add	r2,r3,r2
   233a4:	10800003 	ldbu	r2,0(r2)
   233a8:	14003fcc 	andi	r16,r2,255
   233ac:	e13fd417 	ldw	r4,-176(fp)
   233b0:	017ffe04 	movi	r5,-8
   233b4:	00236f00 	call	236f0 <__mulsi3>
   233b8:	10800604 	addi	r2,r2,24
   233bc:	8084983a 	sll	r2,r16,r2
   233c0:	1007883a 	mov	r3,r2
   233c4:	e0bff917 	ldw	r2,-28(fp)
   233c8:	1884b03a 	or	r2,r3,r2
   233cc:	e0bff915 	stw	r2,-28(fp)
   233d0:	e0bfd417 	ldw	r2,-176(fp)
   233d4:	10800044 	addi	r2,r2,1
   233d8:	e0bfd415 	stw	r2,-176(fp)
   233dc:	e0bfd417 	ldw	r2,-176(fp)
   233e0:	10800130 	cmpltui	r2,r2,4
   233e4:	103fe81e 	bne	r2,zero,23388 <simple_server+0x830>
            		sendFreq(&freqInt, &cAddr);
   233e8:	e0fff904 	addi	r3,fp,-28
   233ec:	e0bffa04 	addi	r2,fp,-24
   233f0:	1809883a 	mov	r4,r3
   233f4:	100b883a 	mov	r5,r2
   233f8:	00222080 	call	22208 <sendFreq>
            		respLen = makeIntResponse(cmd, MARK_OK, freqInt, str);
   233fc:	e13fd543 	ldbu	r4,-171(fp)
   23400:	e0fff917 	ldw	r3,-28(fp)
   23404:	e0bfd904 	addi	r2,fp,-156
   23408:	01400204 	movi	r5,8
   2340c:	180d883a 	mov	r6,r3
   23410:	100f883a 	mov	r7,r2
   23414:	00224600 	call	22460 <makeIntResponse>
   23418:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   2341c:	0000a606 	br	236b8 <simple_server+0xb60>
            	case CMD_RFRQ:
            		// parsing rfreq
            		respLen = makeIntResponse(cmd, MARK_OK, freqInt, str);
   23420:	e13fd543 	ldbu	r4,-171(fp)
   23424:	e0fff917 	ldw	r3,-28(fp)
   23428:	e0bfd904 	addi	r2,fp,-156
   2342c:	01400204 	movi	r5,8
   23430:	180d883a 	mov	r6,r3
   23434:	100f883a 	mov	r7,r2
   23438:	00224600 	call	22460 <makeIntResponse>
   2343c:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   23440:	00009d06 	br	236b8 <simple_server+0xb60>
            	case CMD_GATE:
            		// parsing gate
            		cGate = *(buf+i+3);
   23444:	e0bfd317 	ldw	r2,-180(fp)
   23448:	10c000c4 	addi	r3,r2,3
   2344c:	008000b4 	movhi	r2,2
   23450:	1092f744 	addi	r2,r2,19421
   23454:	1885883a 	add	r2,r3,r2
   23458:	10800003 	ldbu	r2,0(r2)
   2345c:	e0bff805 	stb	r2,-32(fp)
            		sendGate(&cGate, &cAddr);
   23460:	e0fff804 	addi	r3,fp,-32
   23464:	e0bffa04 	addi	r2,fp,-24
   23468:	1809883a 	mov	r4,r3
   2346c:	100b883a 	mov	r5,r2
   23470:	00222780 	call	22278 <sendGate>
            		respLen = makeCharResponse(cmd, cGate, str);
   23474:	e13fd543 	ldbu	r4,-171(fp)
   23478:	e0bff803 	ldbu	r2,-32(fp)
   2347c:	10c03fcc 	andi	r3,r2,255
   23480:	e0bfd904 	addi	r2,fp,-156
   23484:	180b883a 	mov	r5,r3
   23488:	100d883a 	mov	r6,r2
   2348c:	00223ec0 	call	223ec <makeCharResponse>
   23490:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   23494:	00008806 	br	236b8 <simple_server+0xb60>
            	case CMD_RGATE:
            		// parsing rgate
            		respLen = makeCharResponse(cmd, cGate, str);
   23498:	e13fd543 	ldbu	r4,-171(fp)
   2349c:	e0bff803 	ldbu	r2,-32(fp)
   234a0:	10c03fcc 	andi	r3,r2,255
   234a4:	e0bfd904 	addi	r2,fp,-156
   234a8:	180b883a 	mov	r5,r3
   234ac:	100d883a 	mov	r6,r2
   234b0:	00223ec0 	call	223ec <makeCharResponse>
   234b4:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   234b8:	00007f06 	br	236b8 <simple_server+0xb60>
            	case CMD_RST:
            		// reset
            		cAddr=0x01;
   234bc:	00800044 	movi	r2,1
   234c0:	e0bffa05 	stb	r2,-24(fp)
            		cWdata=0x02;
   234c4:	00800084 	movi	r2,2
   234c8:	e0bfd745 	stb	r2,-163(fp)
            		sendAddr(cAddr);
   234cc:	e0bffa03 	ldbu	r2,-24(fp)
   234d0:	10803fcc 	andi	r2,r2,255
   234d4:	1009883a 	mov	r4,r2
   234d8:	0021c240 	call	21c24 <sendAddr>
            		sendData(cWdata);
   234dc:	e0bfd743 	ldbu	r2,-163(fp)
   234e0:	1009883a 	mov	r4,r2
   234e4:	0021ba80 	call	21ba8 <sendData>
            		isRun = false;
   234e8:	e03fd505 	stb	zero,-172(fp)
            		nSteps = 0;
   234ec:	e03ff20d 	sth	zero,-56(fp)
            		step = 0;
   234f0:	e03ff28d 	sth	zero,-54(fp)
            		cTime = 0x01;
   234f4:	00800044 	movi	r2,1
   234f8:	e0bff305 	stb	r2,-52(fp)
            		cChannels = 0x0f;
   234fc:	008003c4 	movi	r2,15
   23500:	e0bfff05 	stb	r2,-4(fp)
            		for (j=0; j<4; j++) *(dac+j) = 0x800;
   23504:	e03fd415 	stw	zero,-176(fp)
   23508:	00000906 	br	23530 <simple_server+0x9d8>
   2350c:	e0bfd417 	ldw	r2,-176(fp)
   23510:	1085883a 	add	r2,r2,r2
   23514:	e0fff384 	addi	r3,fp,-50
   23518:	1885883a 	add	r2,r3,r2
   2351c:	00c20004 	movi	r3,2048
   23520:	10c0000d 	sth	r3,0(r2)
   23524:	e0bfd417 	ldw	r2,-176(fp)
   23528:	10800044 	addi	r2,r2,1
   2352c:	e0bfd415 	stw	r2,-176(fp)
   23530:	e0bfd417 	ldw	r2,-176(fp)
   23534:	10800130 	cmpltui	r2,r2,4
   23538:	103ff41e 	bne	r2,zero,2350c <simple_server+0x9b4>
            		calib = false;
   2353c:	e03ff585 	stb	zero,-42(fp)
            		for (j=0; j<4; j++) *(calibDAC+j) = 0x800;
   23540:	e03fd415 	stw	zero,-176(fp)
   23544:	00000906 	br	2356c <simple_server+0xa14>
   23548:	e0bfd417 	ldw	r2,-176(fp)
   2354c:	1085883a 	add	r2,r2,r2
   23550:	e0fff604 	addi	r3,fp,-40
   23554:	1885883a 	add	r2,r3,r2
   23558:	00c20004 	movi	r3,2048
   2355c:	10c0000d 	sth	r3,0(r2)
   23560:	e0bfd417 	ldw	r2,-176(fp)
   23564:	10800044 	addi	r2,r2,1
   23568:	e0bfd415 	stw	r2,-176(fp)
   2356c:	e0bfd417 	ldw	r2,-176(fp)
   23570:	10800130 	cmpltui	r2,r2,4
   23574:	103ff41e 	bne	r2,zero,23548 <simple_server+0x9f0>
            		cGate = 0;
   23578:	e03ff805 	stb	zero,-32(fp)
            		freqInt = 49989;
   2357c:	00b0d154 	movui	r2,49989
   23580:	e0bff915 	stw	r2,-28(fp)
            		respLen = makeCharResponse(cmd, MARK_OK, str);
   23584:	e0ffd543 	ldbu	r3,-171(fp)
   23588:	e0bfd904 	addi	r2,fp,-156
   2358c:	1809883a 	mov	r4,r3
   23590:	01400204 	movi	r5,8
   23594:	100d883a 	mov	r6,r2
   23598:	00223ec0 	call	223ec <makeCharResponse>
   2359c:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   235a0:	00004506 	br	236b8 <simple_server+0xb60>
            	case CMD_DAC:
                	// parsing dac data
                    if(!isRun) {
   235a4:	e0bfd503 	ldbu	r2,-172(fp)
   235a8:	1080005c 	xori	r2,r2,1
   235ac:	10803fcc 	andi	r2,r2,255
   235b0:	10001e26 	beq	r2,zero,2362c <simple_server+0xad4>
                        parseRun(dac, &cChannels,
   235b4:	e13ff384 	addi	r4,fp,-50
   235b8:	e17fff04 	addi	r5,fp,-4
   235bc:	e0fff304 	addi	r3,fp,-52
   235c0:	e0bff284 	addi	r2,fp,-54
   235c4:	e1bff204 	addi	r6,fp,-56
   235c8:	d9800015 	stw	r6,0(sp)
   235cc:	e1bff584 	addi	r6,fp,-42
   235d0:	d9800115 	stw	r6,4(sp)
   235d4:	180d883a 	mov	r6,r3
   235d8:	100f883a 	mov	r7,r2
   235dc:	0022a0c0 	call	22a0c <parseRun>
                        		&cTime, &step, &nSteps,
                        		&calib);
                        isRun = true;
   235e0:	00800044 	movi	r2,1
   235e4:	e0bfd505 	stb	r2,-172(fp)
                        sendRun(cChannels, cTime,  &cAddr, dac);
   235e8:	e0bfff03 	ldbu	r2,-4(fp)
   235ec:	11003fcc 	andi	r4,r2,255
   235f0:	e0bff303 	ldbu	r2,-52(fp)
   235f4:	11403fcc 	andi	r5,r2,255
   235f8:	e0fffa04 	addi	r3,fp,-24
   235fc:	e0bff384 	addi	r2,fp,-50
   23600:	180d883a 	mov	r6,r3
   23604:	100f883a 	mov	r7,r2
   23608:	00221940 	call	22194 <sendRun>
                    else {
                    	respLen = makeIntResponse(cmd, MARK_BUSY,
                    			cTime*nSteps, str); // specify the run length in seconds here
                        goto ANSWER;
                    }
                    respLen = makeCharResponse(cmd, MARK_OK, str);
   2360c:	e0ffd543 	ldbu	r3,-171(fp)
   23610:	e0bfd904 	addi	r2,fp,-156
   23614:	1809883a 	mov	r4,r3
   23618:	01400204 	movi	r5,8
   2361c:	100d883a 	mov	r6,r2
   23620:	00223ec0 	call	223ec <makeCharResponse>
   23624:	e0bfd615 	stw	r2,-168(fp)
                    goto ANSWER;
   23628:	00002306 	br	236b8 <simple_server+0xb60>
                        		&calib);
                        isRun = true;
                        sendRun(cChannels, cTime,  &cAddr, dac);
                    }
                    else {
                    	respLen = makeIntResponse(cmd, MARK_BUSY,
   2362c:	e43fd543 	ldbu	r16,-171(fp)
                    			cTime*nSteps, str); // specify the run length in seconds here
   23630:	e0bff303 	ldbu	r2,-52(fp)
   23634:	10c03fcc 	andi	r3,r2,255
   23638:	e0bff20b 	ldhu	r2,-56(fp)
   2363c:	10bfffcc 	andi	r2,r2,65535
   23640:	1809883a 	mov	r4,r3
   23644:	100b883a 	mov	r5,r2
   23648:	00236f00 	call	236f0 <__mulsi3>
                        		&calib);
                        isRun = true;
                        sendRun(cChannels, cTime,  &cAddr, dac);
                    }
                    else {
                    	respLen = makeIntResponse(cmd, MARK_BUSY,
   2364c:	1007883a 	mov	r3,r2
                    			cTime*nSteps, str); // specify the run length in seconds here
   23650:	e0bfd904 	addi	r2,fp,-156
                        		&calib);
                        isRun = true;
                        sendRun(cChannels, cTime,  &cAddr, dac);
                    }
                    else {
                    	respLen = makeIntResponse(cmd, MARK_BUSY,
   23654:	8009883a 	mov	r4,r16
   23658:	01400084 	movi	r5,2
   2365c:	180d883a 	mov	r6,r3
   23660:	100f883a 	mov	r7,r2
   23664:	00224600 	call	22460 <makeIntResponse>
   23668:	e0bfd615 	stw	r2,-168(fp)
                    			cTime*nSteps, str); // specify the run length in seconds here
                        goto ANSWER;
   2366c:	00001206 	br	236b8 <simple_server+0xb60>
                    }
                    respLen = makeCharResponse(cmd, MARK_OK, str);
                    goto ANSWER;
            	default:
            		respLen = makeCharResponse(cmd, MARK_ERR, str);
   23670:	e0ffd543 	ldbu	r3,-171(fp)
   23674:	e0bfd904 	addi	r2,fp,-156
   23678:	1809883a 	mov	r4,r3
   2367c:	01400044 	movi	r5,1
   23680:	100d883a 	mov	r6,r2
   23684:	00223ec0 	call	223ec <makeCharResponse>
   23688:	e0bfd615 	stw	r2,-168(fp)
            		goto ANSWER;
   2368c:	00000a06 	br	236b8 <simple_server+0xb60>

        // udp start, we listen on udp port 1200=0x4B0
        if( buf[IP_PROTO_P] == IP_PROTO_UDP_V
        		&& buf[UDP_DST_PORT_H_P] == (myudpport>>8)
        		&& buf[UDP_DST_PORT_L_P] == (myudpport&0xff) ) {
            for(i = UDP_DATA_P; i < UDP_DATA_P+10; i++) {
   23690:	e0bfd317 	ldw	r2,-180(fp)
   23694:	10800d30 	cmpltui	r2,r2,52
   23698:	103e8f1e 	bne	r2,zero,230d8 <simple_server+0x580>
            	default:
            		respLen = makeCharResponse(cmd, MARK_ERR, str);
            		goto ANSWER;
                }
            }
            respLen = makeCharResponse(cmd, MARK_ERR, str);
   2369c:	e0ffd543 	ldbu	r3,-171(fp)
   236a0:	e0bfd904 	addi	r2,fp,-156
   236a4:	1809883a 	mov	r4,r3
   236a8:	01400044 	movi	r5,1
   236ac:	100d883a 	mov	r6,r2
   236b0:	00223ec0 	call	223ec <makeCharResponse>
   236b4:	e0bfd615 	stw	r2,-168(fp)
            ANSWER: make_udp_reply_from_request(buf,
   236b8:	e0bfd617 	ldw	r2,-168(fp)
   236bc:	10c03fcc 	andi	r3,r2,255
   236c0:	d0a00417 	ldw	r2,-32752(gp)
            		(char*)str, respLen, myudpport);
   236c4:	e17fd904 	addi	r5,fp,-156
            		respLen = makeCharResponse(cmd, MARK_ERR, str);
            		goto ANSWER;
                }
            }
            respLen = makeCharResponse(cmd, MARK_ERR, str);
            ANSWER: make_udp_reply_from_request(buf,
   236c8:	010000b4 	movhi	r4,2
   236cc:	2112f744 	addi	r4,r4,19421
   236d0:	180d883a 	mov	r6,r3
   236d4:	100f883a 	mov	r7,r2
   236d8:	00209bc0 	call	209bc <make_udp_reply_from_request>
            		(char*)str, respLen, myudpport);
        }
        // UDP end
    }
   236dc:	003d6406 	br	22c70 <simple_server+0x118>
            }
        }

        plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
        if(plen == 0) {
            continue;
   236e0:	0001883a 	nop
   236e4:	00000106 	br	236ec <simple_server+0xb94>
            make_arp_answer_from_request(buf);
            continue;
        }

        if(eth_type_is_ip_and_my_ip(buf, plen) == 0) {
            continue;
   236e8:	0001883a 	nop
            respLen = makeCharResponse(cmd, MARK_ERR, str);
            ANSWER: make_udp_reply_from_request(buf,
            		(char*)str, respLen, myudpport);
        }
        // UDP end
    }
   236ec:	003d6006 	br	22c70 <simple_server+0x118>

000236f0 <__mulsi3>:
   236f0:	0005883a 	mov	r2,zero
   236f4:	20000726 	beq	r4,zero,23714 <__mulsi3+0x24>
   236f8:	20c0004c 	andi	r3,r4,1
   236fc:	2008d07a 	srli	r4,r4,1
   23700:	18000126 	beq	r3,zero,23708 <__mulsi3+0x18>
   23704:	1145883a 	add	r2,r2,r5
   23708:	294b883a 	add	r5,r5,r5
   2370c:	203ffa1e 	bne	r4,zero,236f8 <__mulsi3+0x8>
   23710:	f800283a 	ret
   23714:	f800283a 	ret

00023718 <memset>:
   23718:	2005883a 	mov	r2,r4
   2371c:	30000526 	beq	r6,zero,23734 <memset+0x1c>
   23720:	218d883a 	add	r6,r4,r6
   23724:	2007883a 	mov	r3,r4
   23728:	19400005 	stb	r5,0(r3)
   2372c:	18c00044 	addi	r3,r3,1
   23730:	19bffd1e 	bne	r3,r6,23728 <memset+0x10>
   23734:	f800283a 	ret

00023738 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23738:	defffc04 	addi	sp,sp,-16
   2373c:	df000315 	stw	fp,12(sp)
   23740:	df000304 	addi	fp,sp,12
   23744:	e13ffd15 	stw	r4,-12(fp)
   23748:	e17ffe15 	stw	r5,-8(fp)
   2374c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23750:	e0fffe17 	ldw	r3,-8(fp)
   23754:	e0bffd17 	ldw	r2,-12(fp)
   23758:	18800e26 	beq	r3,r2,23794 <alt_load_section+0x5c>
  {
    while( to != end )
   2375c:	00000a06 	br	23788 <alt_load_section+0x50>
    {
      *to++ = *from++;
   23760:	e0bffd17 	ldw	r2,-12(fp)
   23764:	10c00017 	ldw	r3,0(r2)
   23768:	e0bffe17 	ldw	r2,-8(fp)
   2376c:	10c00015 	stw	r3,0(r2)
   23770:	e0bffe17 	ldw	r2,-8(fp)
   23774:	10800104 	addi	r2,r2,4
   23778:	e0bffe15 	stw	r2,-8(fp)
   2377c:	e0bffd17 	ldw	r2,-12(fp)
   23780:	10800104 	addi	r2,r2,4
   23784:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23788:	e0fffe17 	ldw	r3,-8(fp)
   2378c:	e0bfff17 	ldw	r2,-4(fp)
   23790:	18bff31e 	bne	r3,r2,23760 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   23794:	e037883a 	mov	sp,fp
   23798:	df000017 	ldw	fp,0(sp)
   2379c:	dec00104 	addi	sp,sp,4
   237a0:	f800283a 	ret

000237a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   237a4:	defffe04 	addi	sp,sp,-8
   237a8:	dfc00115 	stw	ra,4(sp)
   237ac:	df000015 	stw	fp,0(sp)
   237b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   237b4:	010000b4 	movhi	r4,2
   237b8:	21122104 	addi	r4,r4,18564
   237bc:	014000b4 	movhi	r5,2
   237c0:	2951a004 	addi	r5,r5,18048
   237c4:	018000b4 	movhi	r6,2
   237c8:	31922104 	addi	r6,r6,18564
   237cc:	00237380 	call	23738 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   237d0:	010000b4 	movhi	r4,2
   237d4:	21000804 	addi	r4,r4,32
   237d8:	014000b4 	movhi	r5,2
   237dc:	29400804 	addi	r5,r5,32
   237e0:	018000b4 	movhi	r6,2
   237e4:	31800804 	addi	r6,r6,32
   237e8:	00237380 	call	23738 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   237ec:	010000b4 	movhi	r4,2
   237f0:	21119504 	addi	r4,r4,18004
   237f4:	014000b4 	movhi	r5,2
   237f8:	29519504 	addi	r5,r5,18004
   237fc:	018000b4 	movhi	r6,2
   23800:	3191a004 	addi	r6,r6,18048
   23804:	00237380 	call	23738 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23808:	0023d880 	call	23d88 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2380c:	0023ec00 	call	23ec0 <alt_icache_flush_all>
}
   23810:	e037883a 	mov	sp,fp
   23814:	dfc00117 	ldw	ra,4(sp)
   23818:	df000017 	ldw	fp,0(sp)
   2381c:	dec00204 	addi	sp,sp,8
   23820:	f800283a 	ret

00023824 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23824:	defffe04 	addi	sp,sp,-8
   23828:	dfc00115 	stw	ra,4(sp)
   2382c:	df000015 	stw	fp,0(sp)
   23830:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23834:	0009883a 	mov	r4,zero
   23838:	00238c40 	call	238c4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2383c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23840:	00238f80 	call	238f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23844:	010000b4 	movhi	r4,2
   23848:	21119504 	addi	r4,r4,18004
   2384c:	014000b4 	movhi	r5,2
   23850:	29519504 	addi	r5,r5,18004
   23854:	018000b4 	movhi	r6,2
   23858:	31919504 	addi	r6,r6,18004
   2385c:	0023fbc0 	call	23fbc <alt_io_redirect>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   23860:	d1209317 	ldw	r4,-32180(gp)
   23864:	d0e09417 	ldw	r3,-32176(gp)
   23868:	d0a09517 	ldw	r2,-32172(gp)
   2386c:	180b883a 	mov	r5,r3
   23870:	100d883a 	mov	r6,r2
   23874:	0020ffc0 	call	20ffc <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   23878:	e037883a 	mov	sp,fp
   2387c:	dfc00117 	ldw	ra,4(sp)
   23880:	df000017 	ldw	fp,0(sp)
   23884:	dec00204 	addi	sp,sp,8
   23888:	f800283a 	ret

0002388c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2388c:	defffd04 	addi	sp,sp,-12
   23890:	dfc00215 	stw	ra,8(sp)
   23894:	df000115 	stw	fp,4(sp)
   23898:	df000104 	addi	fp,sp,4
   2389c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   238a0:	e13fff17 	ldw	r4,-4(fp)
   238a4:	014000b4 	movhi	r5,2
   238a8:	29521d04 	addi	r5,r5,18548
   238ac:	0023e200 	call	23e20 <alt_dev_llist_insert>
}
   238b0:	e037883a 	mov	sp,fp
   238b4:	dfc00117 	ldw	ra,4(sp)
   238b8:	df000017 	ldw	fp,0(sp)
   238bc:	dec00204 	addi	sp,sp,8
   238c0:	f800283a 	ret

000238c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   238c4:	defffd04 	addi	sp,sp,-12
   238c8:	dfc00215 	stw	ra,8(sp)
   238cc:	df000115 	stw	fp,4(sp)
   238d0:	df000104 	addi	fp,sp,4
   238d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   238d8:	002434c0 	call	2434c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   238dc:	00800044 	movi	r2,1
   238e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   238e4:	e037883a 	mov	sp,fp
   238e8:	dfc00117 	ldw	ra,4(sp)
   238ec:	df000017 	ldw	fp,0(sp)
   238f0:	dec00204 	addi	sp,sp,8
   238f4:	f800283a 	ret

000238f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   238f8:	defffe04 	addi	sp,sp,-8
   238fc:	dfc00115 	stw	ra,4(sp)
   23900:	df000015 	stw	fp,0(sp)
   23904:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
   23908:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   2390c:	010000b4 	movhi	r4,2
   23910:	2111a004 	addi	r4,r4,18048
   23914:	002388c0 	call	2388c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( LAN, LAN);
   23918:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   2391c:	0001883a 	nop
}
   23920:	e037883a 	mov	sp,fp
   23924:	dfc00117 	ldw	ra,4(sp)
   23928:	df000017 	ldw	fp,0(sp)
   2392c:	dec00204 	addi	sp,sp,8
   23930:	f800283a 	ret

00023934 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23934:	defffa04 	addi	sp,sp,-24
   23938:	dfc00515 	stw	ra,20(sp)
   2393c:	df000415 	stw	fp,16(sp)
   23940:	df000404 	addi	fp,sp,16
   23944:	e13ffd15 	stw	r4,-12(fp)
   23948:	e17ffe15 	stw	r5,-8(fp)
   2394c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23950:	e0bffd17 	ldw	r2,-12(fp)
   23954:	10800017 	ldw	r2,0(r2)
   23958:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2395c:	e0bffc17 	ldw	r2,-16(fp)
   23960:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   23964:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23968:	10800217 	ldw	r2,8(r2)
   2396c:	1809883a 	mov	r4,r3
   23970:	e17ffe17 	ldw	r5,-8(fp)
   23974:	e1bfff17 	ldw	r6,-4(fp)
   23978:	100f883a 	mov	r7,r2
   2397c:	00239f40 	call	239f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23980:	e037883a 	mov	sp,fp
   23984:	dfc00117 	ldw	ra,4(sp)
   23988:	df000017 	ldw	fp,0(sp)
   2398c:	dec00204 	addi	sp,sp,8
   23990:	f800283a 	ret

00023994 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23994:	defffa04 	addi	sp,sp,-24
   23998:	dfc00515 	stw	ra,20(sp)
   2399c:	df000415 	stw	fp,16(sp)
   239a0:	df000404 	addi	fp,sp,16
   239a4:	e13ffd15 	stw	r4,-12(fp)
   239a8:	e17ffe15 	stw	r5,-8(fp)
   239ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   239b0:	e0bffd17 	ldw	r2,-12(fp)
   239b4:	10800017 	ldw	r2,0(r2)
   239b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   239bc:	e0bffc17 	ldw	r2,-16(fp)
   239c0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   239c4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   239c8:	10800217 	ldw	r2,8(r2)
   239cc:	1809883a 	mov	r4,r3
   239d0:	e17ffe17 	ldw	r5,-8(fp)
   239d4:	e1bfff17 	ldw	r6,-4(fp)
   239d8:	100f883a 	mov	r7,r2
   239dc:	0023ae80 	call	23ae8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   239e0:	e037883a 	mov	sp,fp
   239e4:	dfc00117 	ldw	ra,4(sp)
   239e8:	df000017 	ldw	fp,0(sp)
   239ec:	dec00204 	addi	sp,sp,8
   239f0:	f800283a 	ret

000239f4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   239f4:	defff704 	addi	sp,sp,-36
   239f8:	df000815 	stw	fp,32(sp)
   239fc:	df000804 	addi	fp,sp,32
   23a00:	e13ffc15 	stw	r4,-16(fp)
   23a04:	e17ffd15 	stw	r5,-12(fp)
   23a08:	e1bffe15 	stw	r6,-8(fp)
   23a0c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23a10:	e0bffc17 	ldw	r2,-16(fp)
   23a14:	10800017 	ldw	r2,0(r2)
   23a18:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   23a1c:	e0bffd17 	ldw	r2,-12(fp)
   23a20:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   23a24:	e0bffe17 	ldw	r2,-8(fp)
   23a28:	e0fffd17 	ldw	r3,-12(fp)
   23a2c:	1885883a 	add	r2,r3,r2
   23a30:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   23a34:	00001406 	br	23a88 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23a38:	e0bff917 	ldw	r2,-28(fp)
   23a3c:	10800037 	ldwio	r2,0(r2)
   23a40:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   23a44:	e0bffb17 	ldw	r2,-20(fp)
   23a48:	10a0000c 	andi	r2,r2,32768
   23a4c:	10000826 	beq	r2,zero,23a70 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23a50:	e0bffb17 	ldw	r2,-20(fp)
   23a54:	1007883a 	mov	r3,r2
   23a58:	e0bff817 	ldw	r2,-32(fp)
   23a5c:	10c00005 	stb	r3,0(r2)
   23a60:	e0bff817 	ldw	r2,-32(fp)
   23a64:	10800044 	addi	r2,r2,1
   23a68:	e0bff815 	stw	r2,-32(fp)
   23a6c:	00000606 	br	23a88 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   23a70:	e0fff817 	ldw	r3,-32(fp)
   23a74:	e0bffd17 	ldw	r2,-12(fp)
   23a78:	1880071e 	bne	r3,r2,23a98 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
   23a7c:	e0bfff17 	ldw	r2,-4(fp)
   23a80:	1090000c 	andi	r2,r2,16384
   23a84:	1000061e 	bne	r2,zero,23aa0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   23a88:	e0fff817 	ldw	r3,-32(fp)
   23a8c:	e0bffa17 	ldw	r2,-24(fp)
   23a90:	18bfe936 	bltu	r3,r2,23a38 <altera_avalon_jtag_uart_read+0x44>
   23a94:	00000306 	br	23aa4 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   23a98:	0001883a 	nop
   23a9c:	00000106 	br	23aa4 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
   23aa0:	0001883a 	nop
    
  }

  if (ptr != buffer)
   23aa4:	e0fff817 	ldw	r3,-32(fp)
   23aa8:	e0bffd17 	ldw	r2,-12(fp)
   23aac:	18800426 	beq	r3,r2,23ac0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   23ab0:	e0fff817 	ldw	r3,-32(fp)
   23ab4:	e0bffd17 	ldw	r2,-12(fp)
   23ab8:	1885c83a 	sub	r2,r3,r2
   23abc:	00000606 	br	23ad8 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
   23ac0:	e0bfff17 	ldw	r2,-4(fp)
   23ac4:	1090000c 	andi	r2,r2,16384
   23ac8:	10000226 	beq	r2,zero,23ad4 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
   23acc:	00bffd44 	movi	r2,-11
   23ad0:	00000106 	br	23ad8 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
   23ad4:	00bffec4 	movi	r2,-5
}
   23ad8:	e037883a 	mov	sp,fp
   23adc:	df000017 	ldw	fp,0(sp)
   23ae0:	dec00104 	addi	sp,sp,4
   23ae4:	f800283a 	ret

00023ae8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23ae8:	defff904 	addi	sp,sp,-28
   23aec:	df000615 	stw	fp,24(sp)
   23af0:	df000604 	addi	fp,sp,24
   23af4:	e13ffc15 	stw	r4,-16(fp)
   23af8:	e17ffd15 	stw	r5,-12(fp)
   23afc:	e1bffe15 	stw	r6,-8(fp)
   23b00:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23b04:	e0bffc17 	ldw	r2,-16(fp)
   23b08:	10800017 	ldw	r2,0(r2)
   23b0c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   23b10:	e0bffe17 	ldw	r2,-8(fp)
   23b14:	e0fffd17 	ldw	r3,-12(fp)
   23b18:	1885883a 	add	r2,r3,r2
   23b1c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   23b20:	00000f06 	br	23b60 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   23b24:	e0bffa17 	ldw	r2,-24(fp)
   23b28:	10800104 	addi	r2,r2,4
   23b2c:	10800037 	ldwio	r2,0(r2)
   23b30:	10bfffec 	andhi	r2,r2,65535
   23b34:	10000a26 	beq	r2,zero,23b60 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   23b38:	e0bffa17 	ldw	r2,-24(fp)
   23b3c:	e0fffd17 	ldw	r3,-12(fp)
   23b40:	18c00003 	ldbu	r3,0(r3)
   23b44:	18c03fcc 	andi	r3,r3,255
   23b48:	18c0201c 	xori	r3,r3,128
   23b4c:	18ffe004 	addi	r3,r3,-128
   23b50:	e13ffd17 	ldw	r4,-12(fp)
   23b54:	21000044 	addi	r4,r4,1
   23b58:	e13ffd15 	stw	r4,-12(fp)
   23b5c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   23b60:	e0fffd17 	ldw	r3,-12(fp)
   23b64:	e0bffb17 	ldw	r2,-20(fp)
   23b68:	18bfee36 	bltu	r3,r2,23b24 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   23b6c:	e0bffe17 	ldw	r2,-8(fp)
}
   23b70:	e037883a 	mov	sp,fp
   23b74:	df000017 	ldw	fp,0(sp)
   23b78:	dec00104 	addi	sp,sp,4
   23b7c:	f800283a 	ret

00023b80 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   23b80:	defff404 	addi	sp,sp,-48
   23b84:	df000b15 	stw	fp,44(sp)
   23b88:	df000b04 	addi	fp,sp,44
   23b8c:	e13ffc15 	stw	r4,-16(fp)
   23b90:	e17ffd15 	stw	r5,-12(fp)
   23b94:	e1bffe15 	stw	r6,-8(fp)
   23b98:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   23b9c:	e0ffff17 	ldw	r3,-4(fp)
   23ba0:	e0bffe17 	ldw	r2,-8(fp)
   23ba4:	1885883a 	add	r2,r3,r2
   23ba8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   23bac:	e0c00217 	ldw	r3,8(fp)
   23bb0:	e0800117 	ldw	r2,4(fp)
   23bb4:	1885883a 	add	r2,r3,r2
   23bb8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   23bbc:	e0800117 	ldw	r2,4(fp)
   23bc0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   23bc4:	e0bffe17 	ldw	r2,-8(fp)
   23bc8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   23bcc:	00800044 	movi	r2,1
   23bd0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   23bd4:	e0bffc17 	ldw	r2,-16(fp)
   23bd8:	10800504 	addi	r2,r2,20
   23bdc:	e0fffd17 	ldw	r3,-12(fp)
   23be0:	01000044 	movi	r4,1
   23be4:	20c6983a 	sll	r3,r4,r3
   23be8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   23bec:	e0800317 	ldw	r2,12(fp)
   23bf0:	1080008c 	andi	r2,r2,2
   23bf4:	1000041e 	bne	r2,zero,23c08 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   23bf8:	e0bffc17 	ldw	r2,-16(fp)
   23bfc:	10800304 	addi	r2,r2,12
   23c00:	00c10004 	movi	r3,1024
   23c04:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   23c08:	e0bffc17 	ldw	r2,-16(fp)
   23c0c:	10800037 	ldwio	r2,0(r2)
   23c10:	00000106 	br	23c18 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
   23c14:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   23c18:	e0bffc17 	ldw	r2,-16(fp)
   23c1c:	10800204 	addi	r2,r2,8
   23c20:	10800037 	ldwio	r2,0(r2)
   23c24:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   23c28:	e0bffa17 	ldw	r2,-24(fp)
   23c2c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   23c30:	10000226 	beq	r2,zero,23c3c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   23c34:	e0bff717 	ldw	r2,-36(fp)
   23c38:	1000031e 	bne	r2,zero,23c48 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   23c3c:	e0bffa17 	ldw	r2,-24(fp)
   23c40:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   23c44:	103ff426 	beq	r2,zero,23c18 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   23c48:	e0bffa17 	ldw	r2,-24(fp)
   23c4c:	1080100c 	andi	r2,r2,64
   23c50:	10001e26 	beq	r2,zero,23ccc <alt_avalon_spi_command+0x14c>
   23c54:	e0bff717 	ldw	r2,-36(fp)
   23c58:	00801c0e 	bge	zero,r2,23ccc <alt_avalon_spi_command+0x14c>
    {
      credits--;
   23c5c:	e0bff717 	ldw	r2,-36(fp)
   23c60:	10bfffc4 	addi	r2,r2,-1
   23c64:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   23c68:	e0ffff17 	ldw	r3,-4(fp)
   23c6c:	e0bff817 	ldw	r2,-32(fp)
   23c70:	18800a2e 	bgeu	r3,r2,23c9c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   23c74:	e0bffc17 	ldw	r2,-16(fp)
   23c78:	10800104 	addi	r2,r2,4
   23c7c:	e0ffff17 	ldw	r3,-4(fp)
   23c80:	18c00003 	ldbu	r3,0(r3)
   23c84:	18c03fcc 	andi	r3,r3,255
   23c88:	e13fff17 	ldw	r4,-4(fp)
   23c8c:	21000044 	addi	r4,r4,1
   23c90:	e13fff15 	stw	r4,-4(fp)
   23c94:	10c00035 	stwio	r3,0(r2)
   23c98:	00000c06 	br	23ccc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   23c9c:	e0bff517 	ldw	r2,-44(fp)
   23ca0:	10000826 	beq	r2,zero,23cc4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   23ca4:	e0bff517 	ldw	r2,-44(fp)
   23ca8:	10bfffc4 	addi	r2,r2,-1
   23cac:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   23cb0:	e0bffc17 	ldw	r2,-16(fp)
   23cb4:	10800104 	addi	r2,r2,4
   23cb8:	0007883a 	mov	r3,zero
   23cbc:	10c00035 	stwio	r3,0(r2)
   23cc0:	00000206 	br	23ccc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   23cc4:	00bf0004 	movi	r2,-1024
   23cc8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   23ccc:	e0bffa17 	ldw	r2,-24(fp)
   23cd0:	1080200c 	andi	r2,r2,128
   23cd4:	103fcf26 	beq	r2,zero,23c14 <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   23cd8:	e0bffc17 	ldw	r2,-16(fp)
   23cdc:	10800037 	ldwio	r2,0(r2)
   23ce0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   23ce4:	e0bff617 	ldw	r2,-40(fp)
   23ce8:	10000426 	beq	r2,zero,23cfc <alt_avalon_spi_command+0x17c>
        read_ignore--;
   23cec:	e0bff617 	ldw	r2,-40(fp)
   23cf0:	10bfffc4 	addi	r2,r2,-1
   23cf4:	e0bff615 	stw	r2,-40(fp)
   23cf8:	00000706 	br	23d18 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
   23cfc:	e0bffb17 	ldw	r2,-20(fp)
   23d00:	1007883a 	mov	r3,r2
   23d04:	e0800217 	ldw	r2,8(fp)
   23d08:	10c00005 	stb	r3,0(r2)
   23d0c:	e0800217 	ldw	r2,8(fp)
   23d10:	10800044 	addi	r2,r2,1
   23d14:	e0800215 	stw	r2,8(fp)
      credits++;
   23d18:	e0bff717 	ldw	r2,-36(fp)
   23d1c:	10800044 	addi	r2,r2,1
   23d20:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   23d24:	e0bff617 	ldw	r2,-40(fp)
   23d28:	103fba1e 	bne	r2,zero,23c14 <alt_avalon_spi_command+0x94>
   23d2c:	e0c00217 	ldw	r3,8(fp)
   23d30:	e0bff917 	ldw	r2,-28(fp)
   23d34:	18bfb71e 	bne	r3,r2,23c14 <alt_avalon_spi_command+0x94>
        break;
   23d38:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   23d3c:	e0bffc17 	ldw	r2,-16(fp)
   23d40:	10800204 	addi	r2,r2,8
   23d44:	10800037 	ldwio	r2,0(r2)
   23d48:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   23d4c:	e0bffa17 	ldw	r2,-24(fp)
   23d50:	1080080c 	andi	r2,r2,32
   23d54:	103ff926 	beq	r2,zero,23d3c <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   23d58:	e0800317 	ldw	r2,12(fp)
   23d5c:	1080004c 	andi	r2,r2,1
   23d60:	1000041e 	bne	r2,zero,23d74 <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   23d64:	e0bffc17 	ldw	r2,-16(fp)
   23d68:	10800304 	addi	r2,r2,12
   23d6c:	0007883a 	mov	r3,zero
   23d70:	10c00035 	stwio	r3,0(r2)

  return read_length;
   23d74:	e0800117 	ldw	r2,4(fp)
}
   23d78:	e037883a 	mov	sp,fp
   23d7c:	df000017 	ldw	fp,0(sp)
   23d80:	dec00104 	addi	sp,sp,4
   23d84:	f800283a 	ret

00023d88 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23d88:	deffff04 	addi	sp,sp,-4
   23d8c:	df000015 	stw	fp,0(sp)
   23d90:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23d94:	e037883a 	mov	sp,fp
   23d98:	df000017 	ldw	fp,0(sp)
   23d9c:	dec00104 	addi	sp,sp,4
   23da0:	f800283a 	ret

00023da4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23da4:	defffc04 	addi	sp,sp,-16
   23da8:	df000315 	stw	fp,12(sp)
   23dac:	df000304 	addi	fp,sp,12
   23db0:	e13ffd15 	stw	r4,-12(fp)
   23db4:	e17ffe15 	stw	r5,-8(fp)
   23db8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23dbc:	e0bfff17 	ldw	r2,-4(fp)
}
   23dc0:	e037883a 	mov	sp,fp
   23dc4:	df000017 	ldw	fp,0(sp)
   23dc8:	dec00104 	addi	sp,sp,4
   23dcc:	f800283a 	ret

00023dd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23dd0:	defffe04 	addi	sp,sp,-8
   23dd4:	dfc00115 	stw	ra,4(sp)
   23dd8:	df000015 	stw	fp,0(sp)
   23ddc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23de0:	008000b4 	movhi	r2,2
   23de4:	10922004 	addi	r2,r2,18560
   23de8:	10800017 	ldw	r2,0(r2)
   23dec:	10000526 	beq	r2,zero,23e04 <alt_get_errno+0x34>
   23df0:	008000b4 	movhi	r2,2
   23df4:	10922004 	addi	r2,r2,18560
   23df8:	10800017 	ldw	r2,0(r2)
   23dfc:	103ee83a 	callr	r2
   23e00:	00000206 	br	23e0c <alt_get_errno+0x3c>
   23e04:	008000b4 	movhi	r2,2
   23e08:	1092ab04 	addi	r2,r2,19116
}
   23e0c:	e037883a 	mov	sp,fp
   23e10:	dfc00117 	ldw	ra,4(sp)
   23e14:	df000017 	ldw	fp,0(sp)
   23e18:	dec00204 	addi	sp,sp,8
   23e1c:	f800283a 	ret

00023e20 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   23e20:	defffa04 	addi	sp,sp,-24
   23e24:	dfc00515 	stw	ra,20(sp)
   23e28:	df000415 	stw	fp,16(sp)
   23e2c:	df000404 	addi	fp,sp,16
   23e30:	e13ffe15 	stw	r4,-8(fp)
   23e34:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   23e38:	e0bffe17 	ldw	r2,-8(fp)
   23e3c:	10000326 	beq	r2,zero,23e4c <alt_dev_llist_insert+0x2c>
   23e40:	e0bffe17 	ldw	r2,-8(fp)
   23e44:	10800217 	ldw	r2,8(r2)
   23e48:	1000051e 	bne	r2,zero,23e60 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   23e4c:	0023dd00 	call	23dd0 <alt_get_errno>
   23e50:	00c00584 	movi	r3,22
   23e54:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   23e58:	00bffa84 	movi	r2,-22
   23e5c:	00001306 	br	23eac <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   23e60:	e0bffe17 	ldw	r2,-8(fp)
   23e64:	e0ffff17 	ldw	r3,-4(fp)
   23e68:	e0fffc15 	stw	r3,-16(fp)
   23e6c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23e70:	e0bffd17 	ldw	r2,-12(fp)
   23e74:	e0fffc17 	ldw	r3,-16(fp)
   23e78:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23e7c:	e0bffc17 	ldw	r2,-16(fp)
   23e80:	10c00017 	ldw	r3,0(r2)
   23e84:	e0bffd17 	ldw	r2,-12(fp)
   23e88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23e8c:	e0bffc17 	ldw	r2,-16(fp)
   23e90:	10800017 	ldw	r2,0(r2)
   23e94:	e0fffd17 	ldw	r3,-12(fp)
   23e98:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23e9c:	e0bffc17 	ldw	r2,-16(fp)
   23ea0:	e0fffd17 	ldw	r3,-12(fp)
   23ea4:	10c00015 	stw	r3,0(r2)

  return 0;  
   23ea8:	0005883a 	mov	r2,zero
}
   23eac:	e037883a 	mov	sp,fp
   23eb0:	dfc00117 	ldw	ra,4(sp)
   23eb4:	df000017 	ldw	fp,0(sp)
   23eb8:	dec00204 	addi	sp,sp,8
   23ebc:	f800283a 	ret

00023ec0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   23ec0:	deffff04 	addi	sp,sp,-4
   23ec4:	df000015 	stw	fp,0(sp)
   23ec8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   23ecc:	e037883a 	mov	sp,fp
   23ed0:	df000017 	ldw	fp,0(sp)
   23ed4:	dec00104 	addi	sp,sp,4
   23ed8:	f800283a 	ret

00023edc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   23edc:	defff804 	addi	sp,sp,-32
   23ee0:	dfc00715 	stw	ra,28(sp)
   23ee4:	df000615 	stw	fp,24(sp)
   23ee8:	dc000515 	stw	r16,20(sp)
   23eec:	df000504 	addi	fp,sp,20
   23ef0:	e13ffc15 	stw	r4,-16(fp)
   23ef4:	e17ffd15 	stw	r5,-12(fp)
   23ef8:	e1bffe15 	stw	r6,-8(fp)
   23efc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   23f00:	e13ffd17 	ldw	r4,-12(fp)
   23f04:	e17ffe17 	ldw	r5,-8(fp)
   23f08:	e1bfff17 	ldw	r6,-4(fp)
   23f0c:	00241740 	call	24174 <open>
   23f10:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   23f14:	e0bffb17 	ldw	r2,-20(fp)
   23f18:	10002216 	blt	r2,zero,23fa4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   23f1c:	040000b4 	movhi	r16,2
   23f20:	8411b504 	addi	r16,r16,18132
   23f24:	e0bffb17 	ldw	r2,-20(fp)
   23f28:	1009883a 	mov	r4,r2
   23f2c:	01400304 	movi	r5,12
   23f30:	00236f00 	call	236f0 <__mulsi3>
   23f34:	8085883a 	add	r2,r16,r2
   23f38:	10c00017 	ldw	r3,0(r2)
   23f3c:	e0bffc17 	ldw	r2,-16(fp)
   23f40:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   23f44:	040000b4 	movhi	r16,2
   23f48:	8411b504 	addi	r16,r16,18132
   23f4c:	e0bffb17 	ldw	r2,-20(fp)
   23f50:	1009883a 	mov	r4,r2
   23f54:	01400304 	movi	r5,12
   23f58:	00236f00 	call	236f0 <__mulsi3>
   23f5c:	8085883a 	add	r2,r16,r2
   23f60:	10800104 	addi	r2,r2,4
   23f64:	10c00017 	ldw	r3,0(r2)
   23f68:	e0bffc17 	ldw	r2,-16(fp)
   23f6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23f70:	040000b4 	movhi	r16,2
   23f74:	8411b504 	addi	r16,r16,18132
   23f78:	e0bffb17 	ldw	r2,-20(fp)
   23f7c:	1009883a 	mov	r4,r2
   23f80:	01400304 	movi	r5,12
   23f84:	00236f00 	call	236f0 <__mulsi3>
   23f88:	8085883a 	add	r2,r16,r2
   23f8c:	10800204 	addi	r2,r2,8
   23f90:	10c00017 	ldw	r3,0(r2)
   23f94:	e0bffc17 	ldw	r2,-16(fp)
   23f98:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23f9c:	e13ffb17 	ldw	r4,-20(fp)
   23fa0:	00242cc0 	call	242cc <alt_release_fd>
  }
} 
   23fa4:	e037883a 	mov	sp,fp
   23fa8:	dfc00217 	ldw	ra,8(sp)
   23fac:	df000117 	ldw	fp,4(sp)
   23fb0:	dc000017 	ldw	r16,0(sp)
   23fb4:	dec00304 	addi	sp,sp,12
   23fb8:	f800283a 	ret

00023fbc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   23fbc:	defffb04 	addi	sp,sp,-20
   23fc0:	dfc00415 	stw	ra,16(sp)
   23fc4:	df000315 	stw	fp,12(sp)
   23fc8:	df000304 	addi	fp,sp,12
   23fcc:	e13ffd15 	stw	r4,-12(fp)
   23fd0:	e17ffe15 	stw	r5,-8(fp)
   23fd4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   23fd8:	010000b4 	movhi	r4,2
   23fdc:	2111b804 	addi	r4,r4,18144
   23fe0:	e17ffd17 	ldw	r5,-12(fp)
   23fe4:	01800044 	movi	r6,1
   23fe8:	01c07fc4 	movi	r7,511
   23fec:	0023edc0 	call	23edc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   23ff0:	010000b4 	movhi	r4,2
   23ff4:	2111b504 	addi	r4,r4,18132
   23ff8:	e17ffe17 	ldw	r5,-8(fp)
   23ffc:	000d883a 	mov	r6,zero
   24000:	01c07fc4 	movi	r7,511
   24004:	0023edc0 	call	23edc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   24008:	010000b4 	movhi	r4,2
   2400c:	2111bb04 	addi	r4,r4,18156
   24010:	e17fff17 	ldw	r5,-4(fp)
   24014:	01800044 	movi	r6,1
   24018:	01c07fc4 	movi	r7,511
   2401c:	0023edc0 	call	23edc <alt_open_fd>
}  
   24020:	e037883a 	mov	sp,fp
   24024:	dfc00117 	ldw	ra,4(sp)
   24028:	df000017 	ldw	fp,0(sp)
   2402c:	dec00204 	addi	sp,sp,8
   24030:	f800283a 	ret

00024034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24034:	defffe04 	addi	sp,sp,-8
   24038:	dfc00115 	stw	ra,4(sp)
   2403c:	df000015 	stw	fp,0(sp)
   24040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24044:	008000b4 	movhi	r2,2
   24048:	10922004 	addi	r2,r2,18560
   2404c:	10800017 	ldw	r2,0(r2)
   24050:	10000526 	beq	r2,zero,24068 <alt_get_errno+0x34>
   24054:	008000b4 	movhi	r2,2
   24058:	10922004 	addi	r2,r2,18560
   2405c:	10800017 	ldw	r2,0(r2)
   24060:	103ee83a 	callr	r2
   24064:	00000206 	br	24070 <alt_get_errno+0x3c>
   24068:	008000b4 	movhi	r2,2
   2406c:	1092ab04 	addi	r2,r2,19116
}
   24070:	e037883a 	mov	sp,fp
   24074:	dfc00117 	ldw	ra,4(sp)
   24078:	df000017 	ldw	fp,0(sp)
   2407c:	dec00204 	addi	sp,sp,8
   24080:	f800283a 	ret

00024084 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24084:	defffb04 	addi	sp,sp,-20
   24088:	dfc00415 	stw	ra,16(sp)
   2408c:	df000315 	stw	fp,12(sp)
   24090:	dc000215 	stw	r16,8(sp)
   24094:	df000204 	addi	fp,sp,8
   24098:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2409c:	e0bfff17 	ldw	r2,-4(fp)
   240a0:	10800217 	ldw	r2,8(r2)
   240a4:	10d00034 	orhi	r3,r2,16384
   240a8:	e0bfff17 	ldw	r2,-4(fp)
   240ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   240b0:	e03ffe15 	stw	zero,-8(fp)
   240b4:	00002206 	br	24140 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   240b8:	040000b4 	movhi	r16,2
   240bc:	8411b504 	addi	r16,r16,18132
   240c0:	e0bffe17 	ldw	r2,-8(fp)
   240c4:	1009883a 	mov	r4,r2
   240c8:	01400304 	movi	r5,12
   240cc:	00236f00 	call	236f0 <__mulsi3>
   240d0:	8085883a 	add	r2,r16,r2
   240d4:	10c00017 	ldw	r3,0(r2)
   240d8:	e0bfff17 	ldw	r2,-4(fp)
   240dc:	10800017 	ldw	r2,0(r2)
   240e0:	1880141e 	bne	r3,r2,24134 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   240e4:	040000b4 	movhi	r16,2
   240e8:	8411b504 	addi	r16,r16,18132
   240ec:	e0bffe17 	ldw	r2,-8(fp)
   240f0:	1009883a 	mov	r4,r2
   240f4:	01400304 	movi	r5,12
   240f8:	00236f00 	call	236f0 <__mulsi3>
   240fc:	8085883a 	add	r2,r16,r2
   24100:	10800204 	addi	r2,r2,8
   24104:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24108:	10000a0e 	bge	r2,zero,24134 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2410c:	e13ffe17 	ldw	r4,-8(fp)
   24110:	01400304 	movi	r5,12
   24114:	00236f00 	call	236f0 <__mulsi3>
   24118:	00c000b4 	movhi	r3,2
   2411c:	18d1b504 	addi	r3,r3,18132
   24120:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24124:	e0bfff17 	ldw	r2,-4(fp)
   24128:	18800226 	beq	r3,r2,24134 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2412c:	00bffcc4 	movi	r2,-13
   24130:	00000a06 	br	2415c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24134:	e0bffe17 	ldw	r2,-8(fp)
   24138:	10800044 	addi	r2,r2,1
   2413c:	e0bffe15 	stw	r2,-8(fp)
   24140:	008000b4 	movhi	r2,2
   24144:	10921f04 	addi	r2,r2,18556
   24148:	10800017 	ldw	r2,0(r2)
   2414c:	1007883a 	mov	r3,r2
   24150:	e0bffe17 	ldw	r2,-8(fp)
   24154:	18bfd82e 	bgeu	r3,r2,240b8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24158:	0005883a 	mov	r2,zero
}
   2415c:	e037883a 	mov	sp,fp
   24160:	dfc00217 	ldw	ra,8(sp)
   24164:	df000117 	ldw	fp,4(sp)
   24168:	dc000017 	ldw	r16,0(sp)
   2416c:	dec00304 	addi	sp,sp,12
   24170:	f800283a 	ret

00024174 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24174:	defff604 	addi	sp,sp,-40
   24178:	dfc00915 	stw	ra,36(sp)
   2417c:	df000815 	stw	fp,32(sp)
   24180:	df000804 	addi	fp,sp,32
   24184:	e13ffd15 	stw	r4,-12(fp)
   24188:	e17ffe15 	stw	r5,-8(fp)
   2418c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24190:	00bfffc4 	movi	r2,-1
   24194:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24198:	00bffb44 	movi	r2,-19
   2419c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   241a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   241a4:	e13ffd17 	ldw	r4,-12(fp)
   241a8:	014000b4 	movhi	r5,2
   241ac:	29521d04 	addi	r5,r5,18548
   241b0:	002436c0 	call	2436c <alt_find_dev>
   241b4:	e0bff815 	stw	r2,-32(fp)
   241b8:	e0bff817 	ldw	r2,-32(fp)
   241bc:	1000051e 	bne	r2,zero,241d4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   241c0:	e13ffd17 	ldw	r4,-12(fp)
   241c4:	00243fc0 	call	243fc <alt_find_file>
   241c8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   241cc:	00800044 	movi	r2,1
   241d0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   241d4:	e0bff817 	ldw	r2,-32(fp)
   241d8:	10002a26 	beq	r2,zero,24284 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   241dc:	e13ff817 	ldw	r4,-32(fp)
   241e0:	00245100 	call	24510 <alt_get_fd>
   241e4:	e0bff915 	stw	r2,-28(fp)
   241e8:	e0bff917 	ldw	r2,-28(fp)
   241ec:	1000030e 	bge	r2,zero,241fc <open+0x88>
    {
      status = index;
   241f0:	e0bff917 	ldw	r2,-28(fp)
   241f4:	e0bffa15 	stw	r2,-24(fp)
   241f8:	00002406 	br	2428c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   241fc:	e13ff917 	ldw	r4,-28(fp)
   24200:	01400304 	movi	r5,12
   24204:	00236f00 	call	236f0 <__mulsi3>
   24208:	00c000b4 	movhi	r3,2
   2420c:	18d1b504 	addi	r3,r3,18132
   24210:	10c5883a 	add	r2,r2,r3
   24214:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24218:	e0fffe17 	ldw	r3,-8(fp)
   2421c:	00900034 	movhi	r2,16384
   24220:	10bfffc4 	addi	r2,r2,-1
   24224:	1886703a 	and	r3,r3,r2
   24228:	e0bffc17 	ldw	r2,-16(fp)
   2422c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24230:	e0bffb17 	ldw	r2,-20(fp)
   24234:	1000051e 	bne	r2,zero,2424c <open+0xd8>
   24238:	e13ffc17 	ldw	r4,-16(fp)
   2423c:	00240840 	call	24084 <alt_file_locked>
   24240:	e0bffa15 	stw	r2,-24(fp)
   24244:	e0bffa17 	ldw	r2,-24(fp)
   24248:	10001016 	blt	r2,zero,2428c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2424c:	e0bff817 	ldw	r2,-32(fp)
   24250:	10800317 	ldw	r2,12(r2)
   24254:	10000826 	beq	r2,zero,24278 <open+0x104>
   24258:	e0bff817 	ldw	r2,-32(fp)
   2425c:	10800317 	ldw	r2,12(r2)
   24260:	e13ffc17 	ldw	r4,-16(fp)
   24264:	e17ffd17 	ldw	r5,-12(fp)
   24268:	e1bffe17 	ldw	r6,-8(fp)
   2426c:	e1ffff17 	ldw	r7,-4(fp)
   24270:	103ee83a 	callr	r2
   24274:	00000106 	br	2427c <open+0x108>
   24278:	0005883a 	mov	r2,zero
   2427c:	e0bffa15 	stw	r2,-24(fp)
   24280:	00000206 	br	2428c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24284:	00bffb44 	movi	r2,-19
   24288:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2428c:	e0bffa17 	ldw	r2,-24(fp)
   24290:	1000080e 	bge	r2,zero,242b4 <open+0x140>
  {
    alt_release_fd (index);  
   24294:	e13ff917 	ldw	r4,-28(fp)
   24298:	00242cc0 	call	242cc <alt_release_fd>
    ALT_ERRNO = -status;
   2429c:	00240340 	call	24034 <alt_get_errno>
   242a0:	e0fffa17 	ldw	r3,-24(fp)
   242a4:	00c7c83a 	sub	r3,zero,r3
   242a8:	10c00015 	stw	r3,0(r2)
    return -1;
   242ac:	00bfffc4 	movi	r2,-1
   242b0:	00000106 	br	242b8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   242b4:	e0bff917 	ldw	r2,-28(fp)
}
   242b8:	e037883a 	mov	sp,fp
   242bc:	dfc00117 	ldw	ra,4(sp)
   242c0:	df000017 	ldw	fp,0(sp)
   242c4:	dec00204 	addi	sp,sp,8
   242c8:	f800283a 	ret

000242cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   242cc:	defffc04 	addi	sp,sp,-16
   242d0:	dfc00315 	stw	ra,12(sp)
   242d4:	df000215 	stw	fp,8(sp)
   242d8:	dc000115 	stw	r16,4(sp)
   242dc:	df000104 	addi	fp,sp,4
   242e0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   242e4:	e0bfff17 	ldw	r2,-4(fp)
   242e8:	108000d0 	cmplti	r2,r2,3
   242ec:	1000111e 	bne	r2,zero,24334 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   242f0:	040000b4 	movhi	r16,2
   242f4:	8411b504 	addi	r16,r16,18132
   242f8:	e0bfff17 	ldw	r2,-4(fp)
   242fc:	1009883a 	mov	r4,r2
   24300:	01400304 	movi	r5,12
   24304:	00236f00 	call	236f0 <__mulsi3>
   24308:	8085883a 	add	r2,r16,r2
   2430c:	10800204 	addi	r2,r2,8
   24310:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   24314:	040000b4 	movhi	r16,2
   24318:	8411b504 	addi	r16,r16,18132
   2431c:	e0bfff17 	ldw	r2,-4(fp)
   24320:	1009883a 	mov	r4,r2
   24324:	01400304 	movi	r5,12
   24328:	00236f00 	call	236f0 <__mulsi3>
   2432c:	8085883a 	add	r2,r16,r2
   24330:	10000015 	stw	zero,0(r2)
  }
}
   24334:	e037883a 	mov	sp,fp
   24338:	dfc00217 	ldw	ra,8(sp)
   2433c:	df000117 	ldw	fp,4(sp)
   24340:	dc000017 	ldw	r16,0(sp)
   24344:	dec00304 	addi	sp,sp,12
   24348:	f800283a 	ret

0002434c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   2434c:	deffff04 	addi	sp,sp,-4
   24350:	df000015 	stw	fp,0(sp)
   24354:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24358:	000170fa 	wrctl	ienable,zero
}
   2435c:	e037883a 	mov	sp,fp
   24360:	df000017 	ldw	fp,0(sp)
   24364:	dec00104 	addi	sp,sp,4
   24368:	f800283a 	ret

0002436c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2436c:	defffa04 	addi	sp,sp,-24
   24370:	dfc00515 	stw	ra,20(sp)
   24374:	df000415 	stw	fp,16(sp)
   24378:	df000404 	addi	fp,sp,16
   2437c:	e13ffe15 	stw	r4,-8(fp)
   24380:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24384:	e0bfff17 	ldw	r2,-4(fp)
   24388:	10800017 	ldw	r2,0(r2)
   2438c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24390:	e13ffe17 	ldw	r4,-8(fp)
   24394:	002462c0 	call	2462c <strlen>
   24398:	10800044 	addi	r2,r2,1
   2439c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   243a0:	00000d06 	br	243d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   243a4:	e0bffc17 	ldw	r2,-16(fp)
   243a8:	10c00217 	ldw	r3,8(r2)
   243ac:	e0bffd17 	ldw	r2,-12(fp)
   243b0:	1809883a 	mov	r4,r3
   243b4:	e17ffe17 	ldw	r5,-8(fp)
   243b8:	100d883a 	mov	r6,r2
   243bc:	00245e40 	call	245e4 <memcmp>
   243c0:	1000021e 	bne	r2,zero,243cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   243c4:	e0bffc17 	ldw	r2,-16(fp)
   243c8:	00000706 	br	243e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   243cc:	e0bffc17 	ldw	r2,-16(fp)
   243d0:	10800017 	ldw	r2,0(r2)
   243d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   243d8:	e0fffc17 	ldw	r3,-16(fp)
   243dc:	e0bfff17 	ldw	r2,-4(fp)
   243e0:	18bff01e 	bne	r3,r2,243a4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   243e4:	0005883a 	mov	r2,zero
}
   243e8:	e037883a 	mov	sp,fp
   243ec:	dfc00117 	ldw	ra,4(sp)
   243f0:	df000017 	ldw	fp,0(sp)
   243f4:	dec00204 	addi	sp,sp,8
   243f8:	f800283a 	ret

000243fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   243fc:	defffb04 	addi	sp,sp,-20
   24400:	dfc00415 	stw	ra,16(sp)
   24404:	df000315 	stw	fp,12(sp)
   24408:	df000304 	addi	fp,sp,12
   2440c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24410:	008000b4 	movhi	r2,2
   24414:	10921b04 	addi	r2,r2,18540
   24418:	10800017 	ldw	r2,0(r2)
   2441c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24420:	00003106 	br	244e8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   24424:	e0bffd17 	ldw	r2,-12(fp)
   24428:	10800217 	ldw	r2,8(r2)
   2442c:	1009883a 	mov	r4,r2
   24430:	002462c0 	call	2462c <strlen>
   24434:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24438:	e0bffd17 	ldw	r2,-12(fp)
   2443c:	10c00217 	ldw	r3,8(r2)
   24440:	e0bffe17 	ldw	r2,-8(fp)
   24444:	10bfffc4 	addi	r2,r2,-1
   24448:	1885883a 	add	r2,r3,r2
   2444c:	10800003 	ldbu	r2,0(r2)
   24450:	10803fcc 	andi	r2,r2,255
   24454:	1080201c 	xori	r2,r2,128
   24458:	10bfe004 	addi	r2,r2,-128
   2445c:	10800bd8 	cmpnei	r2,r2,47
   24460:	1000031e 	bne	r2,zero,24470 <alt_find_file+0x74>
    {
      len -= 1;
   24464:	e0bffe17 	ldw	r2,-8(fp)
   24468:	10bfffc4 	addi	r2,r2,-1
   2446c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24470:	e0bffe17 	ldw	r2,-8(fp)
   24474:	e0ffff17 	ldw	r3,-4(fp)
   24478:	1885883a 	add	r2,r3,r2
   2447c:	10800003 	ldbu	r2,0(r2)
   24480:	10803fcc 	andi	r2,r2,255
   24484:	1080201c 	xori	r2,r2,128
   24488:	10bfe004 	addi	r2,r2,-128
   2448c:	10800be0 	cmpeqi	r2,r2,47
   24490:	1000081e 	bne	r2,zero,244b4 <alt_find_file+0xb8>
   24494:	e0bffe17 	ldw	r2,-8(fp)
   24498:	e0ffff17 	ldw	r3,-4(fp)
   2449c:	1885883a 	add	r2,r3,r2
   244a0:	10800003 	ldbu	r2,0(r2)
   244a4:	10803fcc 	andi	r2,r2,255
   244a8:	1080201c 	xori	r2,r2,128
   244ac:	10bfe004 	addi	r2,r2,-128
   244b0:	10000a1e 	bne	r2,zero,244dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   244b4:	e0bffd17 	ldw	r2,-12(fp)
   244b8:	10c00217 	ldw	r3,8(r2)
   244bc:	e0bffe17 	ldw	r2,-8(fp)
   244c0:	1809883a 	mov	r4,r3
   244c4:	e17fff17 	ldw	r5,-4(fp)
   244c8:	100d883a 	mov	r6,r2
   244cc:	00245e40 	call	245e4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   244d0:	1000021e 	bne	r2,zero,244dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   244d4:	e0bffd17 	ldw	r2,-12(fp)
   244d8:	00000806 	br	244fc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   244dc:	e0bffd17 	ldw	r2,-12(fp)
   244e0:	10800017 	ldw	r2,0(r2)
   244e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   244e8:	e0fffd17 	ldw	r3,-12(fp)
   244ec:	008000b4 	movhi	r2,2
   244f0:	10921b04 	addi	r2,r2,18540
   244f4:	18bfcb1e 	bne	r3,r2,24424 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   244f8:	0005883a 	mov	r2,zero
}
   244fc:	e037883a 	mov	sp,fp
   24500:	dfc00117 	ldw	ra,4(sp)
   24504:	df000017 	ldw	fp,0(sp)
   24508:	dec00204 	addi	sp,sp,8
   2450c:	f800283a 	ret

00024510 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24510:	defffa04 	addi	sp,sp,-24
   24514:	dfc00515 	stw	ra,20(sp)
   24518:	df000415 	stw	fp,16(sp)
   2451c:	dc000315 	stw	r16,12(sp)
   24520:	df000304 	addi	fp,sp,12
   24524:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   24528:	00bffa04 	movi	r2,-24
   2452c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24530:	e03ffd15 	stw	zero,-12(fp)
   24534:	00002106 	br	245bc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   24538:	040000b4 	movhi	r16,2
   2453c:	8411b504 	addi	r16,r16,18132
   24540:	e0bffd17 	ldw	r2,-12(fp)
   24544:	1009883a 	mov	r4,r2
   24548:	01400304 	movi	r5,12
   2454c:	00236f00 	call	236f0 <__mulsi3>
   24550:	8085883a 	add	r2,r16,r2
   24554:	10800017 	ldw	r2,0(r2)
   24558:	1000151e 	bne	r2,zero,245b0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   2455c:	040000b4 	movhi	r16,2
   24560:	8411b504 	addi	r16,r16,18132
   24564:	e0bffd17 	ldw	r2,-12(fp)
   24568:	1009883a 	mov	r4,r2
   2456c:	01400304 	movi	r5,12
   24570:	00236f00 	call	236f0 <__mulsi3>
   24574:	8085883a 	add	r2,r16,r2
   24578:	e0ffff17 	ldw	r3,-4(fp)
   2457c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24580:	008000b4 	movhi	r2,2
   24584:	10921f04 	addi	r2,r2,18556
   24588:	10c00017 	ldw	r3,0(r2)
   2458c:	e0bffd17 	ldw	r2,-12(fp)
   24590:	1880040e 	bge	r3,r2,245a4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   24594:	008000b4 	movhi	r2,2
   24598:	10921f04 	addi	r2,r2,18556
   2459c:	e0fffd17 	ldw	r3,-12(fp)
   245a0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   245a4:	e0bffd17 	ldw	r2,-12(fp)
   245a8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   245ac:	00000606 	br	245c8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   245b0:	e0bffd17 	ldw	r2,-12(fp)
   245b4:	10800044 	addi	r2,r2,1
   245b8:	e0bffd15 	stw	r2,-12(fp)
   245bc:	e0bffd17 	ldw	r2,-12(fp)
   245c0:	10800810 	cmplti	r2,r2,32
   245c4:	103fdc1e 	bne	r2,zero,24538 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   245c8:	e0bffe17 	ldw	r2,-8(fp)
}
   245cc:	e037883a 	mov	sp,fp
   245d0:	dfc00217 	ldw	ra,8(sp)
   245d4:	df000117 	ldw	fp,4(sp)
   245d8:	dc000017 	ldw	r16,0(sp)
   245dc:	dec00304 	addi	sp,sp,12
   245e0:	f800283a 	ret

000245e4 <memcmp>:
   245e4:	30000d26 	beq	r6,zero,2461c <memcmp+0x38>
   245e8:	20c00003 	ldbu	r3,0(r4)
   245ec:	28800003 	ldbu	r2,0(r5)
   245f0:	18800c1e 	bne	r3,r2,24624 <memcmp+0x40>
   245f4:	31bfff84 	addi	r6,r6,-2
   245f8:	01ffffc4 	movi	r7,-1
   245fc:	00000406 	br	24610 <memcmp+0x2c>
   24600:	20c00003 	ldbu	r3,0(r4)
   24604:	28800003 	ldbu	r2,0(r5)
   24608:	31bfffc4 	addi	r6,r6,-1
   2460c:	1880051e 	bne	r3,r2,24624 <memcmp+0x40>
   24610:	21000044 	addi	r4,r4,1
   24614:	29400044 	addi	r5,r5,1
   24618:	31fff91e 	bne	r6,r7,24600 <memcmp+0x1c>
   2461c:	0005883a 	mov	r2,zero
   24620:	f800283a 	ret
   24624:	1885c83a 	sub	r2,r3,r2
   24628:	f800283a 	ret

0002462c <strlen>:
   2462c:	20800007 	ldb	r2,0(r4)
   24630:	10000626 	beq	r2,zero,2464c <strlen+0x20>
   24634:	2005883a 	mov	r2,r4
   24638:	10800044 	addi	r2,r2,1
   2463c:	10c00007 	ldb	r3,0(r2)
   24640:	183ffd1e 	bne	r3,zero,24638 <strlen+0xc>
   24644:	1105c83a 	sub	r2,r2,r4
   24648:	f800283a 	ret
   2464c:	0005883a 	mov	r2,zero
   24650:	f800283a 	ret
